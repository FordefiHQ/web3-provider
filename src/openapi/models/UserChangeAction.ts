/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
} from './ApprovalRequest';
import type { PendingUserChange } from './PendingUserChange';
import {
    PendingUserChangeFromJSON,
    PendingUserChangeFromJSONTyped,
    PendingUserChangeToJSON,
} from './PendingUserChange';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
} from './UserRole';

/**
 * 
 * @export
 * @interface UserChangeAction
 */
export interface UserChangeAction {
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof UserChangeAction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserChangeAction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    type: UserChangeActionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserChangeAction
     */
    isPending: boolean;
    /**
     * 
     * @type {UserRef}
     * @memberof UserChangeAction
     */
    createdBy: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof UserChangeAction
     */
    abortedBy?: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof UserChangeAction
     */
    user: UserRef;
    /**
     * 
     * @type {UserRole}
     * @memberof UserChangeAction
     */
    userRole: UserRole;
    /**
     * 
     * @type {PendingUserChange}
     * @memberof UserChangeAction
     */
    pendingChange: PendingUserChange;
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    changeRequestId: string;
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    state: UserChangeActionStateEnum;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof UserChangeAction
     */
    approvalRequest: ApprovalRequest;
}


/**
 * @export
 */
export const UserChangeActionTypeEnum = {
    userChange: 'user_change'
} as const;
export type UserChangeActionTypeEnum = typeof UserChangeActionTypeEnum[keyof typeof UserChangeActionTypeEnum];

/**
 * @export
 */
export const UserChangeActionStateEnum = {
    created: 'created',
    completed: 'completed',
    aborted: 'aborted',
    failed: 'failed'
} as const;
export type UserChangeActionStateEnum = typeof UserChangeActionStateEnum[keyof typeof UserChangeActionStateEnum];


/**
 * Check if a given object implements the UserChangeAction interface.
 */
export function instanceOfUserChangeAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "isPending" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "userRole" in value;
    isInstance = isInstance && "pendingChange" in value;
    isInstance = isInstance && "changeRequestId" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "approvalRequest" in value;

    return isInstance;
}

export function UserChangeActionFromJSON(json: any): UserChangeAction {
    return UserChangeActionFromJSONTyped(json, false);
}

export function UserChangeActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserChangeAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'type': json['type'],
        'isPending': json['is_pending'],
        'createdBy': UserRefFromJSON(json['created_by']),
        'abortedBy': !exists(json, 'aborted_by') ? undefined : UserRefFromJSON(json['aborted_by']),
        'user': UserRefFromJSON(json['user']),
        'userRole': UserRoleFromJSON(json['user_role']),
        'pendingChange': PendingUserChangeFromJSON(json['pending_change']),
        'changeRequestId': json['change_request_id'],
        'state': json['state'],
        'approvalRequest': ApprovalRequestFromJSON(json['approval_request']),
    };
}

export function UserChangeActionToJSON(value?: UserChangeAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'type': value.type,
        'is_pending': value.isPending,
        'created_by': UserRefToJSON(value.createdBy),
        'aborted_by': UserRefToJSON(value.abortedBy),
        'user': UserRefToJSON(value.user),
        'user_role': UserRoleToJSON(value.userRole),
        'pending_change': PendingUserChangeToJSON(value.pendingChange),
        'change_request_id': value.changeRequestId,
        'state': value.state,
        'approval_request': ApprovalRequestToJSON(value.approvalRequest),
    };
}

