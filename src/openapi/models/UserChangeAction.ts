/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
    UserRoleToJSONTyped,
} from './UserRole';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
    ApprovalRequestToJSONTyped,
} from './ApprovalRequest';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
    UserRefToJSONTyped,
} from './UserRef';
import type { VerificationRequest } from './VerificationRequest';
import {
    VerificationRequestFromJSON,
    VerificationRequestFromJSONTyped,
    VerificationRequestToJSON,
    VerificationRequestToJSONTyped,
} from './VerificationRequest';
import type { PendingUserChange } from './PendingUserChange';
import {
    PendingUserChangeFromJSON,
    PendingUserChangeFromJSONTyped,
    PendingUserChangeToJSON,
    PendingUserChangeToJSONTyped,
} from './PendingUserChange';

/**
 * 
 * @export
 * @interface UserChangeAction
 */
export interface UserChangeAction {
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof UserChangeAction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserChangeAction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof UserChangeAction
     */
    isPending: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    type: UserChangeActionTypeEnum;
    /**
     * 
     * @type {UserRef}
     * @memberof UserChangeAction
     */
    createdBy: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof UserChangeAction
     */
    abortedBy?: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof UserChangeAction
     */
    user: UserRef;
    /**
     * 
     * @type {UserRole}
     * @memberof UserChangeAction
     */
    userRole: UserRole;
    /**
     * 
     * @type {PendingUserChange}
     * @memberof UserChangeAction
     */
    pendingChange: PendingUserChange;
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    changeRequestId: string;
    /**
     * 
     * @type {string}
     * @memberof UserChangeAction
     */
    state: UserChangeActionStateEnum;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof UserChangeAction
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {VerificationRequest}
     * @memberof UserChangeAction
     */
    verificationRequest?: VerificationRequest;
}


/**
 * @export
 */
export const UserChangeActionTypeEnum = {
    userChange: 'user_change'
} as const;
export type UserChangeActionTypeEnum = typeof UserChangeActionTypeEnum[keyof typeof UserChangeActionTypeEnum];

/**
 * @export
 */
export const UserChangeActionStateEnum = {
    pendingVerification: 'pending_verification',
    pendingApproval: 'pending_approval',
    created: 'created',
    completed: 'completed',
    aborted: 'aborted',
    failed: 'failed'
} as const;
export type UserChangeActionStateEnum = typeof UserChangeActionStateEnum[keyof typeof UserChangeActionStateEnum];


/**
 * Check if a given object implements the UserChangeAction interface.
 */
export function instanceOfUserChangeAction(value: object): value is UserChangeAction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('isPending' in value) || value['isPending'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('userRole' in value) || value['userRole'] === undefined) return false;
    if (!('pendingChange' in value) || value['pendingChange'] === undefined) return false;
    if (!('changeRequestId' in value) || value['changeRequestId'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    return true;
}

export function UserChangeActionFromJSON(json: any): UserChangeAction {
    return UserChangeActionFromJSONTyped(json, false);
}

export function UserChangeActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserChangeAction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'isPending': json['is_pending'],
        'type': json['type'],
        'createdBy': UserRefFromJSON(json['created_by']),
        'abortedBy': json['aborted_by'] == null ? undefined : UserRefFromJSON(json['aborted_by']),
        'user': UserRefFromJSON(json['user']),
        'userRole': UserRoleFromJSON(json['user_role']),
        'pendingChange': PendingUserChangeFromJSON(json['pending_change']),
        'changeRequestId': json['change_request_id'],
        'state': json['state'],
        'approvalRequest': json['approval_request'] == null ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'verificationRequest': json['verification_request'] == null ? undefined : VerificationRequestFromJSON(json['verification_request']),
    };
}

export function UserChangeActionToJSON(json: any): UserChangeAction {
    return UserChangeActionToJSONTyped(json, false);
}

export function UserChangeActionToJSONTyped(value?: UserChangeAction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'is_pending': value['isPending'],
        'type': value['type'],
        'created_by': UserRefToJSON(value['createdBy']),
        'aborted_by': UserRefToJSON(value['abortedBy']),
        'user': UserRefToJSON(value['user']),
        'user_role': UserRoleToJSON(value['userRole']),
        'pending_change': PendingUserChangeToJSON(value['pendingChange']),
        'change_request_id': value['changeRequestId'],
        'state': value['state'],
        'approval_request': ApprovalRequestToJSON(value['approvalRequest']),
        'verification_request': VerificationRequestToJSON(value['verificationRequest']),
    };
}

