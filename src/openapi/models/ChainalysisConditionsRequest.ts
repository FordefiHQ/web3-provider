/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AmountLimitCondition } from './AmountLimitCondition';
import {
    AmountLimitConditionFromJSON,
    AmountLimitConditionFromJSONTyped,
    AmountLimitConditionToJSON,
    AmountLimitConditionToJSONTyped,
} from './AmountLimitCondition';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
    CategoryToJSONTyped,
} from './Category';
import type { ExposureType } from './ExposureType';
import {
    ExposureTypeFromJSON,
    ExposureTypeFromJSONTyped,
    ExposureTypeToJSON,
    ExposureTypeToJSONTyped,
} from './ExposureType';
import type { InitiatorsConditionRequest } from './InitiatorsConditionRequest';
import {
    InitiatorsConditionRequestFromJSON,
    InitiatorsConditionRequestFromJSONTyped,
    InitiatorsConditionRequestToJSON,
    InitiatorsConditionRequestToJSONTyped,
} from './InitiatorsConditionRequest';
import type { AmlOriginsConditionRequest } from './AmlOriginsConditionRequest';
import {
    AmlOriginsConditionRequestFromJSON,
    AmlOriginsConditionRequestFromJSONTyped,
    AmlOriginsConditionRequestToJSON,
    AmlOriginsConditionRequestToJSONTyped,
} from './AmlOriginsConditionRequest';
import type { RiskRating } from './RiskRating';
import {
    RiskRatingFromJSON,
    RiskRatingFromJSONTyped,
    RiskRatingToJSON,
    RiskRatingToJSONTyped,
} from './RiskRating';
import type { Direction } from './Direction';
import {
    DirectionFromJSON,
    DirectionFromJSONTyped,
    DirectionToJSON,
    DirectionToJSONTyped,
} from './Direction';
import type { RecipientsConditionRequest } from './RecipientsConditionRequest';
import {
    RecipientsConditionRequestFromJSON,
    RecipientsConditionRequestFromJSONTyped,
    RecipientsConditionRequestToJSON,
    RecipientsConditionRequestToJSONTyped,
} from './RecipientsConditionRequest';

/**
 * 
 * @export
 * @interface ChainalysisConditionsRequest
 */
export interface ChainalysisConditionsRequest {
    /**
     * 
     * @type {InitiatorsConditionRequest}
     * @memberof ChainalysisConditionsRequest
     */
    initiators?: InitiatorsConditionRequest;
    /**
     * 
     * @type {AmlOriginsConditionRequest}
     * @memberof ChainalysisConditionsRequest
     */
    origins?: AmlOriginsConditionRequest;
    /**
     * 
     * @type {RecipientsConditionRequest}
     * @memberof ChainalysisConditionsRequest
     */
    recipients?: RecipientsConditionRequest;
    /**
     * 
     * @type {AmountLimitCondition}
     * @memberof ChainalysisConditionsRequest
     */
    amountLimit?: AmountLimitCondition;
    /**
     * 
     * @type {Direction}
     * @memberof ChainalysisConditionsRequest
     */
    direction: Direction;
    /**
     * 
     * @type {Array<Category>}
     * @memberof ChainalysisConditionsRequest
     */
    categories?: Array<Category>;
    /**
     * 
     * @type {Array<RiskRating>}
     * @memberof ChainalysisConditionsRequest
     */
    riskRating?: Array<RiskRating>;
    /**
     * 
     * @type {ExposureType}
     * @memberof ChainalysisConditionsRequest
     */
    exposureType?: ExposureType;
}



/**
 * Check if a given object implements the ChainalysisConditionsRequest interface.
 */
export function instanceOfChainalysisConditionsRequest(value: object): value is ChainalysisConditionsRequest {
    if (!('direction' in value) || value['direction'] === undefined) return false;
    return true;
}

export function ChainalysisConditionsRequestFromJSON(json: any): ChainalysisConditionsRequest {
    return ChainalysisConditionsRequestFromJSONTyped(json, false);
}

export function ChainalysisConditionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChainalysisConditionsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'initiators': json['initiators'] == null ? undefined : InitiatorsConditionRequestFromJSON(json['initiators']),
        'origins': json['origins'] == null ? undefined : AmlOriginsConditionRequestFromJSON(json['origins']),
        'recipients': json['recipients'] == null ? undefined : RecipientsConditionRequestFromJSON(json['recipients']),
        'amountLimit': json['amount_limit'] == null ? undefined : AmountLimitConditionFromJSON(json['amount_limit']),
        'direction': DirectionFromJSON(json['direction']),
        'categories': json['categories'] == null ? undefined : ((json['categories'] as Array<any>).map(CategoryFromJSON)),
        'riskRating': json['risk_rating'] == null ? undefined : ((json['risk_rating'] as Array<any>).map(RiskRatingFromJSON)),
        'exposureType': json['exposure_type'] == null ? undefined : ExposureTypeFromJSON(json['exposure_type']),
    };
}

export function ChainalysisConditionsRequestToJSON(json: any): ChainalysisConditionsRequest {
    return ChainalysisConditionsRequestToJSONTyped(json, false);
}

export function ChainalysisConditionsRequestToJSONTyped(value?: ChainalysisConditionsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'initiators': InitiatorsConditionRequestToJSON(value['initiators']),
        'origins': AmlOriginsConditionRequestToJSON(value['origins']),
        'recipients': RecipientsConditionRequestToJSON(value['recipients']),
        'amount_limit': AmountLimitConditionToJSON(value['amountLimit']),
        'direction': DirectionToJSON(value['direction']),
        'categories': value['categories'] == null ? undefined : ((value['categories'] as Array<any>).map(CategoryToJSON)),
        'risk_rating': value['riskRating'] == null ? undefined : ((value['riskRating'] as Array<any>).map(RiskRatingToJSON)),
        'exposure_type': ExposureTypeToJSON(value['exposureType']),
    };
}

