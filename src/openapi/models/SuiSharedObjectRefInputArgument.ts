/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SuiSharedObjectRefInputArgument
 */
export interface SuiSharedObjectRefInputArgument {
    /**
     * 
     * @type {string}
     * @memberof SuiSharedObjectRefInputArgument
     */
    type: SuiSharedObjectRefInputArgumentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SuiSharedObjectRefInputArgument
     */
    objectId: string;
    /**
     * 
     * @type {number}
     * @memberof SuiSharedObjectRefInputArgument
     */
    initialSharedVersion: number;
    /**
     * 
     * @type {boolean}
     * @memberof SuiSharedObjectRefInputArgument
     */
    mutable: boolean;
}


/**
 * @export
 */
export const SuiSharedObjectRefInputArgumentTypeEnum = {
    shared: 'shared'
} as const;
export type SuiSharedObjectRefInputArgumentTypeEnum = typeof SuiSharedObjectRefInputArgumentTypeEnum[keyof typeof SuiSharedObjectRefInputArgumentTypeEnum];


/**
 * Check if a given object implements the SuiSharedObjectRefInputArgument interface.
 */
export function instanceOfSuiSharedObjectRefInputArgument(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "objectId" in value;
    isInstance = isInstance && "initialSharedVersion" in value;
    isInstance = isInstance && "mutable" in value;

    return isInstance;
}

export function SuiSharedObjectRefInputArgumentFromJSON(json: any): SuiSharedObjectRefInputArgument {
    return SuiSharedObjectRefInputArgumentFromJSONTyped(json, false);
}

export function SuiSharedObjectRefInputArgumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuiSharedObjectRefInputArgument {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'objectId': json['object_id'],
        'initialSharedVersion': json['initial_shared_version'],
        'mutable': json['mutable'],
    };
}

export function SuiSharedObjectRefInputArgumentToJSON(value?: SuiSharedObjectRefInputArgument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'object_id': value.objectId,
        'initial_shared_version': value.initialSharedVersion,
        'mutable': value.mutable,
    };
}

