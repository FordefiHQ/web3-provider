/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RuleAction } from './RuleAction';
import {
    RuleActionFromJSON,
    RuleActionFromJSONTyped,
    RuleActionToJSON,
} from './RuleAction';
import type { TransactionRuleConditions } from './TransactionRuleConditions';
import {
    TransactionRuleConditionsFromJSON,
    TransactionRuleConditionsFromJSONTyped,
    TransactionRuleConditionsToJSON,
} from './TransactionRuleConditions';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';

/**
 * 
 * @export
 * @interface TransactionRule
 */
export interface TransactionRule {
    /**
     * 
     * @type {string}
     * @memberof TransactionRule
     */
    name: string;
    /**
     * 
     * @type {TransactionRuleConditions}
     * @memberof TransactionRule
     */
    ruleConditions: TransactionRuleConditions;
    /**
     * 
     * @type {RuleAction}
     * @memberof TransactionRule
     */
    ruleAction: RuleAction;
    /**
     * 
     * @type {string}
     * @memberof TransactionRule
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionRule
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionRule
     */
    modifiedAt: Date;
    /**
     * 
     * @type {UserRef}
     * @memberof TransactionRule
     */
    modifiedBy: UserRef;
}

/**
 * Check if a given object implements the TransactionRule interface.
 */
export function instanceOfTransactionRule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ruleConditions" in value;
    isInstance = isInstance && "ruleAction" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "modifiedBy" in value;

    return isInstance;
}

export function TransactionRuleFromJSON(json: any): TransactionRule {
    return TransactionRuleFromJSONTyped(json, false);
}

export function TransactionRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'ruleConditions': TransactionRuleConditionsFromJSON(json['rule_conditions']),
        'ruleAction': RuleActionFromJSON(json['rule_action']),
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'modifiedBy': UserRefFromJSON(json['modified_by']),
    };
}

export function TransactionRuleToJSON(value?: TransactionRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'rule_conditions': TransactionRuleConditionsToJSON(value.ruleConditions),
        'rule_action': RuleActionToJSON(value.ruleAction),
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'modified_by': UserRefToJSON(value.modifiedBy),
    };
}

