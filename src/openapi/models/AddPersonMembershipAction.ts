/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionSigningRequest } from './ActionSigningRequest';
import {
    ActionSigningRequestFromJSON,
    ActionSigningRequestFromJSONTyped,
    ActionSigningRequestToJSON,
} from './ActionSigningRequest';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
} from './ApprovalRequest';
import type { PersonRef } from './PersonRef';
import {
    PersonRefFromJSON,
    PersonRefFromJSONTyped,
    PersonRefToJSON,
} from './PersonRef';
import type { UserGroupRef } from './UserGroupRef';
import {
    UserGroupRefFromJSON,
    UserGroupRefFromJSONTyped,
    UserGroupRefToJSON,
} from './UserGroupRef';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';

/**
 * 
 * @export
 * @interface AddPersonMembershipAction
 */
export interface AddPersonMembershipAction {
    /**
     * 
     * @type {string}
     * @memberof AddPersonMembershipAction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof AddPersonMembershipAction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof AddPersonMembershipAction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof AddPersonMembershipAction
     */
    type: AddPersonMembershipActionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AddPersonMembershipAction
     */
    isPending: boolean;
    /**
     * 
     * @type {UserRef}
     * @memberof AddPersonMembershipAction
     */
    createdBy: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof AddPersonMembershipAction
     */
    abortedBy?: UserRef;
    /**
     * 
     * @type {PersonRef}
     * @memberof AddPersonMembershipAction
     */
    personRef: PersonRef;
    /**
     * 
     * @type {string}
     * @memberof AddPersonMembershipAction
     */
    state: AddPersonMembershipActionStateEnum;
    /**
     * 
     * @type {string}
     * @memberof AddPersonMembershipAction
     */
    deviceId?: string;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof AddPersonMembershipAction
     */
    approvalRequest: ApprovalRequest;
    /**
     * 
     * @type {ActionSigningRequest}
     * @memberof AddPersonMembershipAction
     */
    signingRequest?: ActionSigningRequest;
    /**
     * 
     * @type {Array<UserGroupRef>}
     * @memberof AddPersonMembershipAction
     */
    pendingAdditionToGroups?: Array<UserGroupRef>;
}


/**
 * @export
 */
export const AddPersonMembershipActionTypeEnum = {
    addPersonMembership: 'add_person_membership'
} as const;
export type AddPersonMembershipActionTypeEnum = typeof AddPersonMembershipActionTypeEnum[keyof typeof AddPersonMembershipActionTypeEnum];

/**
 * @export
 */
export const AddPersonMembershipActionStateEnum = {
    created: 'created',
    approved: 'approved',
    completed: 'completed',
    aborted: 'aborted'
} as const;
export type AddPersonMembershipActionStateEnum = typeof AddPersonMembershipActionStateEnum[keyof typeof AddPersonMembershipActionStateEnum];


/**
 * Check if a given object implements the AddPersonMembershipAction interface.
 */
export function instanceOfAddPersonMembershipAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "isPending" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "personRef" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "approvalRequest" in value;

    return isInstance;
}

export function AddPersonMembershipActionFromJSON(json: any): AddPersonMembershipAction {
    return AddPersonMembershipActionFromJSONTyped(json, false);
}

export function AddPersonMembershipActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddPersonMembershipAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'type': json['type'],
        'isPending': json['is_pending'],
        'createdBy': UserRefFromJSON(json['created_by']),
        'abortedBy': !exists(json, 'aborted_by') ? undefined : UserRefFromJSON(json['aborted_by']),
        'personRef': PersonRefFromJSON(json['person_ref']),
        'state': json['state'],
        'deviceId': !exists(json, 'device_id') ? undefined : json['device_id'],
        'approvalRequest': ApprovalRequestFromJSON(json['approval_request']),
        'signingRequest': !exists(json, 'signing_request') ? undefined : ActionSigningRequestFromJSON(json['signing_request']),
        'pendingAdditionToGroups': !exists(json, 'pending_addition_to_groups') ? undefined : ((json['pending_addition_to_groups'] as Array<any>).map(UserGroupRefFromJSON)),
    };
}

export function AddPersonMembershipActionToJSON(value?: AddPersonMembershipAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'type': value.type,
        'is_pending': value.isPending,
        'created_by': UserRefToJSON(value.createdBy),
        'aborted_by': UserRefToJSON(value.abortedBy),
        'person_ref': PersonRefToJSON(value.personRef),
        'state': value.state,
        'device_id': value.deviceId,
        'approval_request': ApprovalRequestToJSON(value.approvalRequest),
        'signing_request': ActionSigningRequestToJSON(value.signingRequest),
        'pending_addition_to_groups': value.pendingAdditionToGroups === undefined ? undefined : ((value.pendingAdditionToGroups as Array<any>).map(UserGroupRefToJSON)),
    };
}

