/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface UserWithOrganization
 */
export interface UserWithOrganization {
    /**
     * 
     * @type {User}
     * @memberof UserWithOrganization
     */
    user: User;
    /**
     * 
     * @type {string}
     * @memberof UserWithOrganization
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithOrganization
     */
    organizationName: string;
}

/**
 * Check if a given object implements the UserWithOrganization interface.
 */
export function instanceOfUserWithOrganization(value: object): value is UserWithOrganization {
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('organizationName' in value) || value['organizationName'] === undefined) return false;
    return true;
}

export function UserWithOrganizationFromJSON(json: any): UserWithOrganization {
    return UserWithOrganizationFromJSONTyped(json, false);
}

export function UserWithOrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithOrganization {
    if (json == null) {
        return json;
    }
    return {
        
        'user': UserFromJSON(json['user']),
        'organizationId': json['organization_id'],
        'organizationName': json['organization_name'],
    };
}

export function UserWithOrganizationToJSON(json: any): UserWithOrganization {
    return UserWithOrganizationToJSONTyped(json, false);
}

export function UserWithOrganizationToJSONTyped(value?: UserWithOrganization | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': UserToJSON(value['user']),
        'organization_id': value['organizationId'],
        'organization_name': value['organizationName'],
    };
}

