/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IssueEndUserAuthTokenResponse
 */
export interface IssueEndUserAuthTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof IssueEndUserAuthTokenResponse
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof IssueEndUserAuthTokenResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof IssueEndUserAuthTokenResponse
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof IssueEndUserAuthTokenResponse
     */
    userId: string;
    /**
     * 
     * @type {Date}
     * @memberof IssueEndUserAuthTokenResponse
     */
    expiredAt: Date;
    /**
     * 
     * @type {string}
     * @memberof IssueEndUserAuthTokenResponse
     */
    userType: IssueEndUserAuthTokenResponseUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IssueEndUserAuthTokenResponse
     */
    accessToken: string;
}


/**
 * @export
 */
export const IssueEndUserAuthTokenResponseUserTypeEnum = {
    endUser: 'end_user'
} as const;
export type IssueEndUserAuthTokenResponseUserTypeEnum = typeof IssueEndUserAuthTokenResponseUserTypeEnum[keyof typeof IssueEndUserAuthTokenResponseUserTypeEnum];


/**
 * Check if a given object implements the IssueEndUserAuthTokenResponse interface.
 */
export function instanceOfIssueEndUserAuthTokenResponse(value: object): value is IssueEndUserAuthTokenResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('expiredAt' in value) || value['expiredAt'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    return true;
}

export function IssueEndUserAuthTokenResponseFromJSON(json: any): IssueEndUserAuthTokenResponse {
    return IssueEndUserAuthTokenResponseFromJSONTyped(json, false);
}

export function IssueEndUserAuthTokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueEndUserAuthTokenResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'userId': json['user_id'],
        'expiredAt': (new Date(json['expired_at'])),
        'userType': json['user_type'],
        'accessToken': json['access_token'],
    };
}

export function IssueEndUserAuthTokenResponseToJSON(json: any): IssueEndUserAuthTokenResponse {
    return IssueEndUserAuthTokenResponseToJSONTyped(json, false);
}

export function IssueEndUserAuthTokenResponseToJSONTyped(value?: IssueEndUserAuthTokenResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'user_id': value['userId'],
        'expired_at': ((value['expiredAt']).toISOString()),
        'user_type': value['userType'],
        'access_token': value['accessToken'],
    };
}

