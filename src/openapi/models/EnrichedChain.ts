/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EnrichedAptosChain } from './EnrichedAptosChain';
import {
    EnrichedAptosChainFromJSONTyped,
} from './EnrichedAptosChain';
import type { EnrichedCosmosChain } from './EnrichedCosmosChain';
import {
    EnrichedCosmosChainFromJSONTyped,
} from './EnrichedCosmosChain';
import type { EnrichedEvmChain } from './EnrichedEvmChain';
import {
    EnrichedEvmChainFromJSONTyped,
} from './EnrichedEvmChain';
import type { EnrichedExchangeChain } from './EnrichedExchangeChain';
import {
    EnrichedExchangeChainFromJSONTyped,
} from './EnrichedExchangeChain';
import type { EnrichedSolanaChain } from './EnrichedSolanaChain';
import {
    EnrichedSolanaChainFromJSONTyped,
} from './EnrichedSolanaChain';
import type { EnrichedStacksChain } from './EnrichedStacksChain';
import {
    EnrichedStacksChainFromJSONTyped,
} from './EnrichedStacksChain';
import type { EnrichedStarknetChain } from './EnrichedStarknetChain';
import {
    EnrichedStarknetChainFromJSONTyped,
} from './EnrichedStarknetChain';
import type { EnrichedSuiChain } from './EnrichedSuiChain';
import {
    EnrichedSuiChainFromJSONTyped,
} from './EnrichedSuiChain';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSONTyped,
} from './EnrichedTonChain';
import type { EnrichedTronChain } from './EnrichedTronChain';
import {
    EnrichedTronChainFromJSONTyped,
} from './EnrichedTronChain';
import type { EnrichedUtxoChain } from './EnrichedUtxoChain';
import {
    EnrichedUtxoChainFromJSONTyped,
} from './EnrichedUtxoChain';

/**
 * 
 * @export
 * @type EnrichedChain
 */
export type EnrichedChain = { chainType: 'aptos' } & EnrichedAptosChain | { chainType: 'cosmos' } & EnrichedCosmosChain | { chainType: 'evm' } & EnrichedEvmChain | { chainType: 'exchange' } & EnrichedExchangeChain | { chainType: 'solana' } & EnrichedSolanaChain | { chainType: 'stacks' } & EnrichedStacksChain | { chainType: 'starknet' } & EnrichedStarknetChain | { chainType: 'sui' } & EnrichedSuiChain | { chainType: 'ton' } & EnrichedTonChain | { chainType: 'tron' } & EnrichedTronChain | { chainType: 'utxo' } & EnrichedUtxoChain;

export function EnrichedChainFromJSON(json: any): EnrichedChain {
    return EnrichedChainFromJSONTyped(json, false);
}

function EnrichedChainFromJSONTyped(json: any, _ignoreDiscriminator: boolean): EnrichedChain {
    if (json == null) {
        return json;
    }
    switch (json['chain_type']) {
        case 'aptos':
            return Object.assign({}, EnrichedAptosChainFromJSONTyped(json, true), { chainType: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, EnrichedCosmosChainFromJSONTyped(json, true), { chainType: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, EnrichedEvmChainFromJSONTyped(json, true), { chainType: 'evm' } as const);
        case 'exchange':
            return Object.assign({}, EnrichedExchangeChainFromJSONTyped(json, true), { chainType: 'exchange' } as const);
        case 'solana':
            return Object.assign({}, EnrichedSolanaChainFromJSONTyped(json, true), { chainType: 'solana' } as const);
        case 'stacks':
            return Object.assign({}, EnrichedStacksChainFromJSONTyped(json, true), { chainType: 'stacks' } as const);
        case 'starknet':
            return Object.assign({}, EnrichedStarknetChainFromJSONTyped(json, true), { chainType: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, EnrichedSuiChainFromJSONTyped(json, true), { chainType: 'sui' } as const);
        case 'ton':
            return Object.assign({}, EnrichedTonChainFromJSONTyped(json, true), { chainType: 'ton' } as const);
        case 'tron':
            return Object.assign({}, EnrichedTronChainFromJSONTyped(json, true), { chainType: 'tron' } as const);
        case 'utxo':
            return Object.assign({}, EnrichedUtxoChainFromJSONTyped(json, true), { chainType: 'utxo' } as const);
        default:
            throw new Error(`No variant of EnrichedChain exists with 'chainType=${json['chainType']}'`);
    }
}

