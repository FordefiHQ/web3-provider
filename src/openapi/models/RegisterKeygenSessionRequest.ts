/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
} from './KeyType';
import type { MpcMessage } from './MpcMessage';
import {
    MpcMessageFromJSON,
    MpcMessageFromJSONTyped,
    MpcMessageToJSON,
} from './MpcMessage';

/**
 * 
 * @export
 * @interface RegisterKeygenSessionRequest
 */
export interface RegisterKeygenSessionRequest {
    /**
     * 
     * @type {KeyType}
     * @memberof RegisterKeygenSessionRequest
     */
    keyType: KeyType;
    /**
     * 
     * @type {string}
     * @memberof RegisterKeygenSessionRequest
     */
    protocolVersion: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterKeygenSessionRequest
     */
    keysetId?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterKeygenSessionRequest
     */
    sessionSeed?: string;
    /**
     * 
     * @type {MpcMessage}
     * @memberof RegisterKeygenSessionRequest
     */
    firstMpcProtocolMessage?: MpcMessage;
}

/**
 * Check if a given object implements the RegisterKeygenSessionRequest interface.
 */
export function instanceOfRegisterKeygenSessionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "keyType" in value;
    isInstance = isInstance && "protocolVersion" in value;

    return isInstance;
}

export function RegisterKeygenSessionRequestFromJSON(json: any): RegisterKeygenSessionRequest {
    return RegisterKeygenSessionRequestFromJSONTyped(json, false);
}

export function RegisterKeygenSessionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterKeygenSessionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyType': KeyTypeFromJSON(json['key_type']),
        'protocolVersion': json['protocol_version'],
        'keysetId': !exists(json, 'keyset_id') ? undefined : json['keyset_id'],
        'sessionSeed': !exists(json, 'session_seed') ? undefined : json['session_seed'],
        'firstMpcProtocolMessage': !exists(json, 'first_mpc_protocol_message') ? undefined : MpcMessageFromJSON(json['first_mpc_protocol_message']),
    };
}

export function RegisterKeygenSessionRequestToJSON(value?: RegisterKeygenSessionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key_type': KeyTypeToJSON(value.keyType),
        'protocol_version': value.protocolVersion,
        'keyset_id': value.keysetId,
        'session_seed': value.sessionSeed,
        'first_mpc_protocol_message': MpcMessageToJSON(value.firstMpcProtocolMessage),
    };
}

