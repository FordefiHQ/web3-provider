/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AmountLimitCondition } from './AmountLimitCondition';
import {
    AmountLimitConditionFromJSON,
    AmountLimitConditionFromJSONTyped,
    AmountLimitConditionToJSON,
} from './AmountLimitCondition';
import type { AssetIdentifierRequest } from './AssetIdentifierRequest';
import {
    AssetIdentifierRequestFromJSON,
    AssetIdentifierRequestFromJSONTyped,
    AssetIdentifierRequestToJSON,
} from './AssetIdentifierRequest';
import type { InitiatorsConditionRequest } from './InitiatorsConditionRequest';
import {
    InitiatorsConditionRequestFromJSON,
    InitiatorsConditionRequestFromJSONTyped,
    InitiatorsConditionRequestToJSON,
} from './InitiatorsConditionRequest';
import type { RecipientsConditionRequest } from './RecipientsConditionRequest';
import {
    RecipientsConditionRequestFromJSON,
    RecipientsConditionRequestFromJSONTyped,
    RecipientsConditionRequestToJSON,
} from './RecipientsConditionRequest';
import type { TransactionTypeCondition } from './TransactionTypeCondition';
import {
    TransactionTypeConditionFromJSON,
    TransactionTypeConditionFromJSONTyped,
    TransactionTypeConditionToJSON,
} from './TransactionTypeCondition';

/**
 * 
 * @export
 * @interface TransactionRuleConditionsRequest
 */
export interface TransactionRuleConditionsRequest {
    /**
     * 
     * @type {InitiatorsConditionRequest}
     * @memberof TransactionRuleConditionsRequest
     */
    initiators?: InitiatorsConditionRequest;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionRuleConditionsRequest
     */
    originVaultIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionRuleConditionsRequest
     */
    originVaultGroupIds?: Array<string>;
    /**
     * 
     * @type {Array<TransactionTypeCondition>}
     * @memberof TransactionRuleConditionsRequest
     */
    transactionTypes?: Array<TransactionTypeCondition>;
    /**
     * 
     * @type {RecipientsConditionRequest}
     * @memberof TransactionRuleConditionsRequest
     */
    recipients?: RecipientsConditionRequest;
    /**
     * 
     * @type {Array<AssetIdentifierRequest>}
     * @memberof TransactionRuleConditionsRequest
     */
    assets?: Array<AssetIdentifierRequest>;
    /**
     * 
     * @type {AmountLimitCondition}
     * @memberof TransactionRuleConditionsRequest
     */
    amountLimit?: AmountLimitCondition;
}

/**
 * Check if a given object implements the TransactionRuleConditionsRequest interface.
 */
export function instanceOfTransactionRuleConditionsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionRuleConditionsRequestFromJSON(json: any): TransactionRuleConditionsRequest {
    return TransactionRuleConditionsRequestFromJSONTyped(json, false);
}

export function TransactionRuleConditionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRuleConditionsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'initiators': !exists(json, 'initiators') ? undefined : InitiatorsConditionRequestFromJSON(json['initiators']),
        'originVaultIds': !exists(json, 'origin_vault_ids') ? undefined : json['origin_vault_ids'],
        'originVaultGroupIds': !exists(json, 'origin_vault_group_ids') ? undefined : json['origin_vault_group_ids'],
        'transactionTypes': !exists(json, 'transaction_types') ? undefined : ((json['transaction_types'] as Array<any>).map(TransactionTypeConditionFromJSON)),
        'recipients': !exists(json, 'recipients') ? undefined : RecipientsConditionRequestFromJSON(json['recipients']),
        'assets': !exists(json, 'assets') ? undefined : ((json['assets'] as Array<any>).map(AssetIdentifierRequestFromJSON)),
        'amountLimit': !exists(json, 'amount_limit') ? undefined : AmountLimitConditionFromJSON(json['amount_limit']),
    };
}

export function TransactionRuleConditionsRequestToJSON(value?: TransactionRuleConditionsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'initiators': InitiatorsConditionRequestToJSON(value.initiators),
        'origin_vault_ids': value.originVaultIds,
        'origin_vault_group_ids': value.originVaultGroupIds,
        'transaction_types': value.transactionTypes === undefined ? undefined : ((value.transactionTypes as Array<any>).map(TransactionTypeConditionToJSON)),
        'recipients': RecipientsConditionRequestToJSON(value.recipients),
        'assets': value.assets === undefined ? undefined : ((value.assets as Array<any>).map(AssetIdentifierRequestToJSON)),
        'amount_limit': AmountLimitConditionToJSON(value.amountLimit),
    };
}

