/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AmountLimitCondition } from './AmountLimitCondition';
import {
    AmountLimitConditionFromJSON,
    AmountLimitConditionFromJSONTyped,
    AmountLimitConditionToJSON,
    AmountLimitConditionToJSONTyped,
} from './AmountLimitCondition';
import type { OriginsConditionRequest } from './OriginsConditionRequest';
import {
    OriginsConditionRequestFromJSON,
    OriginsConditionRequestFromJSONTyped,
    OriginsConditionRequestToJSON,
    OriginsConditionRequestToJSONTyped,
} from './OriginsConditionRequest';
import type { TransactionTypeCondition } from './TransactionTypeCondition';
import {
    TransactionTypeConditionFromJSON,
    TransactionTypeConditionFromJSONTyped,
    TransactionTypeConditionToJSON,
    TransactionTypeConditionToJSONTyped,
} from './TransactionTypeCondition';
import type { InitiatorsConditionRequest } from './InitiatorsConditionRequest';
import {
    InitiatorsConditionRequestFromJSON,
    InitiatorsConditionRequestFromJSONTyped,
    InitiatorsConditionRequestToJSON,
    InitiatorsConditionRequestToJSONTyped,
} from './InitiatorsConditionRequest';
import type { AssetIdentifierRequest } from './AssetIdentifierRequest';
import {
    AssetIdentifierRequestFromJSON,
    AssetIdentifierRequestFromJSONTyped,
    AssetIdentifierRequestToJSON,
    AssetIdentifierRequestToJSONTyped,
} from './AssetIdentifierRequest';
import type { PeriodicAmountCondition } from './PeriodicAmountCondition';
import {
    PeriodicAmountConditionFromJSON,
    PeriodicAmountConditionFromJSONTyped,
    PeriodicAmountConditionToJSON,
    PeriodicAmountConditionToJSONTyped,
} from './PeriodicAmountCondition';
import type { CosmosRuleConditions } from './CosmosRuleConditions';
import {
    CosmosRuleConditionsFromJSON,
    CosmosRuleConditionsFromJSONTyped,
    CosmosRuleConditionsToJSON,
    CosmosRuleConditionsToJSONTyped,
} from './CosmosRuleConditions';
import type { Eip712MessageConditions } from './Eip712MessageConditions';
import {
    Eip712MessageConditionsFromJSON,
    Eip712MessageConditionsFromJSONTyped,
    Eip712MessageConditionsToJSON,
    Eip712MessageConditionsToJSONTyped,
} from './Eip712MessageConditions';
import type { RecipientsConditionRequest } from './RecipientsConditionRequest';
import {
    RecipientsConditionRequestFromJSON,
    RecipientsConditionRequestFromJSONTyped,
    RecipientsConditionRequestToJSON,
    RecipientsConditionRequestToJSONTyped,
} from './RecipientsConditionRequest';

/**
 * 
 * @export
 * @interface TransactionRuleConditionsRequest
 */
export interface TransactionRuleConditionsRequest {
    /**
     * 
     * @type {InitiatorsConditionRequest}
     * @memberof TransactionRuleConditionsRequest
     */
    initiators?: InitiatorsConditionRequest;
    /**
     * 
     * @type {OriginsConditionRequest}
     * @memberof TransactionRuleConditionsRequest
     */
    origins?: OriginsConditionRequest;
    /**
     * 
     * @type {Array<TransactionTypeCondition>}
     * @memberof TransactionRuleConditionsRequest
     */
    transactionTypes?: Array<TransactionTypeCondition>;
    /**
     * 
     * @type {RecipientsConditionRequest}
     * @memberof TransactionRuleConditionsRequest
     */
    recipients?: RecipientsConditionRequest;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionRuleConditionsRequest
     */
    abiMethods?: Array<string>;
    /**
     * 
     * @type {Array<AssetIdentifierRequest>}
     * @memberof TransactionRuleConditionsRequest
     */
    assets?: Array<AssetIdentifierRequest>;
    /**
     * 
     * @type {AmountLimitCondition}
     * @memberof TransactionRuleConditionsRequest
     */
    amountLimit?: AmountLimitCondition;
    /**
     * 
     * @type {CosmosRuleConditions}
     * @memberof TransactionRuleConditionsRequest
     */
    cosmosConditions?: CosmosRuleConditions;
    /**
     * 
     * @type {PeriodicAmountCondition}
     * @memberof TransactionRuleConditionsRequest
     */
    periodicAmount?: PeriodicAmountCondition;
    /**
     * 
     * @type {Eip712MessageConditions}
     * @memberof TransactionRuleConditionsRequest
     */
    eip712Message?: Eip712MessageConditions;
}

/**
 * Check if a given object implements the TransactionRuleConditionsRequest interface.
 */
export function instanceOfTransactionRuleConditionsRequest(value: object): value is TransactionRuleConditionsRequest {
    return true;
}

export function TransactionRuleConditionsRequestFromJSON(json: any): TransactionRuleConditionsRequest {
    return TransactionRuleConditionsRequestFromJSONTyped(json, false);
}

export function TransactionRuleConditionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRuleConditionsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'initiators': json['initiators'] == null ? undefined : InitiatorsConditionRequestFromJSON(json['initiators']),
        'origins': json['origins'] == null ? undefined : OriginsConditionRequestFromJSON(json['origins']),
        'transactionTypes': json['transaction_types'] == null ? undefined : ((json['transaction_types'] as Array<any>).map(TransactionTypeConditionFromJSON)),
        'recipients': json['recipients'] == null ? undefined : RecipientsConditionRequestFromJSON(json['recipients']),
        'abiMethods': json['abi_methods'] == null ? undefined : json['abi_methods'],
        'assets': json['assets'] == null ? undefined : ((json['assets'] as Array<any>).map(AssetIdentifierRequestFromJSON)),
        'amountLimit': json['amount_limit'] == null ? undefined : AmountLimitConditionFromJSON(json['amount_limit']),
        'cosmosConditions': json['cosmos_conditions'] == null ? undefined : CosmosRuleConditionsFromJSON(json['cosmos_conditions']),
        'periodicAmount': json['periodic_amount'] == null ? undefined : PeriodicAmountConditionFromJSON(json['periodic_amount']),
        'eip712Message': json['eip712_message'] == null ? undefined : Eip712MessageConditionsFromJSON(json['eip712_message']),
    };
}

export function TransactionRuleConditionsRequestToJSON(json: any): TransactionRuleConditionsRequest {
    return TransactionRuleConditionsRequestToJSONTyped(json, false);
}

export function TransactionRuleConditionsRequestToJSONTyped(value?: TransactionRuleConditionsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'initiators': InitiatorsConditionRequestToJSON(value['initiators']),
        'origins': OriginsConditionRequestToJSON(value['origins']),
        'transaction_types': value['transactionTypes'] == null ? undefined : ((value['transactionTypes'] as Array<any>).map(TransactionTypeConditionToJSON)),
        'recipients': RecipientsConditionRequestToJSON(value['recipients']),
        'abi_methods': value['abiMethods'],
        'assets': value['assets'] == null ? undefined : ((value['assets'] as Array<any>).map(AssetIdentifierRequestToJSON)),
        'amount_limit': AmountLimitConditionToJSON(value['amountLimit']),
        'cosmos_conditions': CosmosRuleConditionsToJSON(value['cosmosConditions']),
        'periodic_amount': PeriodicAmountConditionToJSON(value['periodicAmount']),
        'eip712_message': Eip712MessageConditionsToJSON(value['eip712Message']),
    };
}

