/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetIdentifier } from './AssetIdentifier';
import {
    AssetIdentifierFromJSON,
    AssetIdentifierFromJSONTyped,
    AssetIdentifierToJSON,
} from './AssetIdentifier';

/**
 * 
 * @export
 * @interface AssetInfo
 */
export interface AssetInfo {
    /**
     * 
     * @type {string}
     * @memberof AssetInfo
     */
    id: string;
    /**
     * 
     * @type {AssetIdentifier}
     * @memberof AssetInfo
     */
    assetIdentifier: AssetIdentifier;
    /**
     * 
     * @type {string}
     * @memberof AssetInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AssetInfo
     */
    symbol: string;
    /**
     * 
     * @type {number}
     * @memberof AssetInfo
     */
    decimals: number;
    /**
     * 
     * @type {boolean}
     * @memberof AssetInfo
     */
    verified: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssetInfo
     */
    metadataUri?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssetInfo
     */
    isSpam: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssetInfo
     */
    logoUrl?: string;
}

/**
 * Check if a given object implements the AssetInfo interface.
 */
export function instanceOfAssetInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "assetIdentifier" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "verified" in value;
    isInstance = isInstance && "isSpam" in value;

    return isInstance;
}

export function AssetInfoFromJSON(json: any): AssetInfo {
    return AssetInfoFromJSONTyped(json, false);
}

export function AssetInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssetInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'assetIdentifier': AssetIdentifierFromJSON(json['asset_identifier']),
        'name': json['name'],
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'verified': json['verified'],
        'metadataUri': !exists(json, 'metadata_uri') ? undefined : json['metadata_uri'],
        'isSpam': json['is_spam'],
        'logoUrl': !exists(json, 'logo_url') ? undefined : json['logo_url'],
    };
}

export function AssetInfoToJSON(value?: AssetInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'asset_identifier': AssetIdentifierToJSON(value.assetIdentifier),
        'name': value.name,
        'symbol': value.symbol,
        'decimals': value.decimals,
        'verified': value.verified,
        'metadata_uri': value.metadataUri,
        'is_spam': value.isSpam,
        'logo_url': value.logoUrl,
    };
}

