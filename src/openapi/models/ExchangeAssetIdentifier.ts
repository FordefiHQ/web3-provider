/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedExchangeChain } from './EnrichedExchangeChain';
import {
    EnrichedExchangeChainFromJSON,
    EnrichedExchangeChainFromJSONTyped,
    EnrichedExchangeChainToJSON,
    EnrichedExchangeChainToJSONTyped,
} from './EnrichedExchangeChain';
import type { ExchangeType } from './ExchangeType';
import {
    ExchangeTypeFromJSON,
    ExchangeTypeFromJSONTyped,
    ExchangeTypeToJSON,
    ExchangeTypeToJSONTyped,
} from './ExchangeType';

/**
 * 
 * @export
 * @interface ExchangeAssetIdentifier
 */
export interface ExchangeAssetIdentifier {
    /**
     * 
     * @type {string}
     * @memberof ExchangeAssetIdentifier
     */
    type: ExchangeAssetIdentifierTypeEnum;
    /**
     * 
     * @type {ExchangeType}
     * @memberof ExchangeAssetIdentifier
     */
    exchangeType: ExchangeType;
    /**
     * 
     * @type {string}
     * @memberof ExchangeAssetIdentifier
     */
    assetSymbol: string;
    /**
     * 
     * @type {EnrichedExchangeChain}
     * @memberof ExchangeAssetIdentifier
     */
    chain: EnrichedExchangeChain;
}


/**
 * @export
 */
export const ExchangeAssetIdentifierTypeEnum = {
    exchange: 'exchange'
} as const;
export type ExchangeAssetIdentifierTypeEnum = typeof ExchangeAssetIdentifierTypeEnum[keyof typeof ExchangeAssetIdentifierTypeEnum];


/**
 * Check if a given object implements the ExchangeAssetIdentifier interface.
 */
export function instanceOfExchangeAssetIdentifier(value: object): value is ExchangeAssetIdentifier {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('exchangeType' in value) || value['exchangeType'] === undefined) return false;
    if (!('assetSymbol' in value) || value['assetSymbol'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    return true;
}

export function ExchangeAssetIdentifierFromJSON(json: any): ExchangeAssetIdentifier {
    return ExchangeAssetIdentifierFromJSONTyped(json, false);
}

export function ExchangeAssetIdentifierFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeAssetIdentifier {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'exchangeType': ExchangeTypeFromJSON(json['exchange_type']),
        'assetSymbol': json['asset_symbol'],
        'chain': EnrichedExchangeChainFromJSON(json['chain']),
    };
}

export function ExchangeAssetIdentifierToJSON(json: any): ExchangeAssetIdentifier {
    return ExchangeAssetIdentifierToJSONTyped(json, false);
}

export function ExchangeAssetIdentifierToJSONTyped(value?: ExchangeAssetIdentifier | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'exchange_type': ExchangeTypeToJSON(value['exchangeType']),
        'asset_symbol': value['assetSymbol'],
        'chain': EnrichedExchangeChainToJSON(value['chain']),
    };
}

