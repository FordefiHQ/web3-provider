/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
    UserRefToJSONTyped,
} from './UserRef';
import type { UserGroupRef } from './UserGroupRef';
import {
    UserGroupRefFromJSON,
    UserGroupRefFromJSONTyped,
    UserGroupRefToJSON,
    UserGroupRefToJSONTyped,
} from './UserGroupRef';

/**
 * 
 * @export
 * @interface VaultGroupAccessPermissionsPermitted
 */
export interface VaultGroupAccessPermissionsPermitted {
    /**
     * 
     * @type {string}
     * @memberof VaultGroupAccessPermissionsPermitted
     */
    accessType: VaultGroupAccessPermissionsPermittedAccessTypeEnum;
    /**
     * 
     * @type {Array<UserGroupRef>}
     * @memberof VaultGroupAccessPermissionsPermitted
     */
    userGroups: Array<UserGroupRef>;
    /**
     * 
     * @type {Array<UserRef>}
     * @memberof VaultGroupAccessPermissionsPermitted
     */
    users: Array<UserRef>;
}


/**
 * @export
 */
export const VaultGroupAccessPermissionsPermittedAccessTypeEnum = {
    permitted: 'permitted'
} as const;
export type VaultGroupAccessPermissionsPermittedAccessTypeEnum = typeof VaultGroupAccessPermissionsPermittedAccessTypeEnum[keyof typeof VaultGroupAccessPermissionsPermittedAccessTypeEnum];


/**
 * Check if a given object implements the VaultGroupAccessPermissionsPermitted interface.
 */
export function instanceOfVaultGroupAccessPermissionsPermitted(value: object): value is VaultGroupAccessPermissionsPermitted {
    if (!('accessType' in value) || value['accessType'] === undefined) return false;
    if (!('userGroups' in value) || value['userGroups'] === undefined) return false;
    if (!('users' in value) || value['users'] === undefined) return false;
    return true;
}

export function VaultGroupAccessPermissionsPermittedFromJSON(json: any): VaultGroupAccessPermissionsPermitted {
    return VaultGroupAccessPermissionsPermittedFromJSONTyped(json, false);
}

export function VaultGroupAccessPermissionsPermittedFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultGroupAccessPermissionsPermitted {
    if (json == null) {
        return json;
    }
    return {
        
        'accessType': json['access_type'],
        'userGroups': ((json['user_groups'] as Array<any>).map(UserGroupRefFromJSON)),
        'users': ((json['users'] as Array<any>).map(UserRefFromJSON)),
    };
}

export function VaultGroupAccessPermissionsPermittedToJSON(json: any): VaultGroupAccessPermissionsPermitted {
    return VaultGroupAccessPermissionsPermittedToJSONTyped(json, false);
}

export function VaultGroupAccessPermissionsPermittedToJSONTyped(value?: VaultGroupAccessPermissionsPermitted | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_type': value['accessType'],
        'user_groups': ((value['userGroups'] as Array<any>).map(UserGroupRefToJSON)),
        'users': ((value['users'] as Array<any>).map(UserRefToJSON)),
    };
}

