/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { ExchangeTransactionType } from './ExchangeTransactionType';
import {
    ExchangeTransactionTypeFromJSON,
    ExchangeTransactionTypeFromJSONTyped,
    ExchangeTransactionTypeToJSON,
    ExchangeTransactionTypeToJSONTyped,
} from './ExchangeTransactionType';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
    PushableTransactionStateFromJSONTyped,
    PushableTransactionStateToJSON,
    PushableTransactionStateToJSONTyped,
} from './PushableTransactionState';

/**
 * 
 * @export
 * @interface WebhookExchangeTransactionStatusChangeEvent
 */
export interface WebhookExchangeTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    state: PushableTransactionState;
    /**
     * 
     * @type {string}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    type: WebhookExchangeTransactionStatusChangeEventTypeEnum;
    /**
     * 
     * @type {ExchangeTransactionType}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    exchangeTransactionType: ExchangeTransactionType;
    /**
     * 
     * @type {string}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookExchangeTransactionStatusChangeEvent
     */
    exchangeTransactionId?: string;
}


/**
 * @export
 */
export const WebhookExchangeTransactionStatusChangeEventTypeEnum = {
    exchangeTransaction: 'exchange_transaction'
} as const;
export type WebhookExchangeTransactionStatusChangeEventTypeEnum = typeof WebhookExchangeTransactionStatusChangeEventTypeEnum[keyof typeof WebhookExchangeTransactionStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookExchangeTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookExchangeTransactionStatusChangeEvent(value: object): value is WebhookExchangeTransactionStatusChangeEvent {
    if (!('transactionId' in value) || value['transactionId'] === undefined) return false;
    if (!('isManagedTransaction' in value) || value['isManagedTransaction'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('spamState' in value) || value['spamState'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('exchangeTransactionType' in value) || value['exchangeTransactionType'] === undefined) return false;
    return true;
}

export function WebhookExchangeTransactionStatusChangeEventFromJSON(json: any): WebhookExchangeTransactionStatusChangeEvent {
    return WebhookExchangeTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookExchangeTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookExchangeTransactionStatusChangeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'state': PushableTransactionStateFromJSON(json['state']),
        'type': json['type'],
        'exchangeTransactionType': ExchangeTransactionTypeFromJSON(json['exchange_transaction_type']),
        'hash': json['hash'] == null ? undefined : json['hash'],
        'exchangeTransactionId': json['exchange_transaction_id'] == null ? undefined : json['exchange_transaction_id'],
    };
}

export function WebhookExchangeTransactionStatusChangeEventToJSON(json: any): WebhookExchangeTransactionStatusChangeEvent {
    return WebhookExchangeTransactionStatusChangeEventToJSONTyped(json, false);
}

export function WebhookExchangeTransactionStatusChangeEventToJSONTyped(value?: WebhookExchangeTransactionStatusChangeEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transaction_id': value['transactionId'],
        'is_managed_transaction': value['isManagedTransaction'],
        'direction': TransactionDirectionToJSON(value['direction']),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'state': PushableTransactionStateToJSON(value['state']),
        'type': value['type'],
        'exchange_transaction_type': ExchangeTransactionTypeToJSON(value['exchangeTransactionType']),
        'hash': value['hash'],
        'exchange_transaction_id': value['exchangeTransactionId'],
    };
}

