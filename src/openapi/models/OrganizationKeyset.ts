/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EncryptedDeviceSharesBackup } from './EncryptedDeviceSharesBackup';
import {
    EncryptedDeviceSharesBackupFromJSON,
    EncryptedDeviceSharesBackupFromJSONTyped,
    EncryptedDeviceSharesBackupToJSON,
} from './EncryptedDeviceSharesBackup';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
} from './KeyType';
import type { KeysetKey } from './KeysetKey';
import {
    KeysetKeyFromJSON,
    KeysetKeyFromJSONTyped,
    KeysetKeyToJSON,
} from './KeysetKey';

/**
 * 
 * @export
 * @interface OrganizationKeyset
 */
export interface OrganizationKeyset {
    /**
     * 
     * @type {string}
     * @memberof OrganizationKeyset
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationKeyset
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationKeyset
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof OrganizationKeyset
     */
    name: string;
    /**
     * 
     * @type {Array<KeyType>}
     * @memberof OrganizationKeyset
     */
    desiredKeyTypes?: Array<KeyType>;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    ecdsa?: KeysetKey;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    eddsa?: KeysetKey;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    ecdsaStark?: KeysetKey;
    /**
     * 
     * @type {Array<EncryptedDeviceSharesBackup>}
     * @memberof OrganizationKeyset
     */
    encryptedDeviceSharesBackups?: Array<EncryptedDeviceSharesBackup>;
    /**
     * 
     * @type {string}
     * @memberof OrganizationKeyset
     */
    scope: OrganizationKeysetScopeEnum;
}


/**
 * @export
 */
export const OrganizationKeysetScopeEnum = {
    organization: 'organization'
} as const;
export type OrganizationKeysetScopeEnum = typeof OrganizationKeysetScopeEnum[keyof typeof OrganizationKeysetScopeEnum];


/**
 * Check if a given object implements the OrganizationKeyset interface.
 */
export function instanceOfOrganizationKeyset(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "scope" in value;

    return isInstance;
}

export function OrganizationKeysetFromJSON(json: any): OrganizationKeyset {
    return OrganizationKeysetFromJSONTyped(json, false);
}

export function OrganizationKeysetFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationKeyset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'name': json['name'],
        'desiredKeyTypes': !exists(json, 'desired_key_types') ? undefined : ((json['desired_key_types'] as Array<any>).map(KeyTypeFromJSON)),
        'ecdsa': !exists(json, 'ecdsa') ? undefined : KeysetKeyFromJSON(json['ecdsa']),
        'eddsa': !exists(json, 'eddsa') ? undefined : KeysetKeyFromJSON(json['eddsa']),
        'ecdsaStark': !exists(json, 'ecdsa_stark') ? undefined : KeysetKeyFromJSON(json['ecdsa_stark']),
        'encryptedDeviceSharesBackups': !exists(json, 'encrypted_device_shares_backups') ? undefined : ((json['encrypted_device_shares_backups'] as Array<any>).map(EncryptedDeviceSharesBackupFromJSON)),
        'scope': json['scope'],
    };
}

export function OrganizationKeysetToJSON(value?: OrganizationKeyset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'name': value.name,
        'desired_key_types': value.desiredKeyTypes === undefined ? undefined : ((value.desiredKeyTypes as Array<any>).map(KeyTypeToJSON)),
        'ecdsa': KeysetKeyToJSON(value.ecdsa),
        'eddsa': KeysetKeyToJSON(value.eddsa),
        'ecdsa_stark': KeysetKeyToJSON(value.ecdsaStark),
        'encrypted_device_shares_backups': value.encryptedDeviceSharesBackups === undefined ? undefined : ((value.encryptedDeviceSharesBackups as Array<any>).map(EncryptedDeviceSharesBackupToJSON)),
        'scope': value.scope,
    };
}

