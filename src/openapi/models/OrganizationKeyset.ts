/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EncryptedDeviceSharesBackup } from './EncryptedDeviceSharesBackup';
import {
    EncryptedDeviceSharesBackupFromJSON,
    EncryptedDeviceSharesBackupFromJSONTyped,
    EncryptedDeviceSharesBackupToJSON,
    EncryptedDeviceSharesBackupToJSONTyped,
} from './EncryptedDeviceSharesBackup';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
    KeyTypeToJSONTyped,
} from './KeyType';
import type { KeysetKey } from './KeysetKey';
import {
    KeysetKeyFromJSON,
    KeysetKeyFromJSONTyped,
    KeysetKeyToJSON,
    KeysetKeyToJSONTyped,
} from './KeysetKey';

/**
 * 
 * @export
 * @interface OrganizationKeyset
 */
export interface OrganizationKeyset {
    /**
     * 
     * @type {string}
     * @memberof OrganizationKeyset
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationKeyset
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationKeyset
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof OrganizationKeyset
     */
    name: string;
    /**
     * 
     * @type {Array<KeyType>}
     * @memberof OrganizationKeyset
     */
    desiredKeyTypes?: Array<KeyType>;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    ecdsa?: KeysetKey;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    eddsa?: KeysetKey;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    ecdsaStark?: KeysetKey;
    /**
     * 
     * @type {KeysetKey}
     * @memberof OrganizationKeyset
     */
    schnorrSecp256k1?: KeysetKey;
    /**
     * 
     * @type {Array<EncryptedDeviceSharesBackup>}
     * @memberof OrganizationKeyset
     */
    encryptedDeviceSharesBackups?: Array<EncryptedDeviceSharesBackup>;
    /**
     * 
     * @type {string}
     * @memberof OrganizationKeyset
     */
    scope: OrganizationKeysetScopeEnum;
}


/**
 * @export
 */
export const OrganizationKeysetScopeEnum = {
    organization: 'organization'
} as const;
export type OrganizationKeysetScopeEnum = typeof OrganizationKeysetScopeEnum[keyof typeof OrganizationKeysetScopeEnum];


/**
 * Check if a given object implements the OrganizationKeyset interface.
 */
export function instanceOfOrganizationKeyset(value: object): value is OrganizationKeyset {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    return true;
}

export function OrganizationKeysetFromJSON(json: any): OrganizationKeyset {
    return OrganizationKeysetFromJSONTyped(json, false);
}

export function OrganizationKeysetFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationKeyset {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'name': json['name'],
        'desiredKeyTypes': json['desired_key_types'] == null ? undefined : ((json['desired_key_types'] as Array<any>).map(KeyTypeFromJSON)),
        'ecdsa': json['ecdsa'] == null ? undefined : KeysetKeyFromJSON(json['ecdsa']),
        'eddsa': json['eddsa'] == null ? undefined : KeysetKeyFromJSON(json['eddsa']),
        'ecdsaStark': json['ecdsa_stark'] == null ? undefined : KeysetKeyFromJSON(json['ecdsa_stark']),
        'schnorrSecp256k1': json['schnorr_secp256k1'] == null ? undefined : KeysetKeyFromJSON(json['schnorr_secp256k1']),
        'encryptedDeviceSharesBackups': json['encrypted_device_shares_backups'] == null ? undefined : ((json['encrypted_device_shares_backups'] as Array<any>).map(EncryptedDeviceSharesBackupFromJSON)),
        'scope': json['scope'],
    };
}

export function OrganizationKeysetToJSON(json: any): OrganizationKeyset {
    return OrganizationKeysetToJSONTyped(json, false);
}

export function OrganizationKeysetToJSONTyped(value?: OrganizationKeyset | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'name': value['name'],
        'desired_key_types': value['desiredKeyTypes'] == null ? undefined : ((value['desiredKeyTypes'] as Array<any>).map(KeyTypeToJSON)),
        'ecdsa': KeysetKeyToJSON(value['ecdsa']),
        'eddsa': KeysetKeyToJSON(value['eddsa']),
        'ecdsa_stark': KeysetKeyToJSON(value['ecdsaStark']),
        'schnorr_secp256k1': KeysetKeyToJSON(value['schnorrSecp256k1']),
        'encrypted_device_shares_backups': value['encryptedDeviceSharesBackups'] == null ? undefined : ((value['encryptedDeviceSharesBackups'] as Array<any>).map(EncryptedDeviceSharesBackupToJSON)),
        'scope': value['scope'],
    };
}

