/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TypedCosmosRawTransactionRequest } from './TypedCosmosRawTransactionRequest';
import {
    instanceOfTypedCosmosRawTransactionRequest,
    TypedCosmosRawTransactionRequestFromJSON,
    TypedCosmosRawTransactionRequestFromJSONTyped,
    TypedCosmosRawTransactionRequestToJSON,
} from './TypedCosmosRawTransactionRequest';
import type { TypedCosmosTransferRequest } from './TypedCosmosTransferRequest';
import {
    instanceOfTypedCosmosTransferRequest,
    TypedCosmosTransferRequestFromJSON,
    TypedCosmosTransferRequestFromJSONTyped,
    TypedCosmosTransferRequestToJSON,
} from './TypedCosmosTransferRequest';

/**
 * @type CreateCosmosTransactionRequestDetails
 * 
 * @export
 */
export type CreateCosmosTransactionRequestDetails = { type: 'cosmos_raw_transaction' } & TypedCosmosRawTransactionRequest | { type: 'cosmos_transfer' } & TypedCosmosTransferRequest;

export function CreateCosmosTransactionRequestDetailsFromJSON(json: any): CreateCosmosTransactionRequestDetails {
    return CreateCosmosTransactionRequestDetailsFromJSONTyped(json, false);
}

export function CreateCosmosTransactionRequestDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCosmosTransactionRequestDetails {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'cosmos_raw_transaction':
            return Object.assign({}, TypedCosmosRawTransactionRequestFromJSONTyped(json, true), { type: 'cosmos_raw_transaction' } as const);
        case 'cosmos_transfer':
            return Object.assign({}, TypedCosmosTransferRequestFromJSONTyped(json, true), { type: 'cosmos_transfer' } as const);
        default:
            throw new Error(`No variant of CreateCosmosTransactionRequestDetails exists with 'type=${json['type']}'`);
    }
}

export function CreateCosmosTransactionRequestDetailsToJSON(json: any): any {
    return CreateCosmosTransactionRequestDetailsToJSONTyped(json, false);
}

export function CreateCosmosTransactionRequestDetailsToJSONTyped(value?: CreateCosmosTransactionRequestDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'cosmos_raw_transaction':
            return Object.assign({}, TypedCosmosRawTransactionRequestToJSON(value), { type: 'cosmos_raw_transaction' } as const);
        case 'cosmos_transfer':
            return Object.assign({}, TypedCosmosTransferRequestToJSON(value), { type: 'cosmos_transfer' } as const);
        default:
            throw new Error(`No variant of CreateCosmosTransactionRequestDetails exists with 'type=${value['type']}'`);
    }

}

