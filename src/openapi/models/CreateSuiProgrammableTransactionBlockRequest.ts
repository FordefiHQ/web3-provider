/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SuiCommand } from './SuiCommand';
import {
    SuiCommandFromJSON,
    SuiCommandFromJSONTyped,
    SuiCommandToJSON,
    SuiCommandToJSONTyped,
} from './SuiCommand';
import type { SuiChainUniqueId } from './SuiChainUniqueId';
import {
    SuiChainUniqueIdFromJSON,
    SuiChainUniqueIdFromJSONTyped,
    SuiChainUniqueIdToJSON,
    SuiChainUniqueIdToJSONTyped,
} from './SuiChainUniqueId';
import type { SuiInput } from './SuiInput';
import {
    SuiInputFromJSON,
    SuiInputFromJSONTyped,
    SuiInputToJSON,
    SuiInputToJSONTyped,
} from './SuiInput';
import type { PushMode } from './PushMode';
import {
    PushModeFromJSON,
    PushModeFromJSONTyped,
    PushModeToJSON,
    PushModeToJSONTyped,
} from './PushMode';
import type { SuiGasConfig } from './SuiGasConfig';
import {
    SuiGasConfigFromJSON,
    SuiGasConfigFromJSONTyped,
    SuiGasConfigToJSON,
    SuiGasConfigToJSONTyped,
} from './SuiGasConfig';

/**
 * 
 * @export
 * @interface CreateSuiProgrammableTransactionBlockRequest
 */
export interface CreateSuiProgrammableTransactionBlockRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    type: CreateSuiProgrammableTransactionBlockRequestTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    failOnPredictionFailure?: boolean;
    /**
     * 
     * @type {PushMode}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    pushMode?: PushMode;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    skipPrediction?: boolean;
    /**
     * 
     * @type {SuiChainUniqueId}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    chain: SuiChainUniqueId;
    /**
     * 
     * @type {SuiGasConfig}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    gasConfig?: SuiGasConfig;
    /**
     * 
     * @type {Array<SuiInput>}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    inputs: Array<SuiInput>;
    /**
     * 
     * @type {Array<SuiCommand>}
     * @memberof CreateSuiProgrammableTransactionBlockRequest
     */
    commands: Array<SuiCommand>;
}


/**
 * @export
 */
export const CreateSuiProgrammableTransactionBlockRequestTypeEnum = {
    suiProgrammableTransactionBlock: 'sui_programmable_transaction_block'
} as const;
export type CreateSuiProgrammableTransactionBlockRequestTypeEnum = typeof CreateSuiProgrammableTransactionBlockRequestTypeEnum[keyof typeof CreateSuiProgrammableTransactionBlockRequestTypeEnum];


/**
 * Check if a given object implements the CreateSuiProgrammableTransactionBlockRequest interface.
 */
export function instanceOfCreateSuiProgrammableTransactionBlockRequest(value: object): value is CreateSuiProgrammableTransactionBlockRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('inputs' in value) || value['inputs'] === undefined) return false;
    if (!('commands' in value) || value['commands'] === undefined) return false;
    return true;
}

export function CreateSuiProgrammableTransactionBlockRequestFromJSON(json: any): CreateSuiProgrammableTransactionBlockRequest {
    return CreateSuiProgrammableTransactionBlockRequestFromJSONTyped(json, false);
}

export function CreateSuiProgrammableTransactionBlockRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSuiProgrammableTransactionBlockRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'failOnPredictionFailure': json['fail_on_prediction_failure'] == null ? undefined : json['fail_on_prediction_failure'],
        'pushMode': json['push_mode'] == null ? undefined : PushModeFromJSON(json['push_mode']),
        'skipPrediction': json['skip_prediction'] == null ? undefined : json['skip_prediction'],
        'chain': SuiChainUniqueIdFromJSON(json['chain']),
        'gasConfig': json['gas_config'] == null ? undefined : SuiGasConfigFromJSON(json['gas_config']),
        'inputs': ((json['inputs'] as Array<any>).map(SuiInputFromJSON)),
        'commands': ((json['commands'] as Array<any>).map(SuiCommandFromJSON)),
    };
}

export function CreateSuiProgrammableTransactionBlockRequestToJSON(json: any): CreateSuiProgrammableTransactionBlockRequest {
    return CreateSuiProgrammableTransactionBlockRequestToJSONTyped(json, false);
}

export function CreateSuiProgrammableTransactionBlockRequestToJSONTyped(value?: CreateSuiProgrammableTransactionBlockRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'fail_on_prediction_failure': value['failOnPredictionFailure'],
        'push_mode': PushModeToJSON(value['pushMode']),
        'skip_prediction': value['skipPrediction'],
        'chain': SuiChainUniqueIdToJSON(value['chain']),
        'gas_config': SuiGasConfigToJSON(value['gasConfig']),
        'inputs': ((value['inputs'] as Array<any>).map(SuiInputToJSON)),
        'commands': ((value['commands'] as Array<any>).map(SuiCommandToJSON)),
    };
}

