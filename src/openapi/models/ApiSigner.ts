/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiSigner
 */
export interface ApiSigner {
    /**
     * 
     * @type {string}
     * @memberof ApiSigner
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ApiSigner
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ApiSigner
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ApiSigner
     */
    userType: ApiSignerUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiSigner
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ApiSigner
     */
    state: ApiSignerStateEnum;
    /**
     * 
     * @type {Date}
     * @memberof ApiSigner
     */
    lastKeepAliveAt?: Date;
}


/**
 * @export
 */
export const ApiSignerUserTypeEnum = {
    apiSigner: 'api_signer'
} as const;
export type ApiSignerUserTypeEnum = typeof ApiSignerUserTypeEnum[keyof typeof ApiSignerUserTypeEnum];

/**
 * @export
 */
export const ApiSignerStateEnum = {
    active: 'active',
    onboarding: 'onboarding',
    deleted: 'deleted'
} as const;
export type ApiSignerStateEnum = typeof ApiSignerStateEnum[keyof typeof ApiSignerStateEnum];


/**
 * Check if a given object implements the ApiSigner interface.
 */
export function instanceOfApiSigner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "userType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function ApiSignerFromJSON(json: any): ApiSigner {
    return ApiSignerFromJSONTyped(json, false);
}

export function ApiSignerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiSigner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'userType': json['user_type'],
        'name': json['name'],
        'state': json['state'],
        'lastKeepAliveAt': !exists(json, 'last_keep_alive_at') ? undefined : (new Date(json['last_keep_alive_at'])),
    };
}

export function ApiSignerToJSON(value?: ApiSigner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'user_type': value.userType,
        'name': value.name,
        'state': value.state,
        'last_keep_alive_at': value.lastKeepAliveAt === undefined ? undefined : (value.lastKeepAliveAt.toISOString()),
    };
}

