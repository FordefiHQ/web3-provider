/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SuiCommandArgument } from './SuiCommandArgument';
import {
    SuiCommandArgumentFromJSON,
    SuiCommandArgumentFromJSONTyped,
    SuiCommandArgumentToJSON,
    SuiCommandArgumentToJSONTyped,
} from './SuiCommandArgument';

/**
 * 
 * @export
 * @interface SuiMoveCallCommand
 */
export interface SuiMoveCallCommand {
    /**
     * 
     * @type {string}
     * @memberof SuiMoveCallCommand
     */
    type: SuiMoveCallCommandTypeEnum;
    /**
     * 
     * @type {Array<SuiCommandArgument>}
     * @memberof SuiMoveCallCommand
     */
    arguments: Array<SuiCommandArgument>;
    /**
     * 
     * @type {string}
     * @memberof SuiMoveCallCommand
     */
    target: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SuiMoveCallCommand
     */
    typeArguments: Array<string>;
}


/**
 * @export
 */
export const SuiMoveCallCommandTypeEnum = {
    moveCall: 'move_call'
} as const;
export type SuiMoveCallCommandTypeEnum = typeof SuiMoveCallCommandTypeEnum[keyof typeof SuiMoveCallCommandTypeEnum];


/**
 * Check if a given object implements the SuiMoveCallCommand interface.
 */
export function instanceOfSuiMoveCallCommand(value: object): value is SuiMoveCallCommand {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('arguments' in value) || value['arguments'] === undefined) return false;
    if (!('target' in value) || value['target'] === undefined) return false;
    if (!('typeArguments' in value) || value['typeArguments'] === undefined) return false;
    return true;
}

export function SuiMoveCallCommandFromJSON(json: any): SuiMoveCallCommand {
    return SuiMoveCallCommandFromJSONTyped(json, false);
}

export function SuiMoveCallCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuiMoveCallCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'arguments': ((json['arguments'] as Array<any>).map(SuiCommandArgumentFromJSON)),
        'target': json['target'],
        'typeArguments': json['type_arguments'],
    };
}

export function SuiMoveCallCommandToJSON(json: any): SuiMoveCallCommand {
    return SuiMoveCallCommandToJSONTyped(json, false);
}

export function SuiMoveCallCommandToJSONTyped(value?: SuiMoveCallCommand | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'arguments': ((value['arguments'] as Array<any>).map(SuiCommandArgumentToJSON)),
        'target': value['target'],
        'type_arguments': value['typeArguments'],
    };
}

