/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LogLevel } from './LogLevel';
import {
    LogLevelFromJSON,
    LogLevelFromJSONTyped,
    LogLevelToJSON,
} from './LogLevel';
import type { LogMessageArgument } from './LogMessageArgument';
import {
    LogMessageArgumentFromJSON,
    LogMessageArgumentFromJSONTyped,
    LogMessageArgumentToJSON,
} from './LogMessageArgument';

/**
 * 
 * @export
 * @interface LogMessage
 */
export interface LogMessage {
    /**
     * 
     * @type {LogLevel}
     * @memberof LogMessage
     */
    level: LogLevel;
    /**
     * 
     * @type {string}
     * @memberof LogMessage
     */
    message: string;
    /**
     * 
     * @type {Array<LogMessageArgument>}
     * @memberof LogMessage
     */
    arguments?: Array<LogMessageArgument>;
}

/**
 * Check if a given object implements the LogMessage interface.
 */
export function instanceOfLogMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "level" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function LogMessageFromJSON(json: any): LogMessage {
    return LogMessageFromJSONTyped(json, false);
}

export function LogMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'level': LogLevelFromJSON(json['level']),
        'message': json['message'],
        'arguments': !exists(json, 'arguments') ? undefined : ((json['arguments'] as Array<any>).map(LogMessageArgumentFromJSON)),
    };
}

export function LogMessageToJSON(value?: LogMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'level': LogLevelToJSON(value.level),
        'message': value.message,
        'arguments': value.arguments === undefined ? undefined : ((value.arguments as Array<any>).map(LogMessageArgumentToJSON)),
    };
}

