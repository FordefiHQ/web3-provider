/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
} from './ApprovalRequest';
import type { ProposedDefaultAction } from './ProposedDefaultAction';
import {
    ProposedDefaultActionFromJSON,
    ProposedDefaultActionFromJSONTyped,
    ProposedDefaultActionToJSON,
} from './ProposedDefaultAction';
import type { ProposedTransactionRule } from './ProposedTransactionRule';
import {
    ProposedTransactionRuleFromJSON,
    ProposedTransactionRuleFromJSONTyped,
    ProposedTransactionRuleToJSON,
} from './ProposedTransactionRule';
import type { TransactionsPolicyProposalState } from './TransactionsPolicyProposalState';
import {
    TransactionsPolicyProposalStateFromJSON,
    TransactionsPolicyProposalStateFromJSONTyped,
    TransactionsPolicyProposalStateToJSON,
} from './TransactionsPolicyProposalState';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';

/**
 * 
 * @export
 * @interface TransactionsPolicyProposal
 */
export interface TransactionsPolicyProposal {
    /**
     * 
     * @type {string}
     * @memberof TransactionsPolicyProposal
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionsPolicyProposal
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionsPolicyProposal
     */
    modifiedAt: Date;
    /**
     * 
     * @type {UserRef}
     * @memberof TransactionsPolicyProposal
     */
    createdBy: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof TransactionsPolicyProposal
     */
    abortedBy?: UserRef;
    /**
     * 
     * @type {ProposedDefaultAction}
     * @memberof TransactionsPolicyProposal
     */
    defaultAction: ProposedDefaultAction;
    /**
     * 
     * @type {Array<ProposedTransactionRule>}
     * @memberof TransactionsPolicyProposal
     */
    rules: Array<ProposedTransactionRule>;
    /**
     * 
     * @type {TransactionsPolicyProposalState}
     * @memberof TransactionsPolicyProposal
     */
    state: TransactionsPolicyProposalState;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof TransactionsPolicyProposal
     */
    approvalRequest: ApprovalRequest;
}

/**
 * Check if a given object implements the TransactionsPolicyProposal interface.
 */
export function instanceOfTransactionsPolicyProposal(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "defaultAction" in value;
    isInstance = isInstance && "rules" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "approvalRequest" in value;

    return isInstance;
}

export function TransactionsPolicyProposalFromJSON(json: any): TransactionsPolicyProposal {
    return TransactionsPolicyProposalFromJSONTyped(json, false);
}

export function TransactionsPolicyProposalFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionsPolicyProposal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'createdBy': UserRefFromJSON(json['created_by']),
        'abortedBy': !exists(json, 'aborted_by') ? undefined : UserRefFromJSON(json['aborted_by']),
        'defaultAction': ProposedDefaultActionFromJSON(json['default_action']),
        'rules': ((json['rules'] as Array<any>).map(ProposedTransactionRuleFromJSON)),
        'state': TransactionsPolicyProposalStateFromJSON(json['state']),
        'approvalRequest': ApprovalRequestFromJSON(json['approval_request']),
    };
}

export function TransactionsPolicyProposalToJSON(value?: TransactionsPolicyProposal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'created_by': UserRefToJSON(value.createdBy),
        'aborted_by': UserRefToJSON(value.abortedBy),
        'default_action': ProposedDefaultActionToJSON(value.defaultAction),
        'rules': ((value.rules as Array<any>).map(ProposedTransactionRuleToJSON)),
        'state': TransactionsPolicyProposalStateToJSON(value.state),
        'approval_request': ApprovalRequestToJSON(value.approvalRequest),
    };
}

