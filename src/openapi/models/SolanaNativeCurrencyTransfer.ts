/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnrichedSolanaAddress } from './EnrichedSolanaAddress';
import {
    EnrichedSolanaAddressFromJSON,
    EnrichedSolanaAddressFromJSONTyped,
    EnrichedSolanaAddressToJSON,
} from './EnrichedSolanaAddress';
import type { Price } from './Price';
import {
    PriceFromJSON,
    PriceFromJSONTyped,
    PriceToJSON,
} from './Price';

/**
 * 
 * @export
 * @interface SolanaNativeCurrencyTransfer
 */
export interface SolanaNativeCurrencyTransfer {
    /**
     * 
     * @type {string}
     * @memberof SolanaNativeCurrencyTransfer
     */
    type: SolanaNativeCurrencyTransferTypeEnum;
    /**
     * 
     * @type {EnrichedSolanaAddress}
     * @memberof SolanaNativeCurrencyTransfer
     */
    from: EnrichedSolanaAddress;
    /**
     * 
     * @type {EnrichedSolanaAddress}
     * @memberof SolanaNativeCurrencyTransfer
     */
    to: EnrichedSolanaAddress;
    /**
     * 
     * @type {string}
     * @memberof SolanaNativeCurrencyTransfer
     */
    amount: string;
    /**
     * 
     * @type {Price}
     * @memberof SolanaNativeCurrencyTransfer
     */
    price?: Price;
}


/**
 * @export
 */
export const SolanaNativeCurrencyTransferTypeEnum = {
    native: 'native'
} as const;
export type SolanaNativeCurrencyTransferTypeEnum = typeof SolanaNativeCurrencyTransferTypeEnum[keyof typeof SolanaNativeCurrencyTransferTypeEnum];


/**
 * Check if a given object implements the SolanaNativeCurrencyTransfer interface.
 */
export function instanceOfSolanaNativeCurrencyTransfer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "amount" in value;

    return isInstance;
}

export function SolanaNativeCurrencyTransferFromJSON(json: any): SolanaNativeCurrencyTransfer {
    return SolanaNativeCurrencyTransferFromJSONTyped(json, false);
}

export function SolanaNativeCurrencyTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): SolanaNativeCurrencyTransfer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'from': EnrichedSolanaAddressFromJSON(json['from']),
        'to': EnrichedSolanaAddressFromJSON(json['to']),
        'amount': json['amount'],
        'price': !exists(json, 'price') ? undefined : PriceFromJSON(json['price']),
    };
}

export function SolanaNativeCurrencyTransferToJSON(value?: SolanaNativeCurrencyTransfer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'from': EnrichedSolanaAddressToJSON(value.from),
        'to': EnrichedSolanaAddressToJSON(value.to),
        'amount': value.amount,
        'price': PriceToJSON(value.price),
    };
}

