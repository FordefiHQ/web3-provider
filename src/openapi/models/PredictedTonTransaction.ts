/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
    EnrichedTonAddressFromJSONTyped,
    EnrichedTonAddressToJSON,
    EnrichedTonAddressToJSONTyped,
} from './EnrichedTonAddress';
import type { AmlPolicyMatchOutgoing } from './AmlPolicyMatchOutgoing';
import {
    AmlPolicyMatchOutgoingFromJSON,
    AmlPolicyMatchOutgoingFromJSONTyped,
    AmlPolicyMatchOutgoingToJSON,
    AmlPolicyMatchOutgoingToJSONTyped,
} from './AmlPolicyMatchOutgoing';
import type { TonSuggestedFees } from './TonSuggestedFees';
import {
    TonSuggestedFeesFromJSON,
    TonSuggestedFeesFromJSONTyped,
    TonSuggestedFeesToJSON,
    TonSuggestedFeesToJSONTyped,
} from './TonSuggestedFees';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSON,
    EnrichedTonChainFromJSONTyped,
    EnrichedTonChainToJSON,
    EnrichedTonChainToJSONTyped,
} from './EnrichedTonChain';
import type { TransactionRisk } from './TransactionRisk';
import {
    TransactionRiskFromJSON,
    TransactionRiskFromJSONTyped,
    TransactionRiskToJSON,
    TransactionRiskToJSONTyped,
} from './TransactionRisk';
import type { PredictedTonTransactionTonTransactionTypeDetails } from './PredictedTonTransactionTonTransactionTypeDetails';
import {
    PredictedTonTransactionTonTransactionTypeDetailsFromJSON,
    PredictedTonTransactionTonTransactionTypeDetailsFromJSONTyped,
    PredictedTonTransactionTonTransactionTypeDetailsToJSON,
    PredictedTonTransactionTonTransactionTypeDetailsToJSONTyped,
} from './PredictedTonTransactionTonTransactionTypeDetails';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
    ApprovalRequestToJSONTyped,
} from './ApprovalRequest';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
    SimulationStatusResultToJSONTyped,
} from './SimulationStatusResult';
import type { PolicyMatch } from './PolicyMatch';
import {
    PolicyMatchFromJSON,
    PolicyMatchFromJSONTyped,
    PolicyMatchToJSON,
    PolicyMatchToJSONTyped,
} from './PolicyMatch';
import type { TonTransactionResult } from './TonTransactionResult';
import {
    TonTransactionResultFromJSON,
    TonTransactionResultFromJSONTyped,
    TonTransactionResultToJSON,
    TonTransactionResultToJSONTyped,
} from './TonTransactionResult';
import type { AmlResults } from './AmlResults';
import {
    AmlResultsFromJSON,
    AmlResultsFromJSONTyped,
    AmlResultsToJSON,
    AmlResultsToJSONTyped,
} from './AmlResults';
import type { TonTransactionPayload } from './TonTransactionPayload';
import {
    TonTransactionPayloadFromJSON,
    TonTransactionPayloadFromJSONTyped,
    TonTransactionPayloadToJSON,
    TonTransactionPayloadToJSONTyped,
} from './TonTransactionPayload';

/**
 * 
 * @export
 * @interface PredictedTonTransaction
 */
export interface PredictedTonTransaction {
    /**
     * 
     * @type {AmlPolicyMatchOutgoing}
     * @memberof PredictedTonTransaction
     */
    amlPolicyMatch?: AmlPolicyMatchOutgoing;
    /**
     * 
     * @type {PolicyMatch}
     * @memberof PredictedTonTransaction
     */
    policyMatch: PolicyMatch;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof PredictedTonTransaction
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {Array<TransactionRisk>}
     * @memberof PredictedTonTransaction
     */
    risks: Array<TransactionRisk>;
    /**
     * 
     * @type {string}
     * @memberof PredictedTonTransaction
     */
    note?: string;
    /**
     * 
     * @type {AmlResults}
     * @memberof PredictedTonTransaction
     */
    amlResults?: AmlResults;
    /**
     * 
     * @type {string}
     * @memberof PredictedTonTransaction
     */
    type: PredictedTonTransactionTypeEnum;
    /**
     * 
     * @type {TonTransactionResult}
     * @memberof PredictedTonTransaction
     */
    expectedResult: TonTransactionResult;
    /**
     * 
     * @type {EnrichedTonChain}
     * @memberof PredictedTonTransaction
     */
    chain: EnrichedTonChain;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof PredictedTonTransaction
     */
    simulationStatusResult: SimulationStatusResult;
    /**
     * 
     * @type {TonTransactionPayload}
     * @memberof PredictedTonTransaction
     */
    payload: TonTransactionPayload;
    /**
     * 
     * @type {PredictedTonTransactionTonTransactionTypeDetails}
     * @memberof PredictedTonTransaction
     */
    tonTransactionTypeDetails: PredictedTonTransactionTonTransactionTypeDetails;
    /**
     * 
     * @type {TonSuggestedFees}
     * @memberof PredictedTonTransaction
     */
    suggestedFees: TonSuggestedFees;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof PredictedTonTransaction
     */
    sender: EnrichedTonAddress;
}


/**
 * @export
 */
export const PredictedTonTransactionTypeEnum = {
    tonTransaction: 'ton_transaction'
} as const;
export type PredictedTonTransactionTypeEnum = typeof PredictedTonTransactionTypeEnum[keyof typeof PredictedTonTransactionTypeEnum];


/**
 * Check if a given object implements the PredictedTonTransaction interface.
 */
export function instanceOfPredictedTonTransaction(value: object): value is PredictedTonTransaction {
    if (!('policyMatch' in value) || value['policyMatch'] === undefined) return false;
    if (!('risks' in value) || value['risks'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('expectedResult' in value) || value['expectedResult'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('simulationStatusResult' in value) || value['simulationStatusResult'] === undefined) return false;
    if (!('payload' in value) || value['payload'] === undefined) return false;
    if (!('tonTransactionTypeDetails' in value) || value['tonTransactionTypeDetails'] === undefined) return false;
    if (!('suggestedFees' in value) || value['suggestedFees'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    return true;
}

export function PredictedTonTransactionFromJSON(json: any): PredictedTonTransaction {
    return PredictedTonTransactionFromJSONTyped(json, false);
}

export function PredictedTonTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PredictedTonTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'amlPolicyMatch': json['aml_policy_match'] == null ? undefined : AmlPolicyMatchOutgoingFromJSON(json['aml_policy_match']),
        'policyMatch': PolicyMatchFromJSON(json['policy_match']),
        'approvalRequest': json['approval_request'] == null ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'risks': ((json['risks'] as Array<any>).map(TransactionRiskFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'amlResults': json['aml_results'] == null ? undefined : AmlResultsFromJSON(json['aml_results']),
        'type': json['type'],
        'expectedResult': TonTransactionResultFromJSON(json['expected_result']),
        'chain': EnrichedTonChainFromJSON(json['chain']),
        'simulationStatusResult': SimulationStatusResultFromJSON(json['simulation_status_result']),
        'payload': TonTransactionPayloadFromJSON(json['payload']),
        'tonTransactionTypeDetails': PredictedTonTransactionTonTransactionTypeDetailsFromJSON(json['ton_transaction_type_details']),
        'suggestedFees': TonSuggestedFeesFromJSON(json['suggested_fees']),
        'sender': EnrichedTonAddressFromJSON(json['sender']),
    };
}

export function PredictedTonTransactionToJSON(json: any): PredictedTonTransaction {
    return PredictedTonTransactionToJSONTyped(json, false);
}

export function PredictedTonTransactionToJSONTyped(value?: PredictedTonTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aml_policy_match': AmlPolicyMatchOutgoingToJSON(value['amlPolicyMatch']),
        'policy_match': PolicyMatchToJSON(value['policyMatch']),
        'approval_request': ApprovalRequestToJSON(value['approvalRequest']),
        'risks': ((value['risks'] as Array<any>).map(TransactionRiskToJSON)),
        'note': value['note'],
        'aml_results': AmlResultsToJSON(value['amlResults']),
        'type': value['type'],
        'expected_result': TonTransactionResultToJSON(value['expectedResult']),
        'chain': EnrichedTonChainToJSON(value['chain']),
        'simulation_status_result': SimulationStatusResultToJSON(value['simulationStatusResult']),
        'payload': TonTransactionPayloadToJSON(value['payload']),
        'ton_transaction_type_details': PredictedTonTransactionTonTransactionTypeDetailsToJSON(value['tonTransactionTypeDetails']),
        'suggested_fees': TonSuggestedFeesToJSON(value['suggestedFees']),
        'sender': EnrichedTonAddressToJSON(value['sender']),
    };
}

