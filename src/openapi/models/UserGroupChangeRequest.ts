/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupUserRef } from './GroupUserRef';
import {
    GroupUserRefFromJSON,
    GroupUserRefFromJSONTyped,
    GroupUserRefToJSON,
} from './GroupUserRef';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';

/**
 * 
 * @export
 * @interface UserGroupChangeRequest
 */
export interface UserGroupChangeRequest {
    /**
     * 
     * @type {string}
     * @memberof UserGroupChangeRequest
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof UserGroupChangeRequest
     */
    createdAt: Date;
    /**
     * 
     * @type {UserRef}
     * @memberof UserGroupChangeRequest
     */
    createdBy: UserRef;
    /**
     * 
     * @type {string}
     * @memberof UserGroupChangeRequest
     */
    newName?: string;
    /**
     * 
     * @type {Array<GroupUserRef>}
     * @memberof UserGroupChangeRequest
     */
    addedUsers?: Array<GroupUserRef>;
    /**
     * 
     * @type {Array<GroupUserRef>}
     * @memberof UserGroupChangeRequest
     */
    removedUsers?: Array<GroupUserRef>;
}

/**
 * Check if a given object implements the UserGroupChangeRequest interface.
 */
export function instanceOfUserGroupChangeRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;

    return isInstance;
}

export function UserGroupChangeRequestFromJSON(json: any): UserGroupChangeRequest {
    return UserGroupChangeRequestFromJSONTyped(json, false);
}

export function UserGroupChangeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserGroupChangeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'createdBy': UserRefFromJSON(json['created_by']),
        'newName': !exists(json, 'new_name') ? undefined : json['new_name'],
        'addedUsers': !exists(json, 'added_users') ? undefined : ((json['added_users'] as Array<any>).map(GroupUserRefFromJSON)),
        'removedUsers': !exists(json, 'removed_users') ? undefined : ((json['removed_users'] as Array<any>).map(GroupUserRefFromJSON)),
    };
}

export function UserGroupChangeRequestToJSON(value?: UserGroupChangeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'created_by': UserRefToJSON(value.createdBy),
        'new_name': value.newName,
        'added_users': value.addedUsers === undefined ? undefined : ((value.addedUsers as Array<any>).map(GroupUserRefToJSON)),
        'removed_users': value.removedUsers === undefined ? undefined : ((value.removedUsers as Array<any>).map(GroupUserRefToJSON)),
    };
}

