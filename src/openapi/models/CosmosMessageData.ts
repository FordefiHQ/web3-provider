/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CosmosMessageBase64Data } from './CosmosMessageBase64Data';
import {
    instanceOfCosmosMessageBase64Data,
    CosmosMessageBase64DataFromJSON,
    CosmosMessageBase64DataFromJSONTyped,
    CosmosMessageBase64DataToJSON,
} from './CosmosMessageBase64Data';
import type { CosmosMessageStrData } from './CosmosMessageStrData';
import {
    instanceOfCosmosMessageStrData,
    CosmosMessageStrDataFromJSON,
    CosmosMessageStrDataFromJSONTyped,
    CosmosMessageStrDataToJSON,
} from './CosmosMessageStrData';

/**
 * @type CosmosMessageData
 * 
 * @export
 */
export type CosmosMessageData = { type: 'base64' } & CosmosMessageBase64Data | { type: 'string' } & CosmosMessageStrData;

export function CosmosMessageDataFromJSON(json: any): CosmosMessageData {
    return CosmosMessageDataFromJSONTyped(json, false);
}

export function CosmosMessageDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosMessageData {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'base64':
            return Object.assign({}, CosmosMessageBase64DataFromJSONTyped(json, true), { type: 'base64' } as const);
        case 'string':
            return Object.assign({}, CosmosMessageStrDataFromJSONTyped(json, true), { type: 'string' } as const);
        default:
            throw new Error(`No variant of CosmosMessageData exists with 'type=${json['type']}'`);
    }
}

export function CosmosMessageDataToJSON(json: any): any {
    return CosmosMessageDataToJSONTyped(json, false);
}

export function CosmosMessageDataToJSONTyped(value?: CosmosMessageData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'base64':
            return Object.assign({}, CosmosMessageBase64DataToJSON(value), { type: 'base64' } as const);
        case 'string':
            return Object.assign({}, CosmosMessageStrDataToJSON(value), { type: 'string' } as const);
        default:
            throw new Error(`No variant of CosmosMessageData exists with 'type=${value['type']}'`);
    }

}

