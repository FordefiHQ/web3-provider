/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AminoSignDoc } from './AminoSignDoc';
import {
    instanceOfAminoSignDoc,
    AminoSignDocFromJSON,
    AminoSignDocFromJSONTyped,
    AminoSignDocToJSON,
} from './AminoSignDoc';
import type { DirectSignDoc } from './DirectSignDoc';
import {
    instanceOfDirectSignDoc,
    DirectSignDocFromJSON,
    DirectSignDocFromJSONTyped,
    DirectSignDocToJSON,
} from './DirectSignDoc';
import type { MinedSignDoc } from './MinedSignDoc';
import {
    instanceOfMinedSignDoc,
    MinedSignDocFromJSON,
    MinedSignDocFromJSONTyped,
    MinedSignDocToJSON,
} from './MinedSignDoc';

/**
 * @type SignDoc
 * 
 * @export
 */
export type SignDoc = { format: 'amino' } & AminoSignDoc | { format: 'direct' } & DirectSignDoc | { format: 'mined' } & MinedSignDoc;

export function SignDocFromJSON(json: any): SignDoc {
    return SignDocFromJSONTyped(json, false);
}

export function SignDocFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignDoc {
    if (json == null) {
        return json;
    }
    switch (json['format']) {
        case 'amino':
            return Object.assign({}, AminoSignDocFromJSONTyped(json, true), { format: 'amino' } as const);
        case 'direct':
            return Object.assign({}, DirectSignDocFromJSONTyped(json, true), { format: 'direct' } as const);
        case 'mined':
            return Object.assign({}, MinedSignDocFromJSONTyped(json, true), { format: 'mined' } as const);
        default:
            throw new Error(`No variant of SignDoc exists with 'format=${json['format']}'`);
    }
}

export function SignDocToJSON(json: any): any {
    return SignDocToJSONTyped(json, false);
}

export function SignDocToJSONTyped(value?: SignDoc | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['format']) {
        case 'amino':
            return Object.assign({}, AminoSignDocToJSON(value), { format: 'amino' } as const);
        case 'direct':
            return Object.assign({}, DirectSignDocToJSON(value), { format: 'direct' } as const);
        case 'mined':
            return Object.assign({}, MinedSignDocToJSON(value), { format: 'mined' } as const);
        default:
            throw new Error(`No variant of SignDoc exists with 'format=${value['format']}'`);
    }

}

