/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AminoSignDoc,
    instanceOfAminoSignDoc,
    AminoSignDocFromJSON,
    AminoSignDocFromJSONTyped,
    AminoSignDocToJSON,
} from './AminoSignDoc';
import {
    DirectSignDoc,
    instanceOfDirectSignDoc,
    DirectSignDocFromJSON,
    DirectSignDocFromJSONTyped,
    DirectSignDocToJSON,
} from './DirectSignDoc';
import {
    MinedSignDoc,
    instanceOfMinedSignDoc,
    MinedSignDocFromJSON,
    MinedSignDocFromJSONTyped,
    MinedSignDocToJSON,
} from './MinedSignDoc';

/**
 * @type SignDoc
 * 
 * @export
 */
export type SignDoc = { format: 'amino' } & AminoSignDoc | { format: 'direct' } & DirectSignDoc | { format: 'mined' } & MinedSignDoc;

export function SignDocFromJSON(json: any): SignDoc {
    return SignDocFromJSONTyped(json, false);
}

export function SignDocFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignDoc {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['format']) {
        case 'amino':
            return {...AminoSignDocFromJSONTyped(json, true), format: 'amino'};
        case 'direct':
            return {...DirectSignDocFromJSONTyped(json, true), format: 'direct'};
        case 'mined':
            return {...MinedSignDocFromJSONTyped(json, true), format: 'mined'};
        default:
            throw new Error(`No variant of SignDoc exists with 'format=${json['format']}'`);
    }
}

export function SignDocToJSON(value?: SignDoc | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['format']) {
        case 'amino':
            return AminoSignDocToJSON(value);
        case 'direct':
            return DirectSignDocToJSON(value);
        case 'mined':
            return MinedSignDocToJSON(value);
        default:
            throw new Error(`No variant of SignDoc exists with 'format=${value['format']}'`);
    }

}

