/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
} from './UserRole';
import type { UserState } from './UserState';
import {
    UserStateFromJSON,
    UserStateFromJSONTyped,
    UserStateToJSON,
} from './UserState';

/**
 * 
 * @export
 * @interface PersonRef
 */
export interface PersonRef {
    /**
     * 
     * @type {string}
     * @memberof PersonRef
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PersonRef
     */
    userType: PersonRefUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PersonRef
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonRef
     */
    email: string;
    /**
     * 
     * @type {UserState}
     * @memberof PersonRef
     */
    state: UserState;
    /**
     * 
     * @type {UserRole}
     * @memberof PersonRef
     */
    role: UserRole;
}


/**
 * @export
 */
export const PersonRefUserTypeEnum = {
    person: 'person'
} as const;
export type PersonRefUserTypeEnum = typeof PersonRefUserTypeEnum[keyof typeof PersonRefUserTypeEnum];


/**
 * Check if a given object implements the PersonRef interface.
 */
export function instanceOfPersonRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userType" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "role" in value;

    return isInstance;
}

export function PersonRefFromJSON(json: any): PersonRef {
    return PersonRefFromJSONTyped(json, false);
}

export function PersonRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userType': json['user_type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': json['email'],
        'state': UserStateFromJSON(json['state']),
        'role': UserRoleFromJSON(json['role']),
    };
}

export function PersonRefToJSON(value?: PersonRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'user_type': value.userType,
        'name': value.name,
        'email': value.email,
        'state': UserStateToJSON(value.state),
        'role': UserRoleToJSON(value.role),
    };
}

