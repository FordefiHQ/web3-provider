/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Cloud } from './Cloud';
import {
    instanceOfCloud,
    CloudFromJSON,
    CloudFromJSONTyped,
    CloudToJSON,
} from './Cloud';
import type { Mnemonic } from './Mnemonic';
import {
    instanceOfMnemonic,
    MnemonicFromJSON,
    MnemonicFromJSONTyped,
    MnemonicToJSON,
} from './Mnemonic';

/**
 * @type DeviceBackupInfo
 * 
 * @export
 */
export type DeviceBackupInfo = { type: 'cloud' } & Cloud | { type: 'mnemonic' } & Mnemonic;

export function DeviceBackupInfoFromJSON(json: any): DeviceBackupInfo {
    return DeviceBackupInfoFromJSONTyped(json, false);
}

export function DeviceBackupInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceBackupInfo {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'cloud':
            return Object.assign({}, CloudFromJSONTyped(json, true), { type: 'cloud' } as const);
        case 'mnemonic':
            return Object.assign({}, MnemonicFromJSONTyped(json, true), { type: 'mnemonic' } as const);
        default:
            throw new Error(`No variant of DeviceBackupInfo exists with 'type=${json['type']}'`);
    }
}

export function DeviceBackupInfoToJSON(json: any): any {
    return DeviceBackupInfoToJSONTyped(json, false);
}

export function DeviceBackupInfoToJSONTyped(value?: DeviceBackupInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'cloud':
            return Object.assign({}, CloudToJSON(value), { type: 'cloud' } as const);
        case 'mnemonic':
            return Object.assign({}, MnemonicToJSON(value), { type: 'mnemonic' } as const);
        default:
            throw new Error(`No variant of DeviceBackupInfo exists with 'type=${value['type']}'`);
    }

}

