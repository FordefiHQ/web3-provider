/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StacksTransactionResult } from './StacksTransactionResult';
import {
    StacksTransactionResultFromJSON,
    StacksTransactionResultFromJSONTyped,
    StacksTransactionResultToJSON,
    StacksTransactionResultToJSONTyped,
} from './StacksTransactionResult';
import type { AmlPolicyMatchOutgoing } from './AmlPolicyMatchOutgoing';
import {
    AmlPolicyMatchOutgoingFromJSON,
    AmlPolicyMatchOutgoingFromJSONTyped,
    AmlPolicyMatchOutgoingToJSON,
    AmlPolicyMatchOutgoingToJSONTyped,
} from './AmlPolicyMatchOutgoing';
import type { PredictedStacksTransactionStacksTransactionTypeDetails } from './PredictedStacksTransactionStacksTransactionTypeDetails';
import {
    PredictedStacksTransactionStacksTransactionTypeDetailsFromJSON,
    PredictedStacksTransactionStacksTransactionTypeDetailsFromJSONTyped,
    PredictedStacksTransactionStacksTransactionTypeDetailsToJSON,
    PredictedStacksTransactionStacksTransactionTypeDetailsToJSONTyped,
} from './PredictedStacksTransactionStacksTransactionTypeDetails';
import type { StacksSuggestedFees } from './StacksSuggestedFees';
import {
    StacksSuggestedFeesFromJSON,
    StacksSuggestedFeesFromJSONTyped,
    StacksSuggestedFeesToJSON,
    StacksSuggestedFeesToJSONTyped,
} from './StacksSuggestedFees';
import type { TransactionRisk } from './TransactionRisk';
import {
    TransactionRiskFromJSON,
    TransactionRiskFromJSONTyped,
    TransactionRiskToJSON,
    TransactionRiskToJSONTyped,
} from './TransactionRisk';
import type { EnrichedStacksChain } from './EnrichedStacksChain';
import {
    EnrichedStacksChainFromJSON,
    EnrichedStacksChainFromJSONTyped,
    EnrichedStacksChainToJSON,
    EnrichedStacksChainToJSONTyped,
} from './EnrichedStacksChain';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
    ApprovalRequestToJSONTyped,
} from './ApprovalRequest';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
    SimulationStatusResultToJSONTyped,
} from './SimulationStatusResult';
import type { PolicyMatch } from './PolicyMatch';
import {
    PolicyMatchFromJSON,
    PolicyMatchFromJSONTyped,
    PolicyMatchToJSON,
    PolicyMatchToJSONTyped,
} from './PolicyMatch';
import type { StacksPostConditions } from './StacksPostConditions';
import {
    StacksPostConditionsFromJSON,
    StacksPostConditionsFromJSONTyped,
    StacksPostConditionsToJSON,
    StacksPostConditionsToJSONTyped,
} from './StacksPostConditions';
import type { AmlResults } from './AmlResults';
import {
    AmlResultsFromJSON,
    AmlResultsFromJSONTyped,
    AmlResultsToJSON,
    AmlResultsToJSONTyped,
} from './AmlResults';
import type { EnrichedStacksAddress } from './EnrichedStacksAddress';
import {
    EnrichedStacksAddressFromJSON,
    EnrichedStacksAddressFromJSONTyped,
    EnrichedStacksAddressToJSON,
    EnrichedStacksAddressToJSONTyped,
} from './EnrichedStacksAddress';

/**
 * 
 * @export
 * @interface PredictedStacksTransaction
 */
export interface PredictedStacksTransaction {
    /**
     * 
     * @type {AmlPolicyMatchOutgoing}
     * @memberof PredictedStacksTransaction
     */
    amlPolicyMatch?: AmlPolicyMatchOutgoing;
    /**
     * 
     * @type {PolicyMatch}
     * @memberof PredictedStacksTransaction
     */
    policyMatch: PolicyMatch;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof PredictedStacksTransaction
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {Array<TransactionRisk>}
     * @memberof PredictedStacksTransaction
     */
    risks: Array<TransactionRisk>;
    /**
     * 
     * @type {string}
     * @memberof PredictedStacksTransaction
     */
    note?: string;
    /**
     * 
     * @type {AmlResults}
     * @memberof PredictedStacksTransaction
     */
    amlResults?: AmlResults;
    /**
     * 
     * @type {string}
     * @memberof PredictedStacksTransaction
     */
    type: PredictedStacksTransactionTypeEnum;
    /**
     * 
     * @type {StacksPostConditions}
     * @memberof PredictedStacksTransaction
     */
    postConditions: StacksPostConditions;
    /**
     * 
     * @type {StacksTransactionResult}
     * @memberof PredictedStacksTransaction
     */
    expectedResult: StacksTransactionResult;
    /**
     * 
     * @type {EnrichedStacksChain}
     * @memberof PredictedStacksTransaction
     */
    chain: EnrichedStacksChain;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof PredictedStacksTransaction
     */
    simulationStatusResult: SimulationStatusResult;
    /**
     * 
     * @type {PredictedStacksTransactionStacksTransactionTypeDetails}
     * @memberof PredictedStacksTransaction
     */
    stacksTransactionTypeDetails: PredictedStacksTransactionStacksTransactionTypeDetails;
    /**
     * 
     * @type {string}
     * @memberof PredictedStacksTransaction
     */
    serializedPayload: string;
    /**
     * 
     * @type {string}
     * @memberof PredictedStacksTransaction
     */
    memo?: string;
    /**
     * 
     * @type {StacksSuggestedFees}
     * @memberof PredictedStacksTransaction
     */
    suggestedFees: StacksSuggestedFees;
    /**
     * 
     * @type {EnrichedStacksAddress}
     * @memberof PredictedStacksTransaction
     */
    sender: EnrichedStacksAddress;
}


/**
 * @export
 */
export const PredictedStacksTransactionTypeEnum = {
    stacksTransaction: 'stacks_transaction'
} as const;
export type PredictedStacksTransactionTypeEnum = typeof PredictedStacksTransactionTypeEnum[keyof typeof PredictedStacksTransactionTypeEnum];


/**
 * Check if a given object implements the PredictedStacksTransaction interface.
 */
export function instanceOfPredictedStacksTransaction(value: object): value is PredictedStacksTransaction {
    if (!('policyMatch' in value) || value['policyMatch'] === undefined) return false;
    if (!('risks' in value) || value['risks'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('postConditions' in value) || value['postConditions'] === undefined) return false;
    if (!('expectedResult' in value) || value['expectedResult'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('simulationStatusResult' in value) || value['simulationStatusResult'] === undefined) return false;
    if (!('stacksTransactionTypeDetails' in value) || value['stacksTransactionTypeDetails'] === undefined) return false;
    if (!('serializedPayload' in value) || value['serializedPayload'] === undefined) return false;
    if (!('suggestedFees' in value) || value['suggestedFees'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    return true;
}

export function PredictedStacksTransactionFromJSON(json: any): PredictedStacksTransaction {
    return PredictedStacksTransactionFromJSONTyped(json, false);
}

export function PredictedStacksTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PredictedStacksTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'amlPolicyMatch': json['aml_policy_match'] == null ? undefined : AmlPolicyMatchOutgoingFromJSON(json['aml_policy_match']),
        'policyMatch': PolicyMatchFromJSON(json['policy_match']),
        'approvalRequest': json['approval_request'] == null ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'risks': ((json['risks'] as Array<any>).map(TransactionRiskFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'amlResults': json['aml_results'] == null ? undefined : AmlResultsFromJSON(json['aml_results']),
        'type': json['type'],
        'postConditions': StacksPostConditionsFromJSON(json['post_conditions']),
        'expectedResult': StacksTransactionResultFromJSON(json['expected_result']),
        'chain': EnrichedStacksChainFromJSON(json['chain']),
        'simulationStatusResult': SimulationStatusResultFromJSON(json['simulation_status_result']),
        'stacksTransactionTypeDetails': PredictedStacksTransactionStacksTransactionTypeDetailsFromJSON(json['stacks_transaction_type_details']),
        'serializedPayload': json['serialized_payload'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'suggestedFees': StacksSuggestedFeesFromJSON(json['suggested_fees']),
        'sender': EnrichedStacksAddressFromJSON(json['sender']),
    };
}

export function PredictedStacksTransactionToJSON(json: any): PredictedStacksTransaction {
    return PredictedStacksTransactionToJSONTyped(json, false);
}

export function PredictedStacksTransactionToJSONTyped(value?: PredictedStacksTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aml_policy_match': AmlPolicyMatchOutgoingToJSON(value['amlPolicyMatch']),
        'policy_match': PolicyMatchToJSON(value['policyMatch']),
        'approval_request': ApprovalRequestToJSON(value['approvalRequest']),
        'risks': ((value['risks'] as Array<any>).map(TransactionRiskToJSON)),
        'note': value['note'],
        'aml_results': AmlResultsToJSON(value['amlResults']),
        'type': value['type'],
        'post_conditions': StacksPostConditionsToJSON(value['postConditions']),
        'expected_result': StacksTransactionResultToJSON(value['expectedResult']),
        'chain': EnrichedStacksChainToJSON(value['chain']),
        'simulation_status_result': SimulationStatusResultToJSON(value['simulationStatusResult']),
        'stacks_transaction_type_details': PredictedStacksTransactionStacksTransactionTypeDetailsToJSON(value['stacksTransactionTypeDetails']),
        'serialized_payload': value['serializedPayload'],
        'memo': value['memo'],
        'suggested_fees': StacksSuggestedFeesToJSON(value['suggestedFees']),
        'sender': EnrichedStacksAddressToJSON(value['sender']),
    };
}

