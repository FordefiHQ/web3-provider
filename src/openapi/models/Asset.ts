/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    CosmosAsset,
    instanceOfCosmosAsset,
    CosmosAssetFromJSON,
    CosmosAssetFromJSONTyped,
    CosmosAssetToJSON,
} from './CosmosAsset';
import {
    EvmAsset,
    instanceOfEvmAsset,
    EvmAssetFromJSON,
    EvmAssetFromJSONTyped,
    EvmAssetToJSON,
} from './EvmAsset';
import {
    SolanaAsset,
    instanceOfSolanaAsset,
    SolanaAssetFromJSON,
    SolanaAssetFromJSONTyped,
    SolanaAssetToJSON,
} from './SolanaAsset';
import {
    UtxoAsset,
    instanceOfUtxoAsset,
    UtxoAssetFromJSON,
    UtxoAssetFromJSONTyped,
    UtxoAssetToJSON,
} from './UtxoAsset';

/**
 * @type Asset
 * 
 * @export
 */
export type Asset = { type: 'cosmos_asset' } & CosmosAsset | { type: 'evm_asset' } & EvmAsset | { type: 'solana_asset' } & SolanaAsset | { type: 'utxo_asset' } & UtxoAsset;

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'cosmos_asset':
            return {...CosmosAssetFromJSONTyped(json, true), type: 'cosmos_asset'};
        case 'evm_asset':
            return {...EvmAssetFromJSONTyped(json, true), type: 'evm_asset'};
        case 'solana_asset':
            return {...SolanaAssetFromJSONTyped(json, true), type: 'solana_asset'};
        case 'utxo_asset':
            return {...UtxoAssetFromJSONTyped(json, true), type: 'utxo_asset'};
        default:
            throw new Error(`No variant of Asset exists with 'type=${json['type']}'`);
    }
}

export function AssetToJSON(value?: Asset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'cosmos_asset':
            return CosmosAssetToJSON(value);
        case 'evm_asset':
            return EvmAssetToJSON(value);
        case 'solana_asset':
            return SolanaAssetToJSON(value);
        case 'utxo_asset':
            return UtxoAssetToJSON(value);
        default:
            throw new Error(`No variant of Asset exists with 'type=${value['type']}'`);
    }

}

