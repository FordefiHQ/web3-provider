/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ExchangeTransferExternalRecipientTypeAddress } from './ExchangeTransferExternalRecipientTypeAddress';
import {
    instanceOfExchangeTransferExternalRecipientTypeAddress,
    ExchangeTransferExternalRecipientTypeAddressFromJSON,
    ExchangeTransferExternalRecipientTypeAddressFromJSONTyped,
    ExchangeTransferExternalRecipientTypeAddressToJSON,
} from './ExchangeTransferExternalRecipientTypeAddress';
import type { ExchangeTransferExternalRecipientTypeVault } from './ExchangeTransferExternalRecipientTypeVault';
import {
    instanceOfExchangeTransferExternalRecipientTypeVault,
    ExchangeTransferExternalRecipientTypeVaultFromJSON,
    ExchangeTransferExternalRecipientTypeVaultFromJSONTyped,
    ExchangeTransferExternalRecipientTypeVaultToJSON,
} from './ExchangeTransferExternalRecipientTypeVault';

/**
 * @type CreateExchangeExternalWithdrawRequestTo
 * 
 * @export
 */
export type CreateExchangeExternalWithdrawRequestTo = { type: 'address' } & ExchangeTransferExternalRecipientTypeAddress | { type: 'vault' } & ExchangeTransferExternalRecipientTypeVault;

export function CreateExchangeExternalWithdrawRequestToFromJSON(json: any): CreateExchangeExternalWithdrawRequestTo {
    return CreateExchangeExternalWithdrawRequestToFromJSONTyped(json, false);
}

export function CreateExchangeExternalWithdrawRequestToFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateExchangeExternalWithdrawRequestTo {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'address':
            return Object.assign({}, ExchangeTransferExternalRecipientTypeAddressFromJSONTyped(json, true), { type: 'address' } as const);
        case 'vault':
            return Object.assign({}, ExchangeTransferExternalRecipientTypeVaultFromJSONTyped(json, true), { type: 'vault' } as const);
        default:
            throw new Error(`No variant of CreateExchangeExternalWithdrawRequestTo exists with 'type=${json['type']}'`);
    }
}

export function CreateExchangeExternalWithdrawRequestToToJSON(json: any): any {
    return CreateExchangeExternalWithdrawRequestToToJSONTyped(json, false);
}

export function CreateExchangeExternalWithdrawRequestToToJSONTyped(value?: CreateExchangeExternalWithdrawRequestTo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'address':
            return Object.assign({}, ExchangeTransferExternalRecipientTypeAddressToJSON(value), { type: 'address' } as const);
        case 'vault':
            return Object.assign({}, ExchangeTransferExternalRecipientTypeVaultToJSON(value), { type: 'vault' } as const);
        default:
            throw new Error(`No variant of CreateExchangeExternalWithdrawRequestTo exists with 'type=${value['type']}'`);
    }

}

