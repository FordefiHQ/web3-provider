/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
} from './PricedAsset';
import type { StateChangeReason } from './StateChangeReason';
import {
    StateChangeReasonFromJSON,
    StateChangeReasonFromJSONTyped,
    StateChangeReasonToJSON,
} from './StateChangeReason';
import type { UtxoTransactionState } from './UtxoTransactionState';
import {
    UtxoTransactionStateFromJSON,
    UtxoTransactionStateFromJSONTyped,
    UtxoTransactionStateToJSON,
} from './UtxoTransactionState';

/**
 * 
 * @export
 * @interface UtxoTransactionStateChange
 */
export interface UtxoTransactionStateChange {
    /**
     * 
     * @type {Date}
     * @memberof UtxoTransactionStateChange
     */
    changedAt: Date;
    /**
     * 
     * @type {StateChangeReason}
     * @memberof UtxoTransactionStateChange
     */
    reason?: StateChangeReason;
    /**
     * 
     * @type {Array<PricedAsset>}
     * @memberof UtxoTransactionStateChange
     * @deprecated
     */
    assetPrices: Array<PricedAsset>;
    /**
     * 
     * @type {UtxoTransactionState}
     * @memberof UtxoTransactionStateChange
     */
    previousState?: UtxoTransactionState;
    /**
     * 
     * @type {UtxoTransactionState}
     * @memberof UtxoTransactionStateChange
     */
    newState: UtxoTransactionState;
}

/**
 * Check if a given object implements the UtxoTransactionStateChange interface.
 */
export function instanceOfUtxoTransactionStateChange(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "changedAt" in value;
    isInstance = isInstance && "assetPrices" in value;
    isInstance = isInstance && "newState" in value;

    return isInstance;
}

export function UtxoTransactionStateChangeFromJSON(json: any): UtxoTransactionStateChange {
    return UtxoTransactionStateChangeFromJSONTyped(json, false);
}

export function UtxoTransactionStateChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UtxoTransactionStateChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changedAt': (new Date(json['changed_at'])),
        'reason': !exists(json, 'reason') ? undefined : StateChangeReasonFromJSON(json['reason']),
        'assetPrices': ((json['asset_prices'] as Array<any>).map(PricedAssetFromJSON)),
        'previousState': !exists(json, 'previous_state') ? undefined : UtxoTransactionStateFromJSON(json['previous_state']),
        'newState': UtxoTransactionStateFromJSON(json['new_state']),
    };
}

export function UtxoTransactionStateChangeToJSON(value?: UtxoTransactionStateChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changed_at': (value.changedAt.toISOString()),
        'reason': StateChangeReasonToJSON(value.reason),
        'asset_prices': ((value.assetPrices as Array<any>).map(PricedAssetToJSON)),
        'previous_state': UtxoTransactionStateToJSON(value.previousState),
        'new_state': UtxoTransactionStateToJSON(value.newState),
    };
}

