/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
    EnrichedEvmAddressFromJSONTyped,
    EnrichedEvmAddressToJSON,
} from './EnrichedEvmAddress';
import type { Erc721Contract } from './Erc721Contract';
import {
    Erc721ContractFromJSON,
    Erc721ContractFromJSONTyped,
    Erc721ContractToJSON,
} from './Erc721Contract';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
} from './PricedAsset';

/**
 * 
 * @export
 * @interface Erc721AllowanceForAllChange
 */
export interface Erc721AllowanceForAllChange {
    /**
     * 
     * @type {PricedAsset}
     * @memberof Erc721AllowanceForAllChange
     */
    pricedAsset: PricedAsset;
    /**
     * 
     * @type {string}
     * @memberof Erc721AllowanceForAllChange
     */
    type: Erc721AllowanceForAllChangeTypeEnum;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof Erc721AllowanceForAllChange
     */
    owner: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof Erc721AllowanceForAllChange
     */
    operator: EnrichedEvmAddress;
    /**
     * 
     * @type {boolean}
     * @memberof Erc721AllowanceForAllChange
     */
    approved: boolean;
    /**
     * 
     * @type {Erc721Contract}
     * @memberof Erc721AllowanceForAllChange
     */
    tokenContract: Erc721Contract;
}


/**
 * @export
 */
export const Erc721AllowanceForAllChangeTypeEnum = {
    erc721ForAll: 'erc721_for_all'
} as const;
export type Erc721AllowanceForAllChangeTypeEnum = typeof Erc721AllowanceForAllChangeTypeEnum[keyof typeof Erc721AllowanceForAllChangeTypeEnum];


/**
 * Check if a given object implements the Erc721AllowanceForAllChange interface.
 */
export function instanceOfErc721AllowanceForAllChange(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pricedAsset" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "operator" in value;
    isInstance = isInstance && "approved" in value;
    isInstance = isInstance && "tokenContract" in value;

    return isInstance;
}

export function Erc721AllowanceForAllChangeFromJSON(json: any): Erc721AllowanceForAllChange {
    return Erc721AllowanceForAllChangeFromJSONTyped(json, false);
}

export function Erc721AllowanceForAllChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Erc721AllowanceForAllChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pricedAsset': PricedAssetFromJSON(json['priced_asset']),
        'type': json['type'],
        'owner': EnrichedEvmAddressFromJSON(json['owner']),
        'operator': EnrichedEvmAddressFromJSON(json['operator']),
        'approved': json['approved'],
        'tokenContract': Erc721ContractFromJSON(json['token_contract']),
    };
}

export function Erc721AllowanceForAllChangeToJSON(value?: Erc721AllowanceForAllChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'priced_asset': PricedAssetToJSON(value.pricedAsset),
        'type': value.type,
        'owner': EnrichedEvmAddressToJSON(value.owner),
        'operator': EnrichedEvmAddressToJSON(value.operator),
        'approved': value.approved,
        'token_contract': Erc721ContractToJSON(value.tokenContract),
    };
}

