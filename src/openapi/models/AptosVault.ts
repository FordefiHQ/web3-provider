/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AptosVaultMetadataValue } from './AptosVaultMetadataValue';
import {
    AptosVaultMetadataValueFromJSON,
    AptosVaultMetadataValueFromJSONTyped,
    AptosVaultMetadataValueToJSON,
} from './AptosVaultMetadataValue';
import type { AptosVaultPendingVaultGroupAction } from './AptosVaultPendingVaultGroupAction';
import {
    AptosVaultPendingVaultGroupActionFromJSON,
    AptosVaultPendingVaultGroupActionFromJSONTyped,
    AptosVaultPendingVaultGroupActionToJSON,
} from './AptosVaultPendingVaultGroupAction';
import type { EndUserRef } from './EndUserRef';
import {
    EndUserRefFromJSON,
    EndUserRefFromJSONTyped,
    EndUserRefToJSON,
} from './EndUserRef';
import type { KeysetRef } from './KeysetRef';
import {
    KeysetRefFromJSON,
    KeysetRefFromJSONTyped,
    KeysetRefToJSON,
} from './KeysetRef';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';
import type { VaultDerivationInfo } from './VaultDerivationInfo';
import {
    VaultDerivationInfoFromJSON,
    VaultDerivationInfoFromJSONTyped,
    VaultDerivationInfoToJSON,
} from './VaultDerivationInfo';
import type { VaultGroupRef } from './VaultGroupRef';
import {
    VaultGroupRefFromJSON,
    VaultGroupRefFromJSONTyped,
    VaultGroupRefToJSON,
} from './VaultGroupRef';
import type { VaultState } from './VaultState';
import {
    VaultStateFromJSON,
    VaultStateFromJSONTyped,
    VaultStateToJSON,
} from './VaultState';

/**
 * 
 * @export
 * @interface AptosVault
 */
export interface AptosVault {
    /**
     * 
     * @type {string}
     * @memberof AptosVault
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof AptosVault
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof AptosVault
     */
    modifiedAt: Date;
    /**
     * 
     * @type {{ [key: string]: AptosVaultMetadataValue | undefined; }}
     * @memberof AptosVault
     */
    metadata?: { [key: string]: AptosVaultMetadataValue | undefined; };
    /**
     * 
     * @type {string}
     * @memberof AptosVault
     */
    name: string;
    /**
     * 
     * @type {UserRef}
     * @memberof AptosVault
     */
    createdBy: UserRef;
    /**
     * 
     * @type {VaultGroupRef}
     * @memberof AptosVault
     */
    vaultGroup: VaultGroupRef;
    /**
     * 
     * @type {AptosVaultPendingVaultGroupAction}
     * @memberof AptosVault
     */
    pendingVaultGroupAction?: AptosVaultPendingVaultGroupAction;
    /**
     * 
     * @type {VaultState}
     * @memberof AptosVault
     */
    state: VaultState;
    /**
     * 
     * @type {string}
     * @memberof AptosVault
     * @deprecated
     */
    derivationPath: string;
    /**
     * 
     * @type {string}
     * @memberof AptosVault
     */
    publicKeyCompressed: string;
    /**
     * 
     * @type {VaultDerivationInfo}
     * @memberof AptosVault
     */
    derivationInfo: VaultDerivationInfo;
    /**
     * 
     * @type {KeysetRef}
     * @memberof AptosVault
     */
    keyset: KeysetRef;
    /**
     * 
     * @type {EndUserRef}
     * @memberof AptosVault
     */
    keyHolder?: EndUserRef;
    /**
     * 
     * @type {string}
     * @memberof AptosVault
     */
    type: AptosVaultTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AptosVault
     */
    address: string;
}


/**
 * @export
 */
export const AptosVaultTypeEnum = {
    aptos: 'aptos'
} as const;
export type AptosVaultTypeEnum = typeof AptosVaultTypeEnum[keyof typeof AptosVaultTypeEnum];


/**
 * Check if a given object implements the AptosVault interface.
 */
export function instanceOfAptosVault(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "vaultGroup" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "derivationPath" in value;
    isInstance = isInstance && "publicKeyCompressed" in value;
    isInstance = isInstance && "derivationInfo" in value;
    isInstance = isInstance && "keyset" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function AptosVaultFromJSON(json: any): AptosVault {
    return AptosVaultFromJSONTyped(json, false);
}

export function AptosVaultFromJSONTyped(json: any, ignoreDiscriminator: boolean): AptosVault {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'metadata': !exists(json, 'metadata') ? undefined : (mapValues(json['metadata'], AptosVaultMetadataValueFromJSON)),
        'name': json['name'],
        'createdBy': UserRefFromJSON(json['created_by']),
        'vaultGroup': VaultGroupRefFromJSON(json['vault_group']),
        'pendingVaultGroupAction': !exists(json, 'pending_vault_group_action') ? undefined : AptosVaultPendingVaultGroupActionFromJSON(json['pending_vault_group_action']),
        'state': VaultStateFromJSON(json['state']),
        'derivationPath': json['derivation_path'],
        'publicKeyCompressed': json['public_key_compressed'],
        'derivationInfo': VaultDerivationInfoFromJSON(json['derivation_info']),
        'keyset': KeysetRefFromJSON(json['keyset']),
        'keyHolder': !exists(json, 'key_holder') ? undefined : EndUserRefFromJSON(json['key_holder']),
        'type': json['type'],
        'address': json['address'],
    };
}

export function AptosVaultToJSON(value?: AptosVault | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'metadata': value.metadata === undefined ? undefined : (mapValues(value.metadata, AptosVaultMetadataValueToJSON)),
        'name': value.name,
        'created_by': UserRefToJSON(value.createdBy),
        'vault_group': VaultGroupRefToJSON(value.vaultGroup),
        'pending_vault_group_action': AptosVaultPendingVaultGroupActionToJSON(value.pendingVaultGroupAction),
        'state': VaultStateToJSON(value.state),
        'derivation_path': value.derivationPath,
        'public_key_compressed': value.publicKeyCompressed,
        'derivation_info': VaultDerivationInfoToJSON(value.derivationInfo),
        'keyset': KeysetRefToJSON(value.keyset),
        'key_holder': EndUserRefToJSON(value.keyHolder),
        'type': value.type,
        'address': value.address,
    };
}

