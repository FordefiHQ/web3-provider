/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RuleActionRequest } from './RuleActionRequest';
import {
    RuleActionRequestFromJSON,
    RuleActionRequestFromJSONTyped,
    RuleActionRequestToJSON,
} from './RuleActionRequest';
import type { TransactionRuleConditionsRequest } from './TransactionRuleConditionsRequest';
import {
    TransactionRuleConditionsRequestFromJSON,
    TransactionRuleConditionsRequestFromJSONTyped,
    TransactionRuleConditionsRequestToJSON,
} from './TransactionRuleConditionsRequest';

/**
 * 
 * @export
 * @interface TransactionRuleRequest
 */
export interface TransactionRuleRequest {
    /**
     * 
     * @type {string}
     * @memberof TransactionRuleRequest
     */
    existingId?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionRuleRequest
     */
    name: string;
    /**
     * 
     * @type {TransactionRuleConditionsRequest}
     * @memberof TransactionRuleRequest
     */
    conditions?: TransactionRuleConditionsRequest;
    /**
     * 
     * @type {RuleActionRequest}
     * @memberof TransactionRuleRequest
     */
    action: RuleActionRequest;
}

/**
 * Check if a given object implements the TransactionRuleRequest interface.
 */
export function instanceOfTransactionRuleRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "action" in value;

    return isInstance;
}

export function TransactionRuleRequestFromJSON(json: any): TransactionRuleRequest {
    return TransactionRuleRequestFromJSONTyped(json, false);
}

export function TransactionRuleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRuleRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'existingId': !exists(json, 'existing_id') ? undefined : json['existing_id'],
        'name': json['name'],
        'conditions': !exists(json, 'conditions') ? undefined : TransactionRuleConditionsRequestFromJSON(json['conditions']),
        'action': RuleActionRequestFromJSON(json['action']),
    };
}

export function TransactionRuleRequestToJSON(value?: TransactionRuleRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'existing_id': value.existingId,
        'name': value.name,
        'conditions': TransactionRuleConditionsRequestToJSON(value.conditions),
        'action': RuleActionRequestToJSON(value.action),
    };
}

