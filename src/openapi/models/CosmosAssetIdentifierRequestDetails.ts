/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    CosmosNativeAssetIdentifierRequest,
    instanceOfCosmosNativeAssetIdentifierRequest,
    CosmosNativeAssetIdentifierRequestFromJSON,
    CosmosNativeAssetIdentifierRequestFromJSONTyped,
    CosmosNativeAssetIdentifierRequestToJSON,
} from './CosmosNativeAssetIdentifierRequest';
import {
    CosmosTokenAssetIdentifierRequest,
    instanceOfCosmosTokenAssetIdentifierRequest,
    CosmosTokenAssetIdentifierRequestFromJSON,
    CosmosTokenAssetIdentifierRequestFromJSONTyped,
    CosmosTokenAssetIdentifierRequestToJSON,
} from './CosmosTokenAssetIdentifierRequest';

/**
 * @type CosmosAssetIdentifierRequestDetails
 * 
 * @export
 */
export type CosmosAssetIdentifierRequestDetails = { type: 'native' } & CosmosNativeAssetIdentifierRequest | { type: 'token' } & CosmosTokenAssetIdentifierRequest;

export function CosmosAssetIdentifierRequestDetailsFromJSON(json: any): CosmosAssetIdentifierRequestDetails {
    return CosmosAssetIdentifierRequestDetailsFromJSONTyped(json, false);
}

export function CosmosAssetIdentifierRequestDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosAssetIdentifierRequestDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'native':
            return {...CosmosNativeAssetIdentifierRequestFromJSONTyped(json, true), type: 'native'};
        case 'token':
            return {...CosmosTokenAssetIdentifierRequestFromJSONTyped(json, true), type: 'token'};
        default:
            throw new Error(`No variant of CosmosAssetIdentifierRequestDetails exists with 'type=${json['type']}'`);
    }
}

export function CosmosAssetIdentifierRequestDetailsToJSON(value?: CosmosAssetIdentifierRequestDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'native':
            return CosmosNativeAssetIdentifierRequestToJSON(value);
        case 'token':
            return CosmosTokenAssetIdentifierRequestToJSON(value);
        default:
            throw new Error(`No variant of CosmosAssetIdentifierRequestDetails exists with 'type=${value['type']}'`);
    }

}

