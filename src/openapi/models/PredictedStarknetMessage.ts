/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AmlPolicyMatchOutgoing } from './AmlPolicyMatchOutgoing';
import {
    AmlPolicyMatchOutgoingFromJSON,
    AmlPolicyMatchOutgoingFromJSONTyped,
    AmlPolicyMatchOutgoingToJSON,
    AmlPolicyMatchOutgoingToJSONTyped,
} from './AmlPolicyMatchOutgoing';
import type { EnrichedStarknetChain } from './EnrichedStarknetChain';
import {
    EnrichedStarknetChainFromJSON,
    EnrichedStarknetChainFromJSONTyped,
    EnrichedStarknetChainToJSON,
    EnrichedStarknetChainToJSONTyped,
} from './EnrichedStarknetChain';
import type { TransactionRisk } from './TransactionRisk';
import {
    TransactionRiskFromJSON,
    TransactionRiskFromJSONTyped,
    TransactionRiskToJSON,
    TransactionRiskToJSONTyped,
} from './TransactionRisk';
import type { StarknetMessageType } from './StarknetMessageType';
import {
    StarknetMessageTypeFromJSON,
    StarknetMessageTypeFromJSONTyped,
    StarknetMessageTypeToJSON,
    StarknetMessageTypeToJSONTyped,
} from './StarknetMessageType';
import type { EnrichedStarknetAddress } from './EnrichedStarknetAddress';
import {
    EnrichedStarknetAddressFromJSON,
    EnrichedStarknetAddressFromJSONTyped,
    EnrichedStarknetAddressToJSON,
    EnrichedStarknetAddressToJSONTyped,
} from './EnrichedStarknetAddress';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
    ApprovalRequestToJSONTyped,
} from './ApprovalRequest';
import type { PolicyMatch } from './PolicyMatch';
import {
    PolicyMatchFromJSON,
    PolicyMatchFromJSONTyped,
    PolicyMatchToJSON,
    PolicyMatchToJSONTyped,
} from './PolicyMatch';

/**
 * 
 * @export
 * @interface PredictedStarknetMessage
 */
export interface PredictedStarknetMessage {
    /**
     * 
     * @type {AmlPolicyMatchOutgoing}
     * @memberof PredictedStarknetMessage
     */
    amlPolicyMatch?: AmlPolicyMatchOutgoing;
    /**
     * 
     * @type {PolicyMatch}
     * @memberof PredictedStarknetMessage
     */
    policyMatch: PolicyMatch;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof PredictedStarknetMessage
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {Array<TransactionRisk>}
     * @memberof PredictedStarknetMessage
     */
    risks: Array<TransactionRisk>;
    /**
     * 
     * @type {string}
     * @memberof PredictedStarknetMessage
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof PredictedStarknetMessage
     */
    type: PredictedStarknetMessageTypeEnum;
    /**
     * 
     * @type {EnrichedStarknetChain}
     * @memberof PredictedStarknetMessage
     */
    chain: EnrichedStarknetChain;
    /**
     * 
     * @type {EnrichedStarknetAddress}
     * @memberof PredictedStarknetMessage
     */
    sender: EnrichedStarknetAddress;
    /**
     * 
     * @type {StarknetMessageType}
     * @memberof PredictedStarknetMessage
     */
    starknetMessageType: StarknetMessageType;
    /**
     * 
     * @type {string}
     * @memberof PredictedStarknetMessage
     */
    messageToDisplay: string;
}


/**
 * @export
 */
export const PredictedStarknetMessageTypeEnum = {
    starknetMessage: 'starknet_message'
} as const;
export type PredictedStarknetMessageTypeEnum = typeof PredictedStarknetMessageTypeEnum[keyof typeof PredictedStarknetMessageTypeEnum];


/**
 * Check if a given object implements the PredictedStarknetMessage interface.
 */
export function instanceOfPredictedStarknetMessage(value: object): value is PredictedStarknetMessage {
    if (!('policyMatch' in value) || value['policyMatch'] === undefined) return false;
    if (!('risks' in value) || value['risks'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('starknetMessageType' in value) || value['starknetMessageType'] === undefined) return false;
    if (!('messageToDisplay' in value) || value['messageToDisplay'] === undefined) return false;
    return true;
}

export function PredictedStarknetMessageFromJSON(json: any): PredictedStarknetMessage {
    return PredictedStarknetMessageFromJSONTyped(json, false);
}

export function PredictedStarknetMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): PredictedStarknetMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'amlPolicyMatch': json['aml_policy_match'] == null ? undefined : AmlPolicyMatchOutgoingFromJSON(json['aml_policy_match']),
        'policyMatch': PolicyMatchFromJSON(json['policy_match']),
        'approvalRequest': json['approval_request'] == null ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'risks': ((json['risks'] as Array<any>).map(TransactionRiskFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'type': json['type'],
        'chain': EnrichedStarknetChainFromJSON(json['chain']),
        'sender': EnrichedStarknetAddressFromJSON(json['sender']),
        'starknetMessageType': StarknetMessageTypeFromJSON(json['starknet_message_type']),
        'messageToDisplay': json['message_to_display'],
    };
}

export function PredictedStarknetMessageToJSON(json: any): PredictedStarknetMessage {
    return PredictedStarknetMessageToJSONTyped(json, false);
}

export function PredictedStarknetMessageToJSONTyped(value?: PredictedStarknetMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aml_policy_match': AmlPolicyMatchOutgoingToJSON(value['amlPolicyMatch']),
        'policy_match': PolicyMatchToJSON(value['policyMatch']),
        'approval_request': ApprovalRequestToJSON(value['approvalRequest']),
        'risks': ((value['risks'] as Array<any>).map(TransactionRiskToJSON)),
        'note': value['note'],
        'type': value['type'],
        'chain': EnrichedStarknetChainToJSON(value['chain']),
        'sender': EnrichedStarknetAddressToJSON(value['sender']),
        'starknet_message_type': StarknetMessageTypeToJSON(value['starknetMessageType']),
        'message_to_display': value['messageToDisplay'],
    };
}

