/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EncryptedShare } from './EncryptedShare';
import {
    EncryptedShareFromJSON,
    EncryptedShareFromJSONTyped,
    EncryptedShareToJSON,
    EncryptedShareToJSONTyped,
} from './EncryptedShare';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
    KeyTypeToJSONTyped,
} from './KeyType';

/**
 * 
 * @export
 * @interface GetEncryptedOrganizationStoreResponse
 */
export interface GetEncryptedOrganizationStoreResponse {
    /**
     * 
     * @type {Array<KeyType>}
     * @memberof GetEncryptedOrganizationStoreResponse
     */
    desiredKeyTypes?: Array<KeyType>;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     * @deprecated
     */
    encryptedShareEcdsa: string;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     * @deprecated
     */
    encryptedShareEddsa: string;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     * @deprecated
     */
    encryptedShareEcdsaStark: string;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     * @deprecated
     */
    encryptedShareSchnorrSecp256k1: string;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     */
    encryptedOrgKey?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     */
    encryptedOrgKeyDeviceBackup?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEncryptedOrganizationStoreResponse
     */
    encryptedDeviceRegistrationKey?: string;
    /**
     * 
     * @type {Array<EncryptedShare>}
     * @memberof GetEncryptedOrganizationStoreResponse
     */
    encryptedShares: Array<EncryptedShare>;
}

/**
 * Check if a given object implements the GetEncryptedOrganizationStoreResponse interface.
 */
export function instanceOfGetEncryptedOrganizationStoreResponse(value: object): value is GetEncryptedOrganizationStoreResponse {
    if (!('encryptedShareEcdsa' in value) || value['encryptedShareEcdsa'] === undefined) return false;
    if (!('encryptedShareEddsa' in value) || value['encryptedShareEddsa'] === undefined) return false;
    if (!('encryptedShareEcdsaStark' in value) || value['encryptedShareEcdsaStark'] === undefined) return false;
    if (!('encryptedShareSchnorrSecp256k1' in value) || value['encryptedShareSchnorrSecp256k1'] === undefined) return false;
    if (!('encryptedShares' in value) || value['encryptedShares'] === undefined) return false;
    return true;
}

export function GetEncryptedOrganizationStoreResponseFromJSON(json: any): GetEncryptedOrganizationStoreResponse {
    return GetEncryptedOrganizationStoreResponseFromJSONTyped(json, false);
}

export function GetEncryptedOrganizationStoreResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetEncryptedOrganizationStoreResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'desiredKeyTypes': json['desired_key_types'] == null ? undefined : ((json['desired_key_types'] as Array<any>).map(KeyTypeFromJSON)),
        'encryptedShareEcdsa': json['encrypted_share_ecdsa'],
        'encryptedShareEddsa': json['encrypted_share_eddsa'],
        'encryptedShareEcdsaStark': json['encrypted_share_ecdsa_stark'],
        'encryptedShareSchnorrSecp256k1': json['encrypted_share_schnorr_secp256k1'],
        'encryptedOrgKey': json['encrypted_org_key'] == null ? undefined : json['encrypted_org_key'],
        'encryptedOrgKeyDeviceBackup': json['encrypted_org_key_device_backup'] == null ? undefined : json['encrypted_org_key_device_backup'],
        'encryptedDeviceRegistrationKey': json['encrypted_device_registration_key'] == null ? undefined : json['encrypted_device_registration_key'],
        'encryptedShares': ((json['encrypted_shares'] as Array<any>).map(EncryptedShareFromJSON)),
    };
}

export function GetEncryptedOrganizationStoreResponseToJSON(json: any): GetEncryptedOrganizationStoreResponse {
    return GetEncryptedOrganizationStoreResponseToJSONTyped(json, false);
}

export function GetEncryptedOrganizationStoreResponseToJSONTyped(value?: GetEncryptedOrganizationStoreResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'desired_key_types': value['desiredKeyTypes'] == null ? undefined : ((value['desiredKeyTypes'] as Array<any>).map(KeyTypeToJSON)),
        'encrypted_share_ecdsa': value['encryptedShareEcdsa'],
        'encrypted_share_eddsa': value['encryptedShareEddsa'],
        'encrypted_share_ecdsa_stark': value['encryptedShareEcdsaStark'],
        'encrypted_share_schnorr_secp256k1': value['encryptedShareSchnorrSecp256k1'],
        'encrypted_org_key': value['encryptedOrgKey'],
        'encrypted_org_key_device_backup': value['encryptedOrgKeyDeviceBackup'],
        'encrypted_device_registration_key': value['encryptedDeviceRegistrationKey'],
        'encrypted_shares': ((value['encryptedShares'] as Array<any>).map(EncryptedShareToJSON)),
    };
}

