/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ProofType,
    instanceOfProofType,
    ProofTypeFromJSON,
    ProofTypeFromJSONTyped,
    ProofTypeToJSON,
} from './ProofType';
import {
    ProverErrorType,
    instanceOfProverErrorType,
    ProverErrorTypeFromJSON,
    ProverErrorTypeFromJSONTyped,
    ProverErrorTypeToJSON,
} from './ProverErrorType';

/**
 * @type ProofProverResult
 * 
 * @export
 */
export type ProofProverResult = { type: 'error' } & ProverErrorType | { type: 'proof' } & ProofType;

export function ProofProverResultFromJSON(json: any): ProofProverResult {
    return ProofProverResultFromJSONTyped(json, false);
}

export function ProofProverResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProofProverResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'error':
            return {...ProverErrorTypeFromJSONTyped(json, true), type: 'error'};
        case 'proof':
            return {...ProofTypeFromJSONTyped(json, true), type: 'proof'};
        default:
            throw new Error(`No variant of ProofProverResult exists with 'type=${json['type']}'`);
    }
}

export function ProofProverResultToJSON(value?: ProofProverResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'error':
            return ProverErrorTypeToJSON(value);
        case 'proof':
            return ProofTypeToJSON(value);
        default:
            throw new Error(`No variant of ProofProverResult exists with 'type=${value['type']}'`);
    }

}

