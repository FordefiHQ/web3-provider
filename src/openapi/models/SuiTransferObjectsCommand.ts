/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SuiCommandArgument } from './SuiCommandArgument';
import {
    SuiCommandArgumentFromJSON,
    SuiCommandArgumentFromJSONTyped,
    SuiCommandArgumentToJSON,
} from './SuiCommandArgument';

/**
 * 
 * @export
 * @interface SuiTransferObjectsCommand
 */
export interface SuiTransferObjectsCommand {
    /**
     * 
     * @type {string}
     * @memberof SuiTransferObjectsCommand
     */
    type: SuiTransferObjectsCommandTypeEnum;
    /**
     * 
     * @type {Array<SuiCommandArgument>}
     * @memberof SuiTransferObjectsCommand
     */
    objects: Array<SuiCommandArgument>;
    /**
     * 
     * @type {SuiCommandArgument}
     * @memberof SuiTransferObjectsCommand
     */
    address: SuiCommandArgument;
}


/**
 * @export
 */
export const SuiTransferObjectsCommandTypeEnum = {
    transferObjects: 'transfer_objects'
} as const;
export type SuiTransferObjectsCommandTypeEnum = typeof SuiTransferObjectsCommandTypeEnum[keyof typeof SuiTransferObjectsCommandTypeEnum];


/**
 * Check if a given object implements the SuiTransferObjectsCommand interface.
 */
export function instanceOfSuiTransferObjectsCommand(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "objects" in value;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function SuiTransferObjectsCommandFromJSON(json: any): SuiTransferObjectsCommand {
    return SuiTransferObjectsCommandFromJSONTyped(json, false);
}

export function SuiTransferObjectsCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuiTransferObjectsCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'objects': ((json['objects'] as Array<any>).map(SuiCommandArgumentFromJSON)),
        'address': SuiCommandArgumentFromJSON(json['address']),
    };
}

export function SuiTransferObjectsCommandToJSON(value?: SuiTransferObjectsCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'objects': ((value.objects as Array<any>).map(SuiCommandArgumentToJSON)),
        'address': SuiCommandArgumentToJSON(value.address),
    };
}

