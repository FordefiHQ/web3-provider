/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';
import type { VaultGroupOwner } from './VaultGroupOwner';
import {
    VaultGroupOwnerFromJSON,
    VaultGroupOwnerFromJSONTyped,
    VaultGroupOwnerToJSON,
} from './VaultGroupOwner';
import type { VaultGroupPendingChangeRequestInfo } from './VaultGroupPendingChangeRequestInfo';
import {
    VaultGroupPendingChangeRequestInfoFromJSON,
    VaultGroupPendingChangeRequestInfoFromJSONTyped,
    VaultGroupPendingChangeRequestInfoToJSON,
} from './VaultGroupPendingChangeRequestInfo';
import type { VaultGroupPermissions } from './VaultGroupPermissions';
import {
    VaultGroupPermissionsFromJSON,
    VaultGroupPermissionsFromJSONTyped,
    VaultGroupPermissionsToJSON,
} from './VaultGroupPermissions';
import type { VaultGroupState } from './VaultGroupState';
import {
    VaultGroupStateFromJSON,
    VaultGroupStateFromJSONTyped,
    VaultGroupStateToJSON,
} from './VaultGroupState';

/**
 * 
 * @export
 * @interface CreateVaultGroupResponse
 */
export interface CreateVaultGroupResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateVaultGroupResponse
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CreateVaultGroupResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreateVaultGroupResponse
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof CreateVaultGroupResponse
     */
    name: string;
    /**
     * 
     * @type {UserRef}
     * @memberof CreateVaultGroupResponse
     */
    createdBy?: UserRef;
    /**
     * 
     * @type {number}
     * @memberof CreateVaultGroupResponse
     */
    vaultCount: number;
    /**
     * 
     * @type {VaultGroupPermissions}
     * @memberof CreateVaultGroupResponse
     */
    permissions: VaultGroupPermissions;
    /**
     * 
     * @type {VaultGroupOwner}
     * @memberof CreateVaultGroupResponse
     */
    owner: VaultGroupOwner;
    /**
     * 
     * @type {UserRef}
     * @memberof CreateVaultGroupResponse
     */
    modifiedBy?: UserRef;
    /**
     * 
     * @type {VaultGroupPendingChangeRequestInfo}
     * @memberof CreateVaultGroupResponse
     */
    pendingChangeRequest?: VaultGroupPendingChangeRequestInfo;
    /**
     * 
     * @type {VaultGroupState}
     * @memberof CreateVaultGroupResponse
     */
    state: VaultGroupState;
}

/**
 * Check if a given object implements the CreateVaultGroupResponse interface.
 */
export function instanceOfCreateVaultGroupResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "vaultCount" in value;
    isInstance = isInstance && "permissions" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function CreateVaultGroupResponseFromJSON(json: any): CreateVaultGroupResponse {
    return CreateVaultGroupResponseFromJSONTyped(json, false);
}

export function CreateVaultGroupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateVaultGroupResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'name': json['name'],
        'createdBy': !exists(json, 'created_by') ? undefined : UserRefFromJSON(json['created_by']),
        'vaultCount': json['vault_count'],
        'permissions': VaultGroupPermissionsFromJSON(json['permissions']),
        'owner': VaultGroupOwnerFromJSON(json['owner']),
        'modifiedBy': !exists(json, 'modified_by') ? undefined : UserRefFromJSON(json['modified_by']),
        'pendingChangeRequest': !exists(json, 'pending_change_request') ? undefined : VaultGroupPendingChangeRequestInfoFromJSON(json['pending_change_request']),
        'state': VaultGroupStateFromJSON(json['state']),
    };
}

export function CreateVaultGroupResponseToJSON(value?: CreateVaultGroupResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'name': value.name,
        'created_by': UserRefToJSON(value.createdBy),
        'vault_count': value.vaultCount,
        'permissions': VaultGroupPermissionsToJSON(value.permissions),
        'owner': VaultGroupOwnerToJSON(value.owner),
        'modified_by': UserRefToJSON(value.modifiedBy),
        'pending_change_request': VaultGroupPendingChangeRequestInfoToJSON(value.pendingChangeRequest),
        'state': VaultGroupStateToJSON(value.state),
    };
}

