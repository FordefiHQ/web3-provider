/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EvmChain } from './EvmChain';
import {
    EvmChainFromJSON,
    EvmChainFromJSONTyped,
    EvmChainToJSON,
} from './EvmChain';
import type { EvmMessageState } from './EvmMessageState';
import {
    EvmMessageStateFromJSON,
    EvmMessageStateFromJSONTyped,
    EvmMessageStateToJSON,
} from './EvmMessageState';
import type { EvmMessageType } from './EvmMessageType';
import {
    EvmMessageTypeFromJSON,
    EvmMessageTypeFromJSONTyped,
    EvmMessageTypeToJSON,
} from './EvmMessageType';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface WebhookEvmMessageStatusChangeEvent
 */
export interface WebhookEvmMessageStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookEvmMessageStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {string}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    type: WebhookEvmMessageStatusChangeEventTypeEnum;
    /**
     * 
     * @type {EvmMessageType}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    evmMessageType: EvmMessageType;
    /**
     * 
     * @type {EvmMessageState}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    state: EvmMessageState;
    /**
     * 
     * @type {EvmChain}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    chain: EvmChain;
}


/**
 * @export
 */
export const WebhookEvmMessageStatusChangeEventTypeEnum = {
    evmMessage: 'evm_message'
} as const;
export type WebhookEvmMessageStatusChangeEventTypeEnum = typeof WebhookEvmMessageStatusChangeEventTypeEnum[keyof typeof WebhookEvmMessageStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookEvmMessageStatusChangeEvent interface.
 */
export function instanceOfWebhookEvmMessageStatusChangeEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "isManagedTransaction" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "spamState" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "evmMessageType" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "chain" in value;

    return isInstance;
}

export function WebhookEvmMessageStatusChangeEventFromJSON(json: any): WebhookEvmMessageStatusChangeEvent {
    return WebhookEvmMessageStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookEvmMessageStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookEvmMessageStatusChangeEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'type': json['type'],
        'evmMessageType': EvmMessageTypeFromJSON(json['evm_message_type']),
        'state': EvmMessageStateFromJSON(json['state']),
        'chain': EvmChainFromJSON(json['chain']),
    };
}

export function WebhookEvmMessageStatusChangeEventToJSON(value?: WebhookEvmMessageStatusChangeEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_id': value.transactionId,
        'is_managed_transaction': value.isManagedTransaction,
        'direction': TransactionDirectionToJSON(value.direction),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'type': value.type,
        'evm_message_type': EvmMessageTypeToJSON(value.evmMessageType),
        'state': EvmMessageStateToJSON(value.state),
        'chain': EvmChainToJSON(value.chain),
    };
}

