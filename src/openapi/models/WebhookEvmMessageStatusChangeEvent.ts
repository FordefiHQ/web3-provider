/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { EvmChain } from './EvmChain';
import {
    EvmChainFromJSON,
    EvmChainFromJSONTyped,
    EvmChainToJSON,
    EvmChainToJSONTyped,
} from './EvmChain';
import type { EvmMessageType } from './EvmMessageType';
import {
    EvmMessageTypeFromJSON,
    EvmMessageTypeFromJSONTyped,
    EvmMessageTypeToJSON,
    EvmMessageTypeToJSONTyped,
} from './EvmMessageType';
import type { NonPushableTransactionState } from './NonPushableTransactionState';
import {
    NonPushableTransactionStateFromJSON,
    NonPushableTransactionStateFromJSONTyped,
    NonPushableTransactionStateToJSON,
    NonPushableTransactionStateToJSONTyped,
} from './NonPushableTransactionState';

/**
 * 
 * @export
 * @interface WebhookEvmMessageStatusChangeEvent
 */
export interface WebhookEvmMessageStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookEvmMessageStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {NonPushableTransactionState}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    state: NonPushableTransactionState;
    /**
     * 
     * @type {string}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    type: WebhookEvmMessageStatusChangeEventTypeEnum;
    /**
     * 
     * @type {EvmMessageType}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    evmMessageType: EvmMessageType;
    /**
     * 
     * @type {EvmChain}
     * @memberof WebhookEvmMessageStatusChangeEvent
     */
    chain: EvmChain;
}


/**
 * @export
 */
export const WebhookEvmMessageStatusChangeEventTypeEnum = {
    evmMessage: 'evm_message'
} as const;
export type WebhookEvmMessageStatusChangeEventTypeEnum = typeof WebhookEvmMessageStatusChangeEventTypeEnum[keyof typeof WebhookEvmMessageStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookEvmMessageStatusChangeEvent interface.
 */
export function instanceOfWebhookEvmMessageStatusChangeEvent(value: object): value is WebhookEvmMessageStatusChangeEvent {
    if (!('transactionId' in value) || value['transactionId'] === undefined) return false;
    if (!('isManagedTransaction' in value) || value['isManagedTransaction'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('spamState' in value) || value['spamState'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('evmMessageType' in value) || value['evmMessageType'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    return true;
}

export function WebhookEvmMessageStatusChangeEventFromJSON(json: any): WebhookEvmMessageStatusChangeEvent {
    return WebhookEvmMessageStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookEvmMessageStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookEvmMessageStatusChangeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'state': NonPushableTransactionStateFromJSON(json['state']),
        'type': json['type'],
        'evmMessageType': EvmMessageTypeFromJSON(json['evm_message_type']),
        'chain': EvmChainFromJSON(json['chain']),
    };
}

export function WebhookEvmMessageStatusChangeEventToJSON(json: any): WebhookEvmMessageStatusChangeEvent {
    return WebhookEvmMessageStatusChangeEventToJSONTyped(json, false);
}

export function WebhookEvmMessageStatusChangeEventToJSONTyped(value?: WebhookEvmMessageStatusChangeEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transaction_id': value['transactionId'],
        'is_managed_transaction': value['isManagedTransaction'],
        'direction': TransactionDirectionToJSON(value['direction']),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'state': NonPushableTransactionStateToJSON(value['state']),
        'type': value['type'],
        'evm_message_type': EvmMessageTypeToJSON(value['evmMessageType']),
        'chain': EvmChainToJSON(value['chain']),
    };
}

