/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
    EnrichedTonAddressFromJSONTyped,
    EnrichedTonAddressToJSON,
    EnrichedTonAddressToJSONTyped,
} from './EnrichedTonAddress';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
    ManagedTransactionDataToJSONTyped,
} from './ManagedTransactionData';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSON,
    EnrichedTonChainFromJSONTyped,
    EnrichedTonChainToJSON,
    EnrichedTonChainToJSONTyped,
} from './EnrichedTonChain';
import type { PredictedTonTransactionTonTransactionTypeDetails } from './PredictedTonTransactionTonTransactionTypeDetails';
import {
    PredictedTonTransactionTonTransactionTypeDetailsFromJSON,
    PredictedTonTransactionTonTransactionTypeDetailsFromJSONTyped,
    PredictedTonTransactionTonTransactionTypeDetailsToJSON,
    PredictedTonTransactionTonTransactionTypeDetailsToJSONTyped,
} from './PredictedTonTransactionTonTransactionTypeDetails';
import type { PushableTransactionStateChange } from './PushableTransactionStateChange';
import {
    PushableTransactionStateChangeFromJSON,
    PushableTransactionStateChangeFromJSONTyped,
    PushableTransactionStateChangeToJSON,
    PushableTransactionStateChangeToJSONTyped,
} from './PushableTransactionStateChange';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
    PushableTransactionStateFromJSONTyped,
    PushableTransactionStateToJSON,
    PushableTransactionStateToJSONTyped,
} from './PushableTransactionState';
import type { TonTransactionResult } from './TonTransactionResult';
import {
    TonTransactionResultFromJSON,
    TonTransactionResultFromJSONTyped,
    TonTransactionResultToJSON,
    TonTransactionResultToJSONTyped,
} from './TonTransactionResult';
import type { AmlPolicyMatchIncoming } from './AmlPolicyMatchIncoming';
import {
    AmlPolicyMatchIncomingFromJSON,
    AmlPolicyMatchIncomingFromJSONTyped,
    AmlPolicyMatchIncomingToJSON,
    AmlPolicyMatchIncomingToJSONTyped,
} from './AmlPolicyMatchIncoming';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
    SignatureToJSONTyped,
} from './Signature';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
    SimulationStatusResultToJSONTyped,
} from './SimulationStatusResult';
import type { TonBlock } from './TonBlock';
import {
    TonBlockFromJSON,
    TonBlockFromJSONTyped,
    TonBlockToJSON,
    TonBlockToJSONTyped,
} from './TonBlock';
import type { AmlResults } from './AmlResults';
import {
    AmlResultsFromJSON,
    AmlResultsFromJSONTyped,
    AmlResultsToJSON,
    AmlResultsToJSONTyped,
} from './AmlResults';
import type { TonTransactionPayload } from './TonTransactionPayload';
import {
    TonTransactionPayloadFromJSON,
    TonTransactionPayloadFromJSONTyped,
    TonTransactionPayloadToJSON,
    TonTransactionPayloadToJSONTyped,
} from './TonTransactionPayload';

/**
 * 
 * @export
 * @interface TonTransaction
 */
export interface TonTransaction {
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TonTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TonTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof TonTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof TonTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof TonTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof TonTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof TonTransaction
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof TonTransaction
     */
    state: PushableTransactionState;
    /**
     * 
     * @type {Array<PushableTransactionStateChange>}
     * @memberof TonTransaction
     */
    stateChanges: Array<PushableTransactionStateChange>;
    /**
     * 
     * @type {AmlResults}
     * @memberof TonTransaction
     */
    amlResults?: AmlResults;
    /**
     * 
     * @type {AmlPolicyMatchIncoming}
     * @memberof TonTransaction
     */
    incomingAmlPolicyMatch?: AmlPolicyMatchIncoming;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    type: TonTransactionTypeEnum;
    /**
     * 
     * @type {PredictedTonTransactionTonTransactionTypeDetails}
     * @memberof TonTransaction
     */
    tonTransactionTypeDetails: PredictedTonTransactionTonTransactionTypeDetails;
    /**
     * 
     * @type {EnrichedTonChain}
     * @memberof TonTransaction
     */
    chain: EnrichedTonChain;
    /**
     * 
     * @type {number}
     * @memberof TonTransaction
     */
    nonce?: number;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonTransaction
     */
    sender: EnrichedTonAddress;
    /**
     * 
     * @type {TonTransactionPayload}
     * @memberof TonTransaction
     */
    payload: TonTransactionPayload;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    hash?: string;
    /**
     * 
     * @type {TonBlock}
     * @memberof TonTransaction
     */
    block?: TonBlock;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    serializedSignedTransaction?: string;
    /**
     * 
     * @type {TonTransactionResult}
     * @memberof TonTransaction
     */
    expectedResult?: TonTransactionResult;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof TonTransaction
     */
    simulationStatusResult?: SimulationStatusResult;
    /**
     * 
     * @type {TonTransactionResult}
     * @memberof TonTransaction
     */
    minedResult?: TonTransactionResult;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    explorerUrl?: string;
}


/**
 * @export
 */
export const TonTransactionTypeEnum = {
    tonTransaction: 'ton_transaction'
} as const;
export type TonTransactionTypeEnum = typeof TonTransactionTypeEnum[keyof typeof TonTransactionTypeEnum];


/**
 * Check if a given object implements the TonTransaction interface.
 */
export function instanceOfTonTransaction(value: object): value is TonTransaction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('signatures' in value) || value['signatures'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChanges' in value) || value['stateChanges'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('tonTransactionTypeDetails' in value) || value['tonTransactionTypeDetails'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('payload' in value) || value['payload'] === undefined) return false;
    return true;
}

export function TonTransactionFromJSON(json: any): TonTransaction {
    return TonTransactionFromJSONTyped(json, false);
}

export function TonTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TonTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': PushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(PushableTransactionStateChangeFromJSON)),
        'amlResults': json['aml_results'] == null ? undefined : AmlResultsFromJSON(json['aml_results']),
        'incomingAmlPolicyMatch': json['incoming_aml_policy_match'] == null ? undefined : AmlPolicyMatchIncomingFromJSON(json['incoming_aml_policy_match']),
        'type': json['type'],
        'tonTransactionTypeDetails': PredictedTonTransactionTonTransactionTypeDetailsFromJSON(json['ton_transaction_type_details']),
        'chain': EnrichedTonChainFromJSON(json['chain']),
        'nonce': json['nonce'] == null ? undefined : json['nonce'],
        'sender': EnrichedTonAddressFromJSON(json['sender']),
        'payload': TonTransactionPayloadFromJSON(json['payload']),
        'hash': json['hash'] == null ? undefined : json['hash'],
        'block': json['block'] == null ? undefined : TonBlockFromJSON(json['block']),
        'serializedSignedTransaction': json['serialized_signed_transaction'] == null ? undefined : json['serialized_signed_transaction'],
        'expectedResult': json['expected_result'] == null ? undefined : TonTransactionResultFromJSON(json['expected_result']),
        'simulationStatusResult': json['simulation_status_result'] == null ? undefined : SimulationStatusResultFromJSON(json['simulation_status_result']),
        'minedResult': json['mined_result'] == null ? undefined : TonTransactionResultFromJSON(json['mined_result']),
        'explorerUrl': json['explorer_url'] == null ? undefined : json['explorer_url'],
    };
}

export function TonTransactionToJSON(json: any): TonTransaction {
    return TonTransactionToJSONTyped(json, false);
}

export function TonTransactionToJSONTyped(value?: TonTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value['managedTransactionData']),
        'signatures': ((value['signatures'] as Array<any>).map(SignatureToJSON)),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'direction': TransactionDirectionToJSON(value['direction']),
        'signed_externally': value['signedExternally'],
        'state': PushableTransactionStateToJSON(value['state']),
        'state_changes': ((value['stateChanges'] as Array<any>).map(PushableTransactionStateChangeToJSON)),
        'aml_results': AmlResultsToJSON(value['amlResults']),
        'incoming_aml_policy_match': AmlPolicyMatchIncomingToJSON(value['incomingAmlPolicyMatch']),
        'type': value['type'],
        'ton_transaction_type_details': PredictedTonTransactionTonTransactionTypeDetailsToJSON(value['tonTransactionTypeDetails']),
        'chain': EnrichedTonChainToJSON(value['chain']),
        'nonce': value['nonce'],
        'sender': EnrichedTonAddressToJSON(value['sender']),
        'payload': TonTransactionPayloadToJSON(value['payload']),
        'hash': value['hash'],
        'block': TonBlockToJSON(value['block']),
        'serialized_signed_transaction': value['serializedSignedTransaction'],
        'expected_result': TonTransactionResultToJSON(value['expectedResult']),
        'simulation_status_result': SimulationStatusResultToJSON(value['simulationStatusResult']),
        'mined_result': TonTransactionResultToJSON(value['minedResult']),
        'explorer_url': value['explorerUrl'],
    };
}

