/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
    EnrichedTonAddressFromJSONTyped,
    EnrichedTonAddressToJSON,
} from './EnrichedTonAddress';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSON,
    EnrichedTonChainFromJSONTyped,
    EnrichedTonChainToJSON,
} from './EnrichedTonChain';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
} from './ManagedTransactionData';
import type { PredictedTonTransactionTonTransactionTypeDetails } from './PredictedTonTransactionTonTransactionTypeDetails';
import {
    PredictedTonTransactionTonTransactionTypeDetailsFromJSON,
    PredictedTonTransactionTonTransactionTypeDetailsFromJSONTyped,
    PredictedTonTransactionTonTransactionTypeDetailsToJSON,
} from './PredictedTonTransactionTonTransactionTypeDetails';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
} from './SimulationStatusResult';
import type { TonBlock } from './TonBlock';
import {
    TonBlockFromJSON,
    TonBlockFromJSONTyped,
    TonBlockToJSON,
} from './TonBlock';
import type { TonTransactionPayload } from './TonTransactionPayload';
import {
    TonTransactionPayloadFromJSON,
    TonTransactionPayloadFromJSONTyped,
    TonTransactionPayloadToJSON,
} from './TonTransactionPayload';
import type { TonTransactionResult } from './TonTransactionResult';
import {
    TonTransactionResultFromJSON,
    TonTransactionResultFromJSONTyped,
    TonTransactionResultToJSON,
} from './TonTransactionResult';
import type { TonTransactionState } from './TonTransactionState';
import {
    TonTransactionStateFromJSON,
    TonTransactionStateFromJSONTyped,
    TonTransactionStateToJSON,
} from './TonTransactionState';
import type { TonTransactionStateChange } from './TonTransactionStateChange';
import {
    TonTransactionStateChangeFromJSON,
    TonTransactionStateChangeFromJSONTyped,
    TonTransactionStateChangeToJSON,
} from './TonTransactionStateChange';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface TonTransaction
 */
export interface TonTransaction {
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TonTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TonTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof TonTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof TonTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof TonTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof TonTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    type: TonTransactionTypeEnum;
    /**
     * 
     * @type {PredictedTonTransactionTonTransactionTypeDetails}
     * @memberof TonTransaction
     */
    tonTransactionTypeDetails: PredictedTonTransactionTonTransactionTypeDetails;
    /**
     * 
     * @type {EnrichedTonChain}
     * @memberof TonTransaction
     */
    chain: EnrichedTonChain;
    /**
     * 
     * @type {TonTransactionState}
     * @memberof TonTransaction
     */
    state: TonTransactionState;
    /**
     * 
     * @type {Array<TonTransactionStateChange>}
     * @memberof TonTransaction
     */
    stateChanges: Array<TonTransactionStateChange>;
    /**
     * 
     * @type {number}
     * @memberof TonTransaction
     */
    nonce?: number;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonTransaction
     */
    sender: EnrichedTonAddress;
    /**
     * 
     * @type {TonTransactionPayload}
     * @memberof TonTransaction
     */
    payload: TonTransactionPayload;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    hash?: string;
    /**
     * 
     * @type {TonBlock}
     * @memberof TonTransaction
     */
    block?: TonBlock;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    serializedSignedTransaction?: string;
    /**
     * 
     * @type {TonTransactionResult}
     * @memberof TonTransaction
     */
    expectedResult?: TonTransactionResult;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof TonTransaction
     */
    simulationStatusResult?: SimulationStatusResult;
    /**
     * 
     * @type {TonTransactionResult}
     * @memberof TonTransaction
     */
    minedResult?: TonTransactionResult;
    /**
     * 
     * @type {string}
     * @memberof TonTransaction
     */
    explorerUrl?: string;
}


/**
 * @export
 */
export const TonTransactionTypeEnum = {
    tonTransaction: 'ton_transaction'
} as const;
export type TonTransactionTypeEnum = typeof TonTransactionTypeEnum[keyof typeof TonTransactionTypeEnum];


/**
 * Check if a given object implements the TonTransaction interface.
 */
export function instanceOfTonTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tonTransactionTypeDetails" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChanges" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "payload" in value;

    return isInstance;
}

export function TonTransactionFromJSON(json: any): TonTransaction {
    return TonTransactionFromJSONTyped(json, false);
}

export function TonTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TonTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': !exists(json, 'managed_transaction_data') ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': !exists(json, 'spam_state') ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'type': json['type'],
        'tonTransactionTypeDetails': PredictedTonTransactionTonTransactionTypeDetailsFromJSON(json['ton_transaction_type_details']),
        'chain': EnrichedTonChainFromJSON(json['chain']),
        'state': TonTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(TonTransactionStateChangeFromJSON)),
        'nonce': !exists(json, 'nonce') ? undefined : json['nonce'],
        'sender': EnrichedTonAddressFromJSON(json['sender']),
        'payload': TonTransactionPayloadFromJSON(json['payload']),
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'block': !exists(json, 'block') ? undefined : TonBlockFromJSON(json['block']),
        'serializedSignedTransaction': !exists(json, 'serialized_signed_transaction') ? undefined : json['serialized_signed_transaction'],
        'expectedResult': !exists(json, 'expected_result') ? undefined : TonTransactionResultFromJSON(json['expected_result']),
        'simulationStatusResult': !exists(json, 'simulation_status_result') ? undefined : SimulationStatusResultFromJSON(json['simulation_status_result']),
        'minedResult': !exists(json, 'mined_result') ? undefined : TonTransactionResultFromJSON(json['mined_result']),
        'explorerUrl': !exists(json, 'explorer_url') ? undefined : json['explorer_url'],
    };
}

export function TonTransactionToJSON(value?: TonTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value.managedTransactionData),
        'signatures': ((value.signatures as Array<any>).map(SignatureToJSON)),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'direction': TransactionDirectionToJSON(value.direction),
        'type': value.type,
        'ton_transaction_type_details': PredictedTonTransactionTonTransactionTypeDetailsToJSON(value.tonTransactionTypeDetails),
        'chain': EnrichedTonChainToJSON(value.chain),
        'state': TonTransactionStateToJSON(value.state),
        'state_changes': ((value.stateChanges as Array<any>).map(TonTransactionStateChangeToJSON)),
        'nonce': value.nonce,
        'sender': EnrichedTonAddressToJSON(value.sender),
        'payload': TonTransactionPayloadToJSON(value.payload),
        'hash': value.hash,
        'block': TonBlockToJSON(value.block),
        'serialized_signed_transaction': value.serializedSignedTransaction,
        'expected_result': TonTransactionResultToJSON(value.expectedResult),
        'simulation_status_result': SimulationStatusResultToJSON(value.simulationStatusResult),
        'mined_result': TonTransactionResultToJSON(value.minedResult),
        'explorer_url': value.explorerUrl,
    };
}

