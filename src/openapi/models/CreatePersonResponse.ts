/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserState } from './UserState';
import {
    UserStateFromJSON,
    UserStateFromJSONTyped,
    UserStateToJSON,
    UserStateToJSONTyped,
} from './UserState';
import type { DeviceBackupInfoExt } from './DeviceBackupInfoExt';
import {
    DeviceBackupInfoExtFromJSON,
    DeviceBackupInfoExtFromJSONTyped,
    DeviceBackupInfoExtToJSON,
    DeviceBackupInfoExtToJSONTyped,
} from './DeviceBackupInfoExt';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
    UserRoleToJSONTyped,
} from './UserRole';
import type { PendingUserChangeRef } from './PendingUserChangeRef';
import {
    PendingUserChangeRefFromJSON,
    PendingUserChangeRefFromJSONTyped,
    PendingUserChangeRefToJSON,
    PendingUserChangeRefToJSONTyped,
} from './PendingUserChangeRef';
import type { UserGroupRef } from './UserGroupRef';
import {
    UserGroupRefFromJSON,
    UserGroupRefFromJSONTyped,
    UserGroupRefToJSON,
    UserGroupRefToJSONTyped,
} from './UserGroupRef';

/**
 * 
 * @export
 * @interface CreatePersonResponse
 */
export interface CreatePersonResponse {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonResponse
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CreatePersonResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreatePersonResponse
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonResponse
     */
    userType: CreatePersonResponseUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonResponse
     */
    email: string;
    /**
     * 
     * @type {UserState}
     * @memberof CreatePersonResponse
     */
    state: UserState;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePersonResponse
     */
    isNewDeviceProvisioning: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CreatePersonResponse
     */
    welcomeMessageAcknowledgedAt: Date;
    /**
     * 
     * @type {UserRole}
     * @memberof CreatePersonResponse
     */
    role: UserRole;
    /**
     * 
     * @type {Array<UserGroupRef>}
     * @memberof CreatePersonResponse
     */
    userGroups?: Array<UserGroupRef>;
    /**
     * 
     * @type {Array<UserGroupRef>}
     * @memberof CreatePersonResponse
     */
    pendingAdditionToUserGroups?: Array<UserGroupRef>;
    /**
     * 
     * @type {Array<UserGroupRef>}
     * @memberof CreatePersonResponse
     */
    pendingRemovalFromUserGroups?: Array<UserGroupRef>;
    /**
     * 
     * @type {PendingUserChangeRef}
     * @memberof CreatePersonResponse
     */
    pendingChange?: PendingUserChangeRef;
    /**
     * 
     * @type {DeviceBackupInfoExt}
     * @memberof CreatePersonResponse
     */
    deviceBackupInfo?: DeviceBackupInfoExt;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonResponse
     */
    userActionId: string;
}


/**
 * @export
 */
export const CreatePersonResponseUserTypeEnum = {
    person: 'person'
} as const;
export type CreatePersonResponseUserTypeEnum = typeof CreatePersonResponseUserTypeEnum[keyof typeof CreatePersonResponseUserTypeEnum];


/**
 * Check if a given object implements the CreatePersonResponse interface.
 */
export function instanceOfCreatePersonResponse(value: object): value is CreatePersonResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('isNewDeviceProvisioning' in value) || value['isNewDeviceProvisioning'] === undefined) return false;
    if (!('welcomeMessageAcknowledgedAt' in value) || value['welcomeMessageAcknowledgedAt'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('userActionId' in value) || value['userActionId'] === undefined) return false;
    return true;
}

export function CreatePersonResponseFromJSON(json: any): CreatePersonResponse {
    return CreatePersonResponseFromJSONTyped(json, false);
}

export function CreatePersonResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePersonResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'userType': json['user_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'],
        'state': UserStateFromJSON(json['state']),
        'isNewDeviceProvisioning': json['is_new_device_provisioning'],
        'welcomeMessageAcknowledgedAt': (new Date(json['welcome_message_acknowledged_at'])),
        'role': UserRoleFromJSON(json['role']),
        'userGroups': json['user_groups'] == null ? undefined : ((json['user_groups'] as Array<any>).map(UserGroupRefFromJSON)),
        'pendingAdditionToUserGroups': json['pending_addition_to_user_groups'] == null ? undefined : ((json['pending_addition_to_user_groups'] as Array<any>).map(UserGroupRefFromJSON)),
        'pendingRemovalFromUserGroups': json['pending_removal_from_user_groups'] == null ? undefined : ((json['pending_removal_from_user_groups'] as Array<any>).map(UserGroupRefFromJSON)),
        'pendingChange': json['pending_change'] == null ? undefined : PendingUserChangeRefFromJSON(json['pending_change']),
        'deviceBackupInfo': json['device_backup_info'] == null ? undefined : DeviceBackupInfoExtFromJSON(json['device_backup_info']),
        'userActionId': json['user_action_id'],
    };
}

export function CreatePersonResponseToJSON(json: any): CreatePersonResponse {
    return CreatePersonResponseToJSONTyped(json, false);
}

export function CreatePersonResponseToJSONTyped(value?: CreatePersonResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'user_type': value['userType'],
        'name': value['name'],
        'email': value['email'],
        'state': UserStateToJSON(value['state']),
        'is_new_device_provisioning': value['isNewDeviceProvisioning'],
        'welcome_message_acknowledged_at': ((value['welcomeMessageAcknowledgedAt']).toISOString()),
        'role': UserRoleToJSON(value['role']),
        'user_groups': value['userGroups'] == null ? undefined : ((value['userGroups'] as Array<any>).map(UserGroupRefToJSON)),
        'pending_addition_to_user_groups': value['pendingAdditionToUserGroups'] == null ? undefined : ((value['pendingAdditionToUserGroups'] as Array<any>).map(UserGroupRefToJSON)),
        'pending_removal_from_user_groups': value['pendingRemovalFromUserGroups'] == null ? undefined : ((value['pendingRemovalFromUserGroups'] as Array<any>).map(UserGroupRefToJSON)),
        'pending_change': PendingUserChangeRefToJSON(value['pendingChange']),
        'device_backup_info': DeviceBackupInfoExtToJSON(value['deviceBackupInfo']),
        'user_action_id': value['userActionId'],
    };
}

