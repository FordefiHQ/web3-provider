/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SolanaAddress } from './SolanaAddress';
import {
    SolanaAddressFromJSON,
    SolanaAddressFromJSONTyped,
    SolanaAddressToJSON,
} from './SolanaAddress';

/**
 * 
 * @export
 * @interface SplToken
 */
export interface SplToken {
    /**
     * 
     * @type {string}
     * @memberof SplToken
     */
    type: SplTokenTypeEnum;
    /**
     * 
     * @type {SolanaAddress}
     * @memberof SplToken
     */
    address: SolanaAddress;
    /**
     * 
     * @type {string}
     * @memberof SplToken
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SplToken
     */
    symbol: string;
    /**
     * 
     * @type {number}
     * @memberof SplToken
     */
    decimals: number;
    /**
     * 
     * @type {string}
     * @memberof SplToken
     */
    logoUrl?: string;
}


/**
 * @export
 */
export const SplTokenTypeEnum = {
    splToken: 'spl_token'
} as const;
export type SplTokenTypeEnum = typeof SplTokenTypeEnum[keyof typeof SplTokenTypeEnum];


/**
 * Check if a given object implements the SplToken interface.
 */
export function instanceOfSplToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "decimals" in value;

    return isInstance;
}

export function SplTokenFromJSON(json: any): SplToken {
    return SplTokenFromJSONTyped(json, false);
}

export function SplTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): SplToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'address': SolanaAddressFromJSON(json['address']),
        'name': json['name'],
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'logoUrl': !exists(json, 'logo_url') ? undefined : json['logo_url'],
    };
}

export function SplTokenToJSON(value?: SplToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'address': SolanaAddressToJSON(value.address),
        'name': value.name,
        'symbol': value.symbol,
        'decimals': value.decimals,
        'logo_url': value.logoUrl,
    };
}

