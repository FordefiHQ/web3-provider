/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SuiChain } from './SuiChain';
import {
    SuiChainFromJSON,
    SuiChainFromJSONTyped,
    SuiChainToJSON,
} from './SuiChain';
import type { SuiTransactionState } from './SuiTransactionState';
import {
    SuiTransactionStateFromJSON,
    SuiTransactionStateFromJSONTyped,
    SuiTransactionStateToJSON,
} from './SuiTransactionState';
import type { SuiTransactionType } from './SuiTransactionType';
import {
    SuiTransactionTypeFromJSON,
    SuiTransactionTypeFromJSONTyped,
    SuiTransactionTypeToJSON,
} from './SuiTransactionType';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface WebhookSuiTransactionStatusChangeEvent
 */
export interface WebhookSuiTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {string}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    type: WebhookSuiTransactionStatusChangeEventTypeEnum;
    /**
     * 
     * @type {SuiTransactionType}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    suiTransactionType: SuiTransactionType;
    /**
     * 
     * @type {SuiTransactionState}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    state: SuiTransactionState;
    /**
     * 
     * @type {string}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    digest?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    txBytes?: string;
    /**
     * 
     * @type {SuiChain}
     * @memberof WebhookSuiTransactionStatusChangeEvent
     */
    chain: SuiChain;
}


/**
 * @export
 */
export const WebhookSuiTransactionStatusChangeEventTypeEnum = {
    suiTransaction: 'sui_transaction'
} as const;
export type WebhookSuiTransactionStatusChangeEventTypeEnum = typeof WebhookSuiTransactionStatusChangeEventTypeEnum[keyof typeof WebhookSuiTransactionStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookSuiTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookSuiTransactionStatusChangeEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "isManagedTransaction" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "spamState" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "suiTransactionType" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "chain" in value;

    return isInstance;
}

export function WebhookSuiTransactionStatusChangeEventFromJSON(json: any): WebhookSuiTransactionStatusChangeEvent {
    return WebhookSuiTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookSuiTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookSuiTransactionStatusChangeEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'type': json['type'],
        'suiTransactionType': SuiTransactionTypeFromJSON(json['sui_transaction_type']),
        'state': SuiTransactionStateFromJSON(json['state']),
        'digest': !exists(json, 'digest') ? undefined : json['digest'],
        'txBytes': !exists(json, 'tx_bytes') ? undefined : json['tx_bytes'],
        'chain': SuiChainFromJSON(json['chain']),
    };
}

export function WebhookSuiTransactionStatusChangeEventToJSON(value?: WebhookSuiTransactionStatusChangeEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_id': value.transactionId,
        'is_managed_transaction': value.isManagedTransaction,
        'direction': TransactionDirectionToJSON(value.direction),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'type': value.type,
        'sui_transaction_type': SuiTransactionTypeToJSON(value.suiTransactionType),
        'state': SuiTransactionStateToJSON(value.state),
        'digest': value.digest,
        'tx_bytes': value.txBytes,
        'chain': SuiChainToJSON(value.chain),
    };
}

