/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ScriptPayload
 */
export interface ScriptPayload {
    /**
     * 
     * @type {Array<string>}
     * @memberof ScriptPayload
     */
    typedArguments: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScriptPayload
     */
    arguments: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ScriptPayload
     */
    type: ScriptPayloadTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ScriptPayload
     */
    code: string;
}


/**
 * @export
 */
export const ScriptPayloadTypeEnum = {
    script: 'script'
} as const;
export type ScriptPayloadTypeEnum = typeof ScriptPayloadTypeEnum[keyof typeof ScriptPayloadTypeEnum];


/**
 * Check if a given object implements the ScriptPayload interface.
 */
export function instanceOfScriptPayload(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "typedArguments" in value;
    isInstance = isInstance && "arguments" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "code" in value;

    return isInstance;
}

export function ScriptPayloadFromJSON(json: any): ScriptPayload {
    return ScriptPayloadFromJSONTyped(json, false);
}

export function ScriptPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScriptPayload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'typedArguments': json['typed_arguments'],
        'arguments': json['arguments'],
        'type': json['type'],
        'code': json['code'],
    };
}

export function ScriptPayloadToJSON(value?: ScriptPayload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'typed_arguments': value.typedArguments,
        'arguments': value.arguments,
        'type': value.type,
        'code': value.code,
    };
}

