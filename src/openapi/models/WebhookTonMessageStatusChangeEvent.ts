/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TonChain } from './TonChain';
import {
    TonChainFromJSON,
    TonChainFromJSONTyped,
    TonChainToJSON,
} from './TonChain';
import type { TonMessageState } from './TonMessageState';
import {
    TonMessageStateFromJSON,
    TonMessageStateFromJSONTyped,
    TonMessageStateToJSON,
} from './TonMessageState';
import type { TonMessageType } from './TonMessageType';
import {
    TonMessageTypeFromJSON,
    TonMessageTypeFromJSONTyped,
    TonMessageTypeToJSON,
} from './TonMessageType';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface WebhookTonMessageStatusChangeEvent
 */
export interface WebhookTonMessageStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookTonMessageStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    type: WebhookTonMessageStatusChangeEventTypeEnum;
    /**
     * 
     * @type {TonMessageType}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    tonMessageType: TonMessageType;
    /**
     * 
     * @type {TonMessageState}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    state: TonMessageState;
    /**
     * 
     * @type {TonChain}
     * @memberof WebhookTonMessageStatusChangeEvent
     */
    chain: TonChain;
}


/**
 * @export
 */
export const WebhookTonMessageStatusChangeEventTypeEnum = {
    tonMessage: 'ton_message'
} as const;
export type WebhookTonMessageStatusChangeEventTypeEnum = typeof WebhookTonMessageStatusChangeEventTypeEnum[keyof typeof WebhookTonMessageStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookTonMessageStatusChangeEvent interface.
 */
export function instanceOfWebhookTonMessageStatusChangeEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "isManagedTransaction" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "spamState" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tonMessageType" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "chain" in value;

    return isInstance;
}

export function WebhookTonMessageStatusChangeEventFromJSON(json: any): WebhookTonMessageStatusChangeEvent {
    return WebhookTonMessageStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookTonMessageStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookTonMessageStatusChangeEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'type': json['type'],
        'tonMessageType': TonMessageTypeFromJSON(json['ton_message_type']),
        'state': TonMessageStateFromJSON(json['state']),
        'chain': TonChainFromJSON(json['chain']),
    };
}

export function WebhookTonMessageStatusChangeEventToJSON(value?: WebhookTonMessageStatusChangeEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_id': value.transactionId,
        'is_managed_transaction': value.isManagedTransaction,
        'direction': TransactionDirectionToJSON(value.direction),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'type': value.type,
        'ton_message_type': TonMessageTypeToJSON(value.tonMessageType),
        'state': TonMessageStateToJSON(value.state),
        'chain': TonChainToJSON(value.chain),
    };
}

