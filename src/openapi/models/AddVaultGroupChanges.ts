/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
} from './VaultRef';

/**
 * 
 * @export
 * @interface AddVaultGroupChanges
 */
export interface AddVaultGroupChanges {
    /**
     * 
     * @type {string}
     * @memberof AddVaultGroupChanges
     */
    changeRequestId: string;
    /**
     * 
     * @type {Array<VaultRef>}
     * @memberof AddVaultGroupChanges
     */
    addedVaults: Array<VaultRef>;
    /**
     * 
     * @type {string}
     * @memberof AddVaultGroupChanges
     */
    type: AddVaultGroupChangesTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddVaultGroupChanges
     */
    newName: string;
}


/**
 * @export
 */
export const AddVaultGroupChangesTypeEnum = {
    addGroup: 'add_group'
} as const;
export type AddVaultGroupChangesTypeEnum = typeof AddVaultGroupChangesTypeEnum[keyof typeof AddVaultGroupChangesTypeEnum];


/**
 * Check if a given object implements the AddVaultGroupChanges interface.
 */
export function instanceOfAddVaultGroupChanges(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "changeRequestId" in value;
    isInstance = isInstance && "addedVaults" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "newName" in value;

    return isInstance;
}

export function AddVaultGroupChangesFromJSON(json: any): AddVaultGroupChanges {
    return AddVaultGroupChangesFromJSONTyped(json, false);
}

export function AddVaultGroupChangesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddVaultGroupChanges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changeRequestId': json['change_request_id'],
        'addedVaults': ((json['added_vaults'] as Array<any>).map(VaultRefFromJSON)),
        'type': json['type'],
        'newName': json['new_name'],
    };
}

export function AddVaultGroupChangesToJSON(value?: AddVaultGroupChanges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'change_request_id': value.changeRequestId,
        'added_vaults': ((value.addedVaults as Array<any>).map(VaultRefToJSON)),
        'type': value.type,
        'new_name': value.newName,
    };
}

