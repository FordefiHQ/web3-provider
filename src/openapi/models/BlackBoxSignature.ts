/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlackBoxSignatureDetails } from './BlackBoxSignatureDetails';
import {
    BlackBoxSignatureDetailsFromJSON,
    BlackBoxSignatureDetailsFromJSONTyped,
    BlackBoxSignatureDetailsToJSON,
} from './BlackBoxSignatureDetails';
import type { BlackBoxSignatureState } from './BlackBoxSignatureState';
import {
    BlackBoxSignatureStateFromJSON,
    BlackBoxSignatureStateFromJSONTyped,
    BlackBoxSignatureStateToJSON,
} from './BlackBoxSignatureState';
import type { BlackBoxSignatureStateChange } from './BlackBoxSignatureStateChange';
import {
    BlackBoxSignatureStateChangeFromJSON,
    BlackBoxSignatureStateChangeFromJSONTyped,
    BlackBoxSignatureStateChangeToJSON,
} from './BlackBoxSignatureStateChange';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
} from './ManagedTransactionData';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
} from './VaultRef';

/**
 * 
 * @export
 * @interface BlackBoxSignature
 */
export interface BlackBoxSignature {
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof BlackBoxSignature
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlackBoxSignature
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof BlackBoxSignature
     */
    managedTransactionData: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof BlackBoxSignature
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof BlackBoxSignature
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof BlackBoxSignature
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    type: BlackBoxSignatureTypeEnum;
    /**
     * 
     * @type {BlackBoxSignatureState}
     * @memberof BlackBoxSignature
     */
    state: BlackBoxSignatureState;
    /**
     * 
     * @type {Array<BlackBoxSignatureStateChange>}
     * @memberof BlackBoxSignature
     */
    stateChanges: Array<BlackBoxSignatureStateChange>;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    payload: string;
    /**
     * 
     * @type {VaultRef}
     * @memberof BlackBoxSignature
     */
    vault: VaultRef;
    /**
     * 
     * @type {BlackBoxSignatureDetails}
     * @memberof BlackBoxSignature
     */
    details: BlackBoxSignatureDetails;
}


/**
 * @export
 */
export const BlackBoxSignatureTypeEnum = {
    blackBoxSignature: 'black_box_signature'
} as const;
export type BlackBoxSignatureTypeEnum = typeof BlackBoxSignatureTypeEnum[keyof typeof BlackBoxSignatureTypeEnum];


/**
 * Check if a given object implements the BlackBoxSignature interface.
 */
export function instanceOfBlackBoxSignature(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "managedTransactionData" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChanges" in value;
    isInstance = isInstance && "payload" in value;
    isInstance = isInstance && "vault" in value;
    isInstance = isInstance && "details" in value;

    return isInstance;
}

export function BlackBoxSignatureFromJSON(json: any): BlackBoxSignature {
    return BlackBoxSignatureFromJSONTyped(json, false);
}

export function BlackBoxSignatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlackBoxSignature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': !exists(json, 'spam_state') ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'type': json['type'],
        'state': BlackBoxSignatureStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(BlackBoxSignatureStateChangeFromJSON)),
        'payload': json['payload'],
        'vault': VaultRefFromJSON(json['vault']),
        'details': BlackBoxSignatureDetailsFromJSON(json['details']),
    };
}

export function BlackBoxSignatureToJSON(value?: BlackBoxSignature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value.managedTransactionData),
        'signatures': ((value.signatures as Array<any>).map(SignatureToJSON)),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'direction': TransactionDirectionToJSON(value.direction),
        'type': value.type,
        'state': BlackBoxSignatureStateToJSON(value.state),
        'state_changes': ((value.stateChanges as Array<any>).map(BlackBoxSignatureStateChangeToJSON)),
        'payload': value.payload,
        'vault': VaultRefToJSON(value.vault),
        'details': BlackBoxSignatureDetailsToJSON(value.details),
    };
}

