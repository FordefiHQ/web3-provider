/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
    VaultRefToJSONTyped,
} from './VaultRef';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
    ManagedTransactionDataToJSONTyped,
} from './ManagedTransactionData';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
    SignatureToJSONTyped,
} from './Signature';
import type { BlackBoxSignatureDetails } from './BlackBoxSignatureDetails';
import {
    BlackBoxSignatureDetailsFromJSON,
    BlackBoxSignatureDetailsFromJSONTyped,
    BlackBoxSignatureDetailsToJSON,
    BlackBoxSignatureDetailsToJSONTyped,
} from './BlackBoxSignatureDetails';
import type { NonPushableTransactionStateChange } from './NonPushableTransactionStateChange';
import {
    NonPushableTransactionStateChangeFromJSON,
    NonPushableTransactionStateChangeFromJSONTyped,
    NonPushableTransactionStateChangeToJSON,
    NonPushableTransactionStateChangeToJSONTyped,
} from './NonPushableTransactionStateChange';
import type { NonPushableTransactionState } from './NonPushableTransactionState';
import {
    NonPushableTransactionStateFromJSON,
    NonPushableTransactionStateFromJSONTyped,
    NonPushableTransactionStateToJSON,
    NonPushableTransactionStateToJSONTyped,
} from './NonPushableTransactionState';

/**
 * 
 * @export
 * @interface BlackBoxSignature
 */
export interface BlackBoxSignature {
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof BlackBoxSignature
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlackBoxSignature
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof BlackBoxSignature
     */
    managedTransactionData: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof BlackBoxSignature
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof BlackBoxSignature
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof BlackBoxSignature
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof BlackBoxSignature
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {NonPushableTransactionState}
     * @memberof BlackBoxSignature
     */
    state: NonPushableTransactionState;
    /**
     * 
     * @type {Array<NonPushableTransactionStateChange>}
     * @memberof BlackBoxSignature
     */
    stateChanges: Array<NonPushableTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    type: BlackBoxSignatureTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     * @deprecated
     */
    payload: string;
    /**
     * 
     * @type {VaultRef}
     * @memberof BlackBoxSignature
     */
    vault: VaultRef;
    /**
     * 
     * @type {BlackBoxSignatureDetails}
     * @memberof BlackBoxSignature
     */
    details: BlackBoxSignatureDetails;
}


/**
 * @export
 */
export const BlackBoxSignatureTypeEnum = {
    blackBoxSignature: 'black_box_signature'
} as const;
export type BlackBoxSignatureTypeEnum = typeof BlackBoxSignatureTypeEnum[keyof typeof BlackBoxSignatureTypeEnum];


/**
 * Check if a given object implements the BlackBoxSignature interface.
 */
export function instanceOfBlackBoxSignature(value: object): value is BlackBoxSignature {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('managedTransactionData' in value) || value['managedTransactionData'] === undefined) return false;
    if (!('signatures' in value) || value['signatures'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChanges' in value) || value['stateChanges'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('payload' in value) || value['payload'] === undefined) return false;
    if (!('vault' in value) || value['vault'] === undefined) return false;
    if (!('details' in value) || value['details'] === undefined) return false;
    return true;
}

export function BlackBoxSignatureFromJSON(json: any): BlackBoxSignature {
    return BlackBoxSignatureFromJSONTyped(json, false);
}

export function BlackBoxSignatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlackBoxSignature {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': NonPushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(NonPushableTransactionStateChangeFromJSON)),
        'type': json['type'],
        'payload': json['payload'],
        'vault': VaultRefFromJSON(json['vault']),
        'details': BlackBoxSignatureDetailsFromJSON(json['details']),
    };
}

export function BlackBoxSignatureToJSON(json: any): BlackBoxSignature {
    return BlackBoxSignatureToJSONTyped(json, false);
}

export function BlackBoxSignatureToJSONTyped(value?: BlackBoxSignature | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value['managedTransactionData']),
        'signatures': ((value['signatures'] as Array<any>).map(SignatureToJSON)),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'direction': TransactionDirectionToJSON(value['direction']),
        'signed_externally': value['signedExternally'],
        'state': NonPushableTransactionStateToJSON(value['state']),
        'state_changes': ((value['stateChanges'] as Array<any>).map(NonPushableTransactionStateChangeToJSON)),
        'type': value['type'],
        'payload': value['payload'],
        'vault': VaultRefToJSON(value['vault']),
        'details': BlackBoxSignatureDetailsToJSON(value['details']),
    };
}

