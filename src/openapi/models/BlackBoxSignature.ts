/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
} from './VaultRef';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
} from './ManagedTransactionData';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
} from './TransactionDirection';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
} from './Signature';
import type { BlackBoxSignatureDetails } from './BlackBoxSignatureDetails';
import {
    BlackBoxSignatureDetailsFromJSON,
} from './BlackBoxSignatureDetails';
import type { NonPushableTransactionStateChange } from './NonPushableTransactionStateChange';
import {
    NonPushableTransactionStateChangeFromJSON,
} from './NonPushableTransactionStateChange';
import type { NonPushableTransactionState } from './NonPushableTransactionState';
import {
    NonPushableTransactionStateFromJSON,
} from './NonPushableTransactionState';

/**
 * 
 * @export
 * @interface BlackBoxSignature
 */
export interface BlackBoxSignature {
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof BlackBoxSignature
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlackBoxSignature
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof BlackBoxSignature
     */
    managedTransactionData: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof BlackBoxSignature
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof BlackBoxSignature
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof BlackBoxSignature
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof BlackBoxSignature
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {NonPushableTransactionState}
     * @memberof BlackBoxSignature
     */
    state: NonPushableTransactionState;
    /**
     * 
     * @type {Array<NonPushableTransactionStateChange>}
     * @memberof BlackBoxSignature
     */
    stateChanges: Array<NonPushableTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     */
    type: BlackBoxSignatureTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BlackBoxSignature
     * @deprecated
     */
    payload: string;
    /**
     * 
     * @type {VaultRef}
     * @memberof BlackBoxSignature
     */
    vault: VaultRef;
    /**
     * 
     * @type {BlackBoxSignatureDetails}
     * @memberof BlackBoxSignature
     */
    details: BlackBoxSignatureDetails;
}


/**
 * 
 */
const BlackBoxSignatureTypeEnum = {
    blackBoxSignature: 'black_box_signature'
} as const;
type BlackBoxSignatureTypeEnum = typeof BlackBoxSignatureTypeEnum[keyof typeof BlackBoxSignatureTypeEnum];

export function BlackBoxSignatureFromJSONTyped(json: any, _ignoreDiscriminator: boolean): BlackBoxSignature {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': NonPushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(NonPushableTransactionStateChangeFromJSON)),
        'type': json['type'],
        'payload': json['payload'],
        'vault': VaultRefFromJSON(json['vault']),
        'details': BlackBoxSignatureDetailsFromJSON(json['details']),
    };
}
