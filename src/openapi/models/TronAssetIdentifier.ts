/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedTronChain } from './EnrichedTronChain';
import {
    EnrichedTronChainFromJSON,
    EnrichedTronChainFromJSONTyped,
    EnrichedTronChainToJSON,
    EnrichedTronChainToJSONTyped,
} from './EnrichedTronChain';
import type { TronAssetIdentifierDetails } from './TronAssetIdentifierDetails';
import {
    TronAssetIdentifierDetailsFromJSON,
    TronAssetIdentifierDetailsFromJSONTyped,
    TronAssetIdentifierDetailsToJSON,
    TronAssetIdentifierDetailsToJSONTyped,
} from './TronAssetIdentifierDetails';

/**
 * 
 * @export
 * @interface TronAssetIdentifier
 */
export interface TronAssetIdentifier {
    /**
     * 
     * @type {string}
     * @memberof TronAssetIdentifier
     */
    type: TronAssetIdentifierTypeEnum;
    /**
     * 
     * @type {TronAssetIdentifierDetails}
     * @memberof TronAssetIdentifier
     */
    details: TronAssetIdentifierDetails;
    /**
     * 
     * @type {EnrichedTronChain}
     * @memberof TronAssetIdentifier
     */
    chain: EnrichedTronChain;
}


/**
 * @export
 */
export const TronAssetIdentifierTypeEnum = {
    tron: 'tron'
} as const;
export type TronAssetIdentifierTypeEnum = typeof TronAssetIdentifierTypeEnum[keyof typeof TronAssetIdentifierTypeEnum];


/**
 * Check if a given object implements the TronAssetIdentifier interface.
 */
export function instanceOfTronAssetIdentifier(value: object): value is TronAssetIdentifier {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('details' in value) || value['details'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    return true;
}

export function TronAssetIdentifierFromJSON(json: any): TronAssetIdentifier {
    return TronAssetIdentifierFromJSONTyped(json, false);
}

export function TronAssetIdentifierFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronAssetIdentifier {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'details': TronAssetIdentifierDetailsFromJSON(json['details']),
        'chain': EnrichedTronChainFromJSON(json['chain']),
    };
}

export function TronAssetIdentifierToJSON(json: any): TronAssetIdentifier {
    return TronAssetIdentifierToJSONTyped(json, false);
}

export function TronAssetIdentifierToJSONTyped(value?: TronAssetIdentifier | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'details': TronAssetIdentifierDetailsToJSON(value['details']),
        'chain': EnrichedTronChainToJSON(value['chain']),
    };
}

