/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CosmosMessageStrData
 */
export interface CosmosMessageStrData {
    /**
     * 
     * @type {string}
     * @memberof CosmosMessageStrData
     */
    type: CosmosMessageStrDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmosMessageStrData
     */
    data: string;
}


/**
 * @export
 */
export const CosmosMessageStrDataTypeEnum = {
    string: 'string'
} as const;
export type CosmosMessageStrDataTypeEnum = typeof CosmosMessageStrDataTypeEnum[keyof typeof CosmosMessageStrDataTypeEnum];


/**
 * Check if a given object implements the CosmosMessageStrData interface.
 */
export function instanceOfCosmosMessageStrData(value: object): value is CosmosMessageStrData {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function CosmosMessageStrDataFromJSON(json: any): CosmosMessageStrData {
    return CosmosMessageStrDataFromJSONTyped(json, false);
}

export function CosmosMessageStrDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosMessageStrData {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'data': json['data'],
    };
}

export function CosmosMessageStrDataToJSON(json: any): CosmosMessageStrData {
    return CosmosMessageStrDataToJSONTyped(json, false);
}

export function CosmosMessageStrDataToJSONTyped(value?: CosmosMessageStrData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'data': value['data'],
    };
}

