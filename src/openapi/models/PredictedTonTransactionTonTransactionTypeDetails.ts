/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TonJettonTransferDetails } from './TonJettonTransferDetails';
import {
    TonJettonTransferDetailsFromJSONTyped,
} from './TonJettonTransferDetails';
import type { TonNativeTransferDetails } from './TonNativeTransferDetails';
import {
    TonNativeTransferDetailsFromJSONTyped,
} from './TonNativeTransferDetails';
import type { TonRawTransactionDetails } from './TonRawTransactionDetails';
import {
    TonRawTransactionDetailsFromJSONTyped,
} from './TonRawTransactionDetails';

/**
 * 
 * @export
 * @type PredictedTonTransactionTonTransactionTypeDetails
 */
export type PredictedTonTransactionTonTransactionTypeDetails = { type: 'jetton_transfer' } & TonJettonTransferDetails | { type: 'native_transfer' } & TonNativeTransferDetails | { type: 'raw_transaction' } & TonRawTransactionDetails;

export function PredictedTonTransactionTonTransactionTypeDetailsFromJSON(json: any): PredictedTonTransactionTonTransactionTypeDetails {
    return PredictedTonTransactionTonTransactionTypeDetailsFromJSONTyped(json, false);
}

function PredictedTonTransactionTonTransactionTypeDetailsFromJSONTyped(json: any, _ignoreDiscriminator: boolean): PredictedTonTransactionTonTransactionTypeDetails {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'jetton_transfer':
            return Object.assign({}, TonJettonTransferDetailsFromJSONTyped(json, true), { type: 'jetton_transfer' } as const);
        case 'native_transfer':
            return Object.assign({}, TonNativeTransferDetailsFromJSONTyped(json, true), { type: 'native_transfer' } as const);
        case 'raw_transaction':
            return Object.assign({}, TonRawTransactionDetailsFromJSONTyped(json, true), { type: 'raw_transaction' } as const);
        default:
            throw new Error(`No variant of PredictedTonTransactionTonTransactionTypeDetails exists with 'type=${json['type']}'`);
    }
}

