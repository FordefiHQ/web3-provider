/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionSigningRequest } from './ActionSigningRequest';
import {
    ActionSigningRequestFromJSON,
    ActionSigningRequestFromJSONTyped,
    ActionSigningRequestToJSON,
} from './ActionSigningRequest';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
} from './ApprovalRequest';
import type { BackupPublicKey } from './BackupPublicKey';
import {
    BackupPublicKeyFromJSON,
    BackupPublicKeyFromJSONTyped,
    BackupPublicKeyToJSON,
} from './BackupPublicKey';
import type { BackupType } from './BackupType';
import {
    BackupTypeFromJSON,
    BackupTypeFromJSONTyped,
    BackupTypeToJSON,
} from './BackupType';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';

/**
 * 
 * @export
 * @interface CreateBackupAction
 */
export interface CreateBackupAction {
    /**
     * 
     * @type {string}
     * @memberof CreateBackupAction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CreateBackupAction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreateBackupAction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof CreateBackupAction
     */
    type: CreateBackupActionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateBackupAction
     */
    isPending: boolean;
    /**
     * 
     * @type {UserRef}
     * @memberof CreateBackupAction
     */
    createdBy: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof CreateBackupAction
     */
    abortedBy?: UserRef;
    /**
     * 
     * @type {string}
     * @memberof CreateBackupAction
     */
    state: CreateBackupActionStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateBackupAction
     */
    requestId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBackupAction
     */
    email: string;
    /**
     * 
     * @type {BackupType}
     * @memberof CreateBackupAction
     */
    backupType: BackupType;
    /**
     * 
     * @type {BackupPublicKey}
     * @memberof CreateBackupAction
     */
    publicKey?: BackupPublicKey;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof CreateBackupAction
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {ActionSigningRequest}
     * @memberof CreateBackupAction
     */
    signingRequest: ActionSigningRequest;
}


/**
 * @export
 */
export const CreateBackupActionTypeEnum = {
    createBackup: 'create_backup'
} as const;
export type CreateBackupActionTypeEnum = typeof CreateBackupActionTypeEnum[keyof typeof CreateBackupActionTypeEnum];

/**
 * @export
 */
export const CreateBackupActionStateEnum = {
    created: 'created',
    signed: 'signed',
    completed: 'completed',
    aborted: 'aborted'
} as const;
export type CreateBackupActionStateEnum = typeof CreateBackupActionStateEnum[keyof typeof CreateBackupActionStateEnum];


/**
 * Check if a given object implements the CreateBackupAction interface.
 */
export function instanceOfCreateBackupAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "isPending" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "requestId" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "backupType" in value;
    isInstance = isInstance && "signingRequest" in value;

    return isInstance;
}

export function CreateBackupActionFromJSON(json: any): CreateBackupAction {
    return CreateBackupActionFromJSONTyped(json, false);
}

export function CreateBackupActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateBackupAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'type': json['type'],
        'isPending': json['is_pending'],
        'createdBy': UserRefFromJSON(json['created_by']),
        'abortedBy': !exists(json, 'aborted_by') ? undefined : UserRefFromJSON(json['aborted_by']),
        'state': json['state'],
        'requestId': json['request_id'],
        'email': json['email'],
        'backupType': BackupTypeFromJSON(json['backup_type']),
        'publicKey': !exists(json, 'public_key') ? undefined : BackupPublicKeyFromJSON(json['public_key']),
        'approvalRequest': !exists(json, 'approval_request') ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'signingRequest': ActionSigningRequestFromJSON(json['signing_request']),
    };
}

export function CreateBackupActionToJSON(value?: CreateBackupAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'type': value.type,
        'is_pending': value.isPending,
        'created_by': UserRefToJSON(value.createdBy),
        'aborted_by': UserRefToJSON(value.abortedBy),
        'state': value.state,
        'request_id': value.requestId,
        'email': value.email,
        'backup_type': BackupTypeToJSON(value.backupType),
        'public_key': BackupPublicKeyToJSON(value.publicKey),
        'approval_request': ApprovalRequestToJSON(value.approvalRequest),
        'signing_request': ActionSigningRequestToJSON(value.signingRequest),
    };
}

