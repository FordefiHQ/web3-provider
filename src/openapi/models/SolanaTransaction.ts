/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DescribedSolanaTransactionSolanaTransactionTypeDetails } from './DescribedSolanaTransactionSolanaTransactionTypeDetails';
import {
    DescribedSolanaTransactionSolanaTransactionTypeDetailsFromJSON,
    DescribedSolanaTransactionSolanaTransactionTypeDetailsFromJSONTyped,
    DescribedSolanaTransactionSolanaTransactionTypeDetailsToJSON,
} from './DescribedSolanaTransactionSolanaTransactionTypeDetails';
import type { EnrichedSolanaAddress } from './EnrichedSolanaAddress';
import {
    EnrichedSolanaAddressFromJSON,
    EnrichedSolanaAddressFromJSONTyped,
    EnrichedSolanaAddressToJSON,
} from './EnrichedSolanaAddress';
import type { EnrichedSolanaChain } from './EnrichedSolanaChain';
import {
    EnrichedSolanaChainFromJSON,
    EnrichedSolanaChainFromJSONTyped,
    EnrichedSolanaChainToJSON,
} from './EnrichedSolanaChain';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
} from './ManagedTransactionData';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
} from './SimulationStatusResult';
import type { SolanaBlockData } from './SolanaBlockData';
import {
    SolanaBlockDataFromJSON,
    SolanaBlockDataFromJSONTyped,
    SolanaBlockDataToJSON,
} from './SolanaBlockData';
import type { SolanaCompiledInstruction } from './SolanaCompiledInstruction';
import {
    SolanaCompiledInstructionFromJSON,
    SolanaCompiledInstructionFromJSONTyped,
    SolanaCompiledInstructionToJSON,
} from './SolanaCompiledInstruction';
import type { SolanaEnrichedMessageAddressTableLookup } from './SolanaEnrichedMessageAddressTableLookup';
import {
    SolanaEnrichedMessageAddressTableLookupFromJSON,
    SolanaEnrichedMessageAddressTableLookupFromJSONTyped,
    SolanaEnrichedMessageAddressTableLookupToJSON,
} from './SolanaEnrichedMessageAddressTableLookup';
import type { SolanaMessageVersion } from './SolanaMessageVersion';
import {
    SolanaMessageVersionFromJSON,
    SolanaMessageVersionFromJSONTyped,
    SolanaMessageVersionToJSON,
} from './SolanaMessageVersion';
import type { SolanaTransactionAccount } from './SolanaTransactionAccount';
import {
    SolanaTransactionAccountFromJSON,
    SolanaTransactionAccountFromJSONTyped,
    SolanaTransactionAccountToJSON,
} from './SolanaTransactionAccount';
import type { SolanaTransactionResult } from './SolanaTransactionResult';
import {
    SolanaTransactionResultFromJSON,
    SolanaTransactionResultFromJSONTyped,
    SolanaTransactionResultToJSON,
} from './SolanaTransactionResult';
import type { SolanaTransactionState } from './SolanaTransactionState';
import {
    SolanaTransactionStateFromJSON,
    SolanaTransactionStateFromJSONTyped,
    SolanaTransactionStateToJSON,
} from './SolanaTransactionState';
import type { SolanaTransactionStateChange } from './SolanaTransactionStateChange';
import {
    SolanaTransactionStateChangeFromJSON,
    SolanaTransactionStateChangeFromJSONTyped,
    SolanaTransactionStateChangeToJSON,
} from './SolanaTransactionStateChange';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface SolanaTransaction
 */
export interface SolanaTransaction {
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof SolanaTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof SolanaTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof SolanaTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof SolanaTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof SolanaTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof SolanaTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    type: SolanaTransactionTypeEnum;
    /**
     * 
     * @type {DescribedSolanaTransactionSolanaTransactionTypeDetails}
     * @memberof SolanaTransaction
     */
    solanaTransactionTypeDetails: DescribedSolanaTransactionSolanaTransactionTypeDetails;
    /**
     * 
     * @type {EnrichedSolanaChain}
     * @memberof SolanaTransaction
     */
    chain: EnrichedSolanaChain;
    /**
     * 
     * @type {SolanaTransactionState}
     * @memberof SolanaTransaction
     */
    state: SolanaTransactionState;
    /**
     * 
     * @type {Array<SolanaTransactionStateChange>}
     * @memberof SolanaTransaction
     */
    stateChanges: Array<SolanaTransactionStateChange>;
    /**
     * 
     * @type {SolanaMessageVersion}
     * @memberof SolanaTransaction
     */
    version: SolanaMessageVersion;
    /**
     * 
     * @type {Array<SolanaCompiledInstruction>}
     * @memberof SolanaTransaction
     */
    instructions: Array<SolanaCompiledInstruction>;
    /**
     * 
     * @type {Array<SolanaTransactionAccount>}
     * @memberof SolanaTransaction
     */
    accounts: Array<SolanaTransactionAccount>;
    /**
     * 
     * @type {Array<SolanaEnrichedMessageAddressTableLookup>}
     * @memberof SolanaTransaction
     */
    addressTableLookups: Array<SolanaEnrichedMessageAddressTableLookup>;
    /**
     * 
     * @type {EnrichedSolanaAddress}
     * @memberof SolanaTransaction
     */
    sender: EnrichedSolanaAddress;
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    rawTransaction?: string;
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    recentBlockhash?: string;
    /**
     * 
     * @type {SolanaBlockData}
     * @memberof SolanaTransaction
     */
    block?: SolanaBlockData;
    /**
     * 
     * @type {SolanaTransactionResult}
     * @memberof SolanaTransaction
     */
    expectedResult?: SolanaTransactionResult;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof SolanaTransaction
     */
    simulationStatusResult: SimulationStatusResult;
    /**
     * 
     * @type {SolanaTransactionResult}
     * @memberof SolanaTransaction
     */
    minedResult?: SolanaTransactionResult;
    /**
     * 
     * @type {string}
     * @memberof SolanaTransaction
     */
    explorerUrl?: string;
}


/**
 * @export
 */
export const SolanaTransactionTypeEnum = {
    solanaTransaction: 'solana_transaction'
} as const;
export type SolanaTransactionTypeEnum = typeof SolanaTransactionTypeEnum[keyof typeof SolanaTransactionTypeEnum];


/**
 * Check if a given object implements the SolanaTransaction interface.
 */
export function instanceOfSolanaTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "solanaTransactionTypeDetails" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChanges" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "instructions" in value;
    isInstance = isInstance && "accounts" in value;
    isInstance = isInstance && "addressTableLookups" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "simulationStatusResult" in value;

    return isInstance;
}

export function SolanaTransactionFromJSON(json: any): SolanaTransaction {
    return SolanaTransactionFromJSONTyped(json, false);
}

export function SolanaTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SolanaTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': !exists(json, 'managed_transaction_data') ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': !exists(json, 'spam_state') ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'type': json['type'],
        'solanaTransactionTypeDetails': DescribedSolanaTransactionSolanaTransactionTypeDetailsFromJSON(json['solana_transaction_type_details']),
        'chain': EnrichedSolanaChainFromJSON(json['chain']),
        'state': SolanaTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(SolanaTransactionStateChangeFromJSON)),
        'version': SolanaMessageVersionFromJSON(json['version']),
        'instructions': ((json['instructions'] as Array<any>).map(SolanaCompiledInstructionFromJSON)),
        'accounts': ((json['accounts'] as Array<any>).map(SolanaTransactionAccountFromJSON)),
        'addressTableLookups': ((json['address_table_lookups'] as Array<any>).map(SolanaEnrichedMessageAddressTableLookupFromJSON)),
        'sender': EnrichedSolanaAddressFromJSON(json['sender']),
        'rawTransaction': !exists(json, 'raw_transaction') ? undefined : json['raw_transaction'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'recentBlockhash': !exists(json, 'recent_blockhash') ? undefined : json['recent_blockhash'],
        'block': !exists(json, 'block') ? undefined : SolanaBlockDataFromJSON(json['block']),
        'expectedResult': !exists(json, 'expected_result') ? undefined : SolanaTransactionResultFromJSON(json['expected_result']),
        'simulationStatusResult': SimulationStatusResultFromJSON(json['simulation_status_result']),
        'minedResult': !exists(json, 'mined_result') ? undefined : SolanaTransactionResultFromJSON(json['mined_result']),
        'explorerUrl': !exists(json, 'explorer_url') ? undefined : json['explorer_url'],
    };
}

export function SolanaTransactionToJSON(value?: SolanaTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value.managedTransactionData),
        'signatures': ((value.signatures as Array<any>).map(SignatureToJSON)),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'direction': TransactionDirectionToJSON(value.direction),
        'type': value.type,
        'solana_transaction_type_details': DescribedSolanaTransactionSolanaTransactionTypeDetailsToJSON(value.solanaTransactionTypeDetails),
        'chain': EnrichedSolanaChainToJSON(value.chain),
        'state': SolanaTransactionStateToJSON(value.state),
        'state_changes': ((value.stateChanges as Array<any>).map(SolanaTransactionStateChangeToJSON)),
        'version': SolanaMessageVersionToJSON(value.version),
        'instructions': ((value.instructions as Array<any>).map(SolanaCompiledInstructionToJSON)),
        'accounts': ((value.accounts as Array<any>).map(SolanaTransactionAccountToJSON)),
        'address_table_lookups': ((value.addressTableLookups as Array<any>).map(SolanaEnrichedMessageAddressTableLookupToJSON)),
        'sender': EnrichedSolanaAddressToJSON(value.sender),
        'raw_transaction': value.rawTransaction,
        'hash': value.hash,
        'recent_blockhash': value.recentBlockhash,
        'block': SolanaBlockDataToJSON(value.block),
        'expected_result': SolanaTransactionResultToJSON(value.expectedResult),
        'simulation_status_result': SimulationStatusResultToJSON(value.simulationStatusResult),
        'mined_result': SolanaTransactionResultToJSON(value.minedResult),
        'explorer_url': value.explorerUrl,
    };
}

