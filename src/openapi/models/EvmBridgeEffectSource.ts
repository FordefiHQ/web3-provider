/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    EvmBridgeEffectSourceErc20,
    instanceOfEvmBridgeEffectSourceErc20,
    EvmBridgeEffectSourceErc20FromJSON,
    EvmBridgeEffectSourceErc20FromJSONTyped,
    EvmBridgeEffectSourceErc20ToJSON,
} from './EvmBridgeEffectSourceErc20';
import {
    EvmBridgeEffectSourceNative,
    instanceOfEvmBridgeEffectSourceNative,
    EvmBridgeEffectSourceNativeFromJSON,
    EvmBridgeEffectSourceNativeFromJSONTyped,
    EvmBridgeEffectSourceNativeToJSON,
} from './EvmBridgeEffectSourceNative';

/**
 * @type EvmBridgeEffectSource
 * 
 * @export
 */
export type EvmBridgeEffectSource = { type: 'erc20' } & EvmBridgeEffectSourceErc20 | { type: 'native' } & EvmBridgeEffectSourceNative;

export function EvmBridgeEffectSourceFromJSON(json: any): EvmBridgeEffectSource {
    return EvmBridgeEffectSourceFromJSONTyped(json, false);
}

export function EvmBridgeEffectSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvmBridgeEffectSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'erc20':
            return {...EvmBridgeEffectSourceErc20FromJSONTyped(json, true), type: 'erc20'};
        case 'native':
            return {...EvmBridgeEffectSourceNativeFromJSONTyped(json, true), type: 'native'};
        default:
            throw new Error(`No variant of EvmBridgeEffectSource exists with 'type=${json['type']}'`);
    }
}

export function EvmBridgeEffectSourceToJSON(value?: EvmBridgeEffectSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'erc20':
            return EvmBridgeEffectSourceErc20ToJSON(value);
        case 'native':
            return EvmBridgeEffectSourceNativeToJSON(value);
        default:
            throw new Error(`No variant of EvmBridgeEffectSource exists with 'type=${value['type']}'`);
    }

}

