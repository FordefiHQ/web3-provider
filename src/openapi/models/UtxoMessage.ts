/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedUtxoAddress } from './EnrichedUtxoAddress';
import {
    EnrichedUtxoAddressFromJSON,
    EnrichedUtxoAddressFromJSONTyped,
    EnrichedUtxoAddressToJSON,
    EnrichedUtxoAddressToJSONTyped,
} from './EnrichedUtxoAddress';
import type { UtxoMessageType } from './UtxoMessageType';
import {
    UtxoMessageTypeFromJSON,
    UtxoMessageTypeFromJSONTyped,
    UtxoMessageTypeToJSON,
    UtxoMessageTypeToJSONTyped,
} from './UtxoMessageType';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
    ManagedTransactionDataToJSONTyped,
} from './ManagedTransactionData';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
    SignatureToJSONTyped,
} from './Signature';
import type { NonPushableTransactionStateChange } from './NonPushableTransactionStateChange';
import {
    NonPushableTransactionStateChangeFromJSON,
    NonPushableTransactionStateChangeFromJSONTyped,
    NonPushableTransactionStateChangeToJSON,
    NonPushableTransactionStateChangeToJSONTyped,
} from './NonPushableTransactionStateChange';
import type { EnrichedUtxoChain } from './EnrichedUtxoChain';
import {
    EnrichedUtxoChainFromJSON,
    EnrichedUtxoChainFromJSONTyped,
    EnrichedUtxoChainToJSON,
    EnrichedUtxoChainToJSONTyped,
} from './EnrichedUtxoChain';
import type { NonPushableTransactionState } from './NonPushableTransactionState';
import {
    NonPushableTransactionStateFromJSON,
    NonPushableTransactionStateFromJSONTyped,
    NonPushableTransactionStateToJSON,
    NonPushableTransactionStateToJSONTyped,
} from './NonPushableTransactionState';

/**
 * 
 * @export
 * @interface UtxoMessage
 */
export interface UtxoMessage {
    /**
     * 
     * @type {string}
     * @memberof UtxoMessage
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof UtxoMessage
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UtxoMessage
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof UtxoMessage
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof UtxoMessage
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof UtxoMessage
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof UtxoMessage
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof UtxoMessage
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof UtxoMessage
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {NonPushableTransactionState}
     * @memberof UtxoMessage
     */
    state: NonPushableTransactionState;
    /**
     * 
     * @type {Array<NonPushableTransactionStateChange>}
     * @memberof UtxoMessage
     */
    stateChanges: Array<NonPushableTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof UtxoMessage
     */
    type: UtxoMessageTypeEnum;
    /**
     * 
     * @type {UtxoMessageType}
     * @memberof UtxoMessage
     */
    utxoMessageType: UtxoMessageType;
    /**
     * 
     * @type {string}
     * @memberof UtxoMessage
     */
    rawData: string;
    /**
     * 
     * @type {EnrichedUtxoChain}
     * @memberof UtxoMessage
     */
    chain: EnrichedUtxoChain;
    /**
     * 
     * @type {string}
     * @memberof UtxoMessage
     */
    stringData: string;
    /**
     * 
     * @type {EnrichedUtxoAddress}
     * @memberof UtxoMessage
     */
    sender: EnrichedUtxoAddress;
}


/**
 * @export
 */
export const UtxoMessageTypeEnum = {
    utxoMessage: 'utxo_message'
} as const;
export type UtxoMessageTypeEnum = typeof UtxoMessageTypeEnum[keyof typeof UtxoMessageTypeEnum];


/**
 * Check if a given object implements the UtxoMessage interface.
 */
export function instanceOfUtxoMessage(value: object): value is UtxoMessage {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('signatures' in value) || value['signatures'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChanges' in value) || value['stateChanges'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('utxoMessageType' in value) || value['utxoMessageType'] === undefined) return false;
    if (!('rawData' in value) || value['rawData'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('stringData' in value) || value['stringData'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    return true;
}

export function UtxoMessageFromJSON(json: any): UtxoMessage {
    return UtxoMessageFromJSONTyped(json, false);
}

export function UtxoMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): UtxoMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': NonPushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(NonPushableTransactionStateChangeFromJSON)),
        'type': json['type'],
        'utxoMessageType': UtxoMessageTypeFromJSON(json['utxo_message_type']),
        'rawData': json['raw_data'],
        'chain': EnrichedUtxoChainFromJSON(json['chain']),
        'stringData': json['string_data'],
        'sender': EnrichedUtxoAddressFromJSON(json['sender']),
    };
}

export function UtxoMessageToJSON(json: any): UtxoMessage {
    return UtxoMessageToJSONTyped(json, false);
}

export function UtxoMessageToJSONTyped(value?: UtxoMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value['managedTransactionData']),
        'signatures': ((value['signatures'] as Array<any>).map(SignatureToJSON)),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'direction': TransactionDirectionToJSON(value['direction']),
        'signed_externally': value['signedExternally'],
        'state': NonPushableTransactionStateToJSON(value['state']),
        'state_changes': ((value['stateChanges'] as Array<any>).map(NonPushableTransactionStateChangeToJSON)),
        'type': value['type'],
        'utxo_message_type': UtxoMessageTypeToJSON(value['utxoMessageType']),
        'raw_data': value['rawData'],
        'chain': EnrichedUtxoChainToJSON(value['chain']),
        'string_data': value['stringData'],
        'sender': EnrichedUtxoAddressToJSON(value['sender']),
    };
}

