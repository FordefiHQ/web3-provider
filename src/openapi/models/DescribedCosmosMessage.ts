/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CosmosMessageData } from './CosmosMessageData';
import {
    CosmosMessageDataFromJSON,
    CosmosMessageDataFromJSONTyped,
    CosmosMessageDataToJSON,
} from './CosmosMessageData';
import type { CosmosMessageType } from './CosmosMessageType';
import {
    CosmosMessageTypeFromJSON,
    CosmosMessageTypeFromJSONTyped,
    CosmosMessageTypeToJSON,
} from './CosmosMessageType';
import type { EnrichedCosmosChain } from './EnrichedCosmosChain';
import {
    EnrichedCosmosChainFromJSON,
    EnrichedCosmosChainFromJSONTyped,
    EnrichedCosmosChainToJSON,
} from './EnrichedCosmosChain';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
} from './VaultRef';

/**
 * 
 * @export
 * @interface DescribedCosmosMessage
 */
export interface DescribedCosmosMessage {
    /**
     * 
     * @type {string}
     * @memberof DescribedCosmosMessage
     */
    type: DescribedCosmosMessageTypeEnum;
    /**
     * 
     * @type {VaultRef}
     * @memberof DescribedCosmosMessage
     */
    vault: VaultRef;
    /**
     * 
     * @type {CosmosMessageType}
     * @memberof DescribedCosmosMessage
     */
    cosmosMessageType: CosmosMessageType;
    /**
     * 
     * @type {EnrichedCosmosChain}
     * @memberof DescribedCosmosMessage
     */
    chain: EnrichedCosmosChain;
    /**
     * 
     * @type {CosmosMessageData}
     * @memberof DescribedCosmosMessage
     */
    data: CosmosMessageData;
}


/**
 * @export
 */
export const DescribedCosmosMessageTypeEnum = {
    cosmosMessage: 'cosmos_message'
} as const;
export type DescribedCosmosMessageTypeEnum = typeof DescribedCosmosMessageTypeEnum[keyof typeof DescribedCosmosMessageTypeEnum];


/**
 * Check if a given object implements the DescribedCosmosMessage interface.
 */
export function instanceOfDescribedCosmosMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "vault" in value;
    isInstance = isInstance && "cosmosMessageType" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function DescribedCosmosMessageFromJSON(json: any): DescribedCosmosMessage {
    return DescribedCosmosMessageFromJSONTyped(json, false);
}

export function DescribedCosmosMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): DescribedCosmosMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'vault': VaultRefFromJSON(json['vault']),
        'cosmosMessageType': CosmosMessageTypeFromJSON(json['cosmos_message_type']),
        'chain': EnrichedCosmosChainFromJSON(json['chain']),
        'data': CosmosMessageDataFromJSON(json['data']),
    };
}

export function DescribedCosmosMessageToJSON(value?: DescribedCosmosMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'vault': VaultRefToJSON(value.vault),
        'cosmos_message_type': CosmosMessageTypeToJSON(value.cosmosMessageType),
        'chain': EnrichedCosmosChainToJSON(value.chain),
        'data': CosmosMessageDataToJSON(value.data),
    };
}

