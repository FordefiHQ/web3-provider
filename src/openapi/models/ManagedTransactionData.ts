/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
    VaultRefToJSONTyped,
} from './VaultRef';
import type { AmlPolicyMatchOutgoing } from './AmlPolicyMatchOutgoing';
import {
    AmlPolicyMatchOutgoingFromJSON,
    AmlPolicyMatchOutgoingFromJSONTyped,
    AmlPolicyMatchOutgoingToJSON,
    AmlPolicyMatchOutgoingToJSONTyped,
} from './AmlPolicyMatchOutgoing';
import type { ActionSigningRequest } from './ActionSigningRequest';
import {
    ActionSigningRequestFromJSON,
    ActionSigningRequestFromJSONTyped,
    ActionSigningRequestToJSON,
    ActionSigningRequestToJSONTyped,
} from './ActionSigningRequest';
import type { TransactionRisk } from './TransactionRisk';
import {
    TransactionRiskFromJSON,
    TransactionRiskFromJSONTyped,
    TransactionRiskToJSON,
    TransactionRiskToJSONTyped,
} from './TransactionRisk';
import type { SignMode } from './SignMode';
import {
    SignModeFromJSON,
    SignModeFromJSONTyped,
    SignModeToJSON,
    SignModeToJSONTyped,
} from './SignMode';
import type { BatchData } from './BatchData';
import {
    BatchDataFromJSON,
    BatchDataFromJSONTyped,
    BatchDataToJSON,
    BatchDataToJSONTyped,
} from './BatchData';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
    ApprovalRequestToJSONTyped,
} from './ApprovalRequest';
import type { PolicyMatch } from './PolicyMatch';
import {
    PolicyMatchFromJSON,
    PolicyMatchFromJSONTyped,
    PolicyMatchToJSON,
    PolicyMatchToJSONTyped,
} from './PolicyMatch';
import type { SignerType } from './SignerType';
import {
    SignerTypeFromJSON,
    SignerTypeFromJSONTyped,
    SignerTypeToJSON,
    SignerTypeToJSONTyped,
} from './SignerType';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
    UserRefToJSONTyped,
} from './UserRef';
import type { PushMode } from './PushMode';
import {
    PushModeFromJSON,
    PushModeFromJSONTyped,
    PushModeToJSON,
    PushModeToJSONTyped,
} from './PushMode';

/**
 * 
 * @export
 * @interface ManagedTransactionData
 */
export interface ManagedTransactionData {
    /**
     * 
     * @type {UserRef}
     * @memberof ManagedTransactionData
     */
    createdBy: UserRef;
    /**
     * 
     * @type {UserRef}
     * @memberof ManagedTransactionData
     */
    abortedBy?: UserRef;
    /**
     * 
     * @type {ActionSigningRequest}
     * @memberof ManagedTransactionData
     */
    deviceSigningRequest?: ActionSigningRequest;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof ManagedTransactionData
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {AmlPolicyMatchOutgoing}
     * @memberof ManagedTransactionData
     */
    amlPolicyMatch?: AmlPolicyMatchOutgoing;
    /**
     * 
     * @type {PolicyMatch}
     * @memberof ManagedTransactionData
     */
    policyMatch?: PolicyMatch;
    /**
     * 
     * @type {SignerType}
     * @memberof ManagedTransactionData
     */
    signerType: SignerType;
    /**
     * 
     * @type {Array<TransactionRisk>}
     * @memberof ManagedTransactionData
     */
    risks: Array<TransactionRisk>;
    /**
     * 
     * @type {string}
     * @memberof ManagedTransactionData
     */
    errorPushingToBlockchainMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedTransactionData
     */
    originalErrorPushingToBlockchainMessage?: string;
    /**
     * 
     * @type {VaultRef}
     * @memberof ManagedTransactionData
     */
    vault: VaultRef;
    /**
     * 
     * @type {string}
     * @memberof ManagedTransactionData
     */
    idempotenceId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ManagedTransactionData
     */
    hasCurrentUserVaultPermissions: boolean;
    /**
     * 
     * @type {BatchData}
     * @memberof ManagedTransactionData
     */
    batchData?: BatchData;
    /**
     * 
     * @type {PushMode}
     * @memberof ManagedTransactionData
     */
    pushMode?: PushMode;
    /**
     * 
     * @type {Date}
     * @memberof ManagedTransactionData
     */
    lastPushedAt?: Date;
    /**
     * 
     * @type {SignMode}
     * @memberof ManagedTransactionData
     */
    signMode?: SignMode;
}



/**
 * Check if a given object implements the ManagedTransactionData interface.
 */
export function instanceOfManagedTransactionData(value: object): value is ManagedTransactionData {
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('signerType' in value) || value['signerType'] === undefined) return false;
    if (!('risks' in value) || value['risks'] === undefined) return false;
    if (!('vault' in value) || value['vault'] === undefined) return false;
    if (!('hasCurrentUserVaultPermissions' in value) || value['hasCurrentUserVaultPermissions'] === undefined) return false;
    return true;
}

export function ManagedTransactionDataFromJSON(json: any): ManagedTransactionData {
    return ManagedTransactionDataFromJSONTyped(json, false);
}

export function ManagedTransactionDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManagedTransactionData {
    if (json == null) {
        return json;
    }
    return {
        
        'createdBy': UserRefFromJSON(json['created_by']),
        'abortedBy': json['aborted_by'] == null ? undefined : UserRefFromJSON(json['aborted_by']),
        'deviceSigningRequest': json['device_signing_request'] == null ? undefined : ActionSigningRequestFromJSON(json['device_signing_request']),
        'approvalRequest': json['approval_request'] == null ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'amlPolicyMatch': json['aml_policy_match'] == null ? undefined : AmlPolicyMatchOutgoingFromJSON(json['aml_policy_match']),
        'policyMatch': json['policy_match'] == null ? undefined : PolicyMatchFromJSON(json['policy_match']),
        'signerType': SignerTypeFromJSON(json['signer_type']),
        'risks': ((json['risks'] as Array<any>).map(TransactionRiskFromJSON)),
        'errorPushingToBlockchainMessage': json['error_pushing_to_blockchain_message'] == null ? undefined : json['error_pushing_to_blockchain_message'],
        'originalErrorPushingToBlockchainMessage': json['original_error_pushing_to_blockchain_message'] == null ? undefined : json['original_error_pushing_to_blockchain_message'],
        'vault': VaultRefFromJSON(json['vault']),
        'idempotenceId': json['idempotence_id'] == null ? undefined : json['idempotence_id'],
        'hasCurrentUserVaultPermissions': json['has_current_user_vault_permissions'],
        'batchData': json['batch_data'] == null ? undefined : BatchDataFromJSON(json['batch_data']),
        'pushMode': json['push_mode'] == null ? undefined : PushModeFromJSON(json['push_mode']),
        'lastPushedAt': json['last_pushed_at'] == null ? undefined : (new Date(json['last_pushed_at'])),
        'signMode': json['sign_mode'] == null ? undefined : SignModeFromJSON(json['sign_mode']),
    };
}

export function ManagedTransactionDataToJSON(json: any): ManagedTransactionData {
    return ManagedTransactionDataToJSONTyped(json, false);
}

export function ManagedTransactionDataToJSONTyped(value?: ManagedTransactionData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_by': UserRefToJSON(value['createdBy']),
        'aborted_by': UserRefToJSON(value['abortedBy']),
        'device_signing_request': ActionSigningRequestToJSON(value['deviceSigningRequest']),
        'approval_request': ApprovalRequestToJSON(value['approvalRequest']),
        'aml_policy_match': AmlPolicyMatchOutgoingToJSON(value['amlPolicyMatch']),
        'policy_match': PolicyMatchToJSON(value['policyMatch']),
        'signer_type': SignerTypeToJSON(value['signerType']),
        'risks': ((value['risks'] as Array<any>).map(TransactionRiskToJSON)),
        'error_pushing_to_blockchain_message': value['errorPushingToBlockchainMessage'],
        'original_error_pushing_to_blockchain_message': value['originalErrorPushingToBlockchainMessage'],
        'vault': VaultRefToJSON(value['vault']),
        'idempotence_id': value['idempotenceId'],
        'has_current_user_vault_permissions': value['hasCurrentUserVaultPermissions'],
        'batch_data': BatchDataToJSON(value['batchData']),
        'push_mode': PushModeToJSON(value['pushMode']),
        'last_pushed_at': value['lastPushedAt'] == null ? undefined : ((value['lastPushedAt']).toISOString()),
        'sign_mode': SignModeToJSON(value['signMode']),
    };
}

