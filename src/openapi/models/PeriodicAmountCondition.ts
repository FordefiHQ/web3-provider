/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PeriodicAmountScopeType } from './PeriodicAmountScopeType';
import {
    PeriodicAmountScopeTypeFromJSON,
    PeriodicAmountScopeTypeFromJSONTyped,
    PeriodicAmountScopeTypeToJSON,
} from './PeriodicAmountScopeType';
import type { PeriodicAmountThresholdType } from './PeriodicAmountThresholdType';
import {
    PeriodicAmountThresholdTypeFromJSON,
    PeriodicAmountThresholdTypeFromJSONTyped,
    PeriodicAmountThresholdTypeToJSON,
} from './PeriodicAmountThresholdType';
import type { PeriodicAmountTimePeriod } from './PeriodicAmountTimePeriod';
import {
    PeriodicAmountTimePeriodFromJSON,
    PeriodicAmountTimePeriodFromJSONTyped,
    PeriodicAmountTimePeriodToJSON,
} from './PeriodicAmountTimePeriod';

/**
 * 
 * @export
 * @interface PeriodicAmountCondition
 */
export interface PeriodicAmountCondition {
    /**
     * 
     * @type {string}
     * @memberof PeriodicAmountCondition
     */
    threshold: string;
    /**
     * 
     * @type {PeriodicAmountThresholdType}
     * @memberof PeriodicAmountCondition
     */
    thresholdType: PeriodicAmountThresholdType;
    /**
     * 
     * @type {PeriodicAmountTimePeriod}
     * @memberof PeriodicAmountCondition
     */
    timePeriod: PeriodicAmountTimePeriod;
    /**
     * 
     * @type {PeriodicAmountScopeType}
     * @memberof PeriodicAmountCondition
     */
    userScope: PeriodicAmountScopeType;
    /**
     * 
     * @type {PeriodicAmountScopeType}
     * @memberof PeriodicAmountCondition
     */
    vaultScope: PeriodicAmountScopeType;
}

/**
 * Check if a given object implements the PeriodicAmountCondition interface.
 */
export function instanceOfPeriodicAmountCondition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "threshold" in value;
    isInstance = isInstance && "thresholdType" in value;
    isInstance = isInstance && "timePeriod" in value;
    isInstance = isInstance && "userScope" in value;
    isInstance = isInstance && "vaultScope" in value;

    return isInstance;
}

export function PeriodicAmountConditionFromJSON(json: any): PeriodicAmountCondition {
    return PeriodicAmountConditionFromJSONTyped(json, false);
}

export function PeriodicAmountConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PeriodicAmountCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'threshold': json['threshold'],
        'thresholdType': PeriodicAmountThresholdTypeFromJSON(json['threshold_type']),
        'timePeriod': PeriodicAmountTimePeriodFromJSON(json['time_period']),
        'userScope': PeriodicAmountScopeTypeFromJSON(json['user_scope']),
        'vaultScope': PeriodicAmountScopeTypeFromJSON(json['vault_scope']),
    };
}

export function PeriodicAmountConditionToJSON(value?: PeriodicAmountCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'threshold': value.threshold,
        'threshold_type': PeriodicAmountThresholdTypeToJSON(value.thresholdType),
        'time_period': PeriodicAmountTimePeriodToJSON(value.timePeriod),
        'user_scope': PeriodicAmountScopeTypeToJSON(value.userScope),
        'vault_scope': PeriodicAmountScopeTypeToJSON(value.vaultScope),
    };
}

