/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SuiPureBoolInput } from './SuiPureBoolInput';
import {
    instanceOfSuiPureBoolInput,
    SuiPureBoolInputFromJSON,
    SuiPureBoolInputFromJSONTyped,
    SuiPureBoolInputToJSON,
} from './SuiPureBoolInput';
import type { SuiPureByteArrayInput } from './SuiPureByteArrayInput';
import {
    instanceOfSuiPureByteArrayInput,
    SuiPureByteArrayInputFromJSON,
    SuiPureByteArrayInputFromJSONTyped,
    SuiPureByteArrayInputToJSON,
} from './SuiPureByteArrayInput';
import type { SuiPureNumberInput } from './SuiPureNumberInput';
import {
    instanceOfSuiPureNumberInput,
    SuiPureNumberInputFromJSON,
    SuiPureNumberInputFromJSONTyped,
    SuiPureNumberInputToJSON,
} from './SuiPureNumberInput';
import type { SuiPureStringInput } from './SuiPureStringInput';
import {
    instanceOfSuiPureStringInput,
    SuiPureStringInputFromJSON,
    SuiPureStringInputFromJSONTyped,
    SuiPureStringInputToJSON,
} from './SuiPureStringInput';

/**
 * @type BaseSuiPureInputValue
 * 
 * @export
 */
export type BaseSuiPureInputValue = { type: 'bool_pure_input' } & SuiPureBoolInput | { type: 'byte_array_pure_input' } & SuiPureByteArrayInput | { type: 'number_pure_input' } & SuiPureNumberInput | { type: 'string_pure_input' } & SuiPureStringInput;

export function BaseSuiPureInputValueFromJSON(json: any): BaseSuiPureInputValue {
    return BaseSuiPureInputValueFromJSONTyped(json, false);
}

export function BaseSuiPureInputValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseSuiPureInputValue {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'bool_pure_input':
            return Object.assign({}, SuiPureBoolInputFromJSONTyped(json, true), { type: 'bool_pure_input' } as const);
        case 'byte_array_pure_input':
            return Object.assign({}, SuiPureByteArrayInputFromJSONTyped(json, true), { type: 'byte_array_pure_input' } as const);
        case 'number_pure_input':
            return Object.assign({}, SuiPureNumberInputFromJSONTyped(json, true), { type: 'number_pure_input' } as const);
        case 'string_pure_input':
            return Object.assign({}, SuiPureStringInputFromJSONTyped(json, true), { type: 'string_pure_input' } as const);
        default:
            throw new Error(`No variant of BaseSuiPureInputValue exists with 'type=${json['type']}'`);
    }
}

export function BaseSuiPureInputValueToJSON(json: any): any {
    return BaseSuiPureInputValueToJSONTyped(json, false);
}

export function BaseSuiPureInputValueToJSONTyped(value?: BaseSuiPureInputValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'bool_pure_input':
            return Object.assign({}, SuiPureBoolInputToJSON(value), { type: 'bool_pure_input' } as const);
        case 'byte_array_pure_input':
            return Object.assign({}, SuiPureByteArrayInputToJSON(value), { type: 'byte_array_pure_input' } as const);
        case 'number_pure_input':
            return Object.assign({}, SuiPureNumberInputToJSON(value), { type: 'number_pure_input' } as const);
        case 'string_pure_input':
            return Object.assign({}, SuiPureStringInputToJSON(value), { type: 'string_pure_input' } as const);
        default:
            throw new Error(`No variant of BaseSuiPureInputValue exists with 'type=${value['type']}'`);
    }

}

