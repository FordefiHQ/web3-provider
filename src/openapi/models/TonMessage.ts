/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
} from './EnrichedTonAddress';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
} from './ManagedTransactionData';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
} from './TransactionDirection';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSON,
} from './EnrichedTonChain';
import type { TonMessageType } from './TonMessageType';
import {
    TonMessageTypeFromJSON,
} from './TonMessageType';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
} from './Signature';
import type { NonPushableTransactionStateChange } from './NonPushableTransactionStateChange';
import {
    NonPushableTransactionStateChangeFromJSON,
} from './NonPushableTransactionStateChange';
import type { NonPushableTransactionState } from './NonPushableTransactionState';
import {
    NonPushableTransactionStateFromJSON,
} from './NonPushableTransactionState';

/**
 * 
 * @export
 * @interface TonMessage
 */
export interface TonMessage {
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TonMessage
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TonMessage
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof TonMessage
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof TonMessage
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof TonMessage
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof TonMessage
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof TonMessage
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {NonPushableTransactionState}
     * @memberof TonMessage
     */
    state: NonPushableTransactionState;
    /**
     * 
     * @type {Array<NonPushableTransactionStateChange>}
     * @memberof TonMessage
     */
    stateChanges: Array<NonPushableTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    type: TonMessageTypeEnum;
    /**
     * 
     * @type {TonMessageType}
     * @memberof TonMessage
     */
    tonMessageType: TonMessageType;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    rawPayloadToSign: string;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    stringPayloadToSign: string;
    /**
     * 
     * @type {EnrichedTonChain}
     * @memberof TonMessage
     */
    chain: EnrichedTonChain;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonMessage
     */
    sender: EnrichedTonAddress;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    domain: string;
    /**
     * 
     * @type {number}
     * @memberof TonMessage
     */
    domainBytesLength: number;
    /**
     * 
     * @type {number}
     * @memberof TonMessage
     */
    timestamp: number;
}


/**
 * 
 */
const TonMessageTypeEnum = {
    tonMessage: 'ton_message'
} as const;
type TonMessageTypeEnum = typeof TonMessageTypeEnum[keyof typeof TonMessageTypeEnum];

export function TonMessageFromJSONTyped(json: any, _ignoreDiscriminator: boolean): TonMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': NonPushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(NonPushableTransactionStateChangeFromJSON)),
        'type': json['type'],
        'tonMessageType': TonMessageTypeFromJSON(json['ton_message_type']),
        'rawPayloadToSign': json['raw_payload_to_sign'],
        'stringPayloadToSign': json['string_payload_to_sign'],
        'chain': EnrichedTonChainFromJSON(json['chain']),
        'sender': EnrichedTonAddressFromJSON(json['sender']),
        'domain': json['domain'],
        'domainBytesLength': json['domain_bytes_length'],
        'timestamp': json['timestamp'],
    };
}
