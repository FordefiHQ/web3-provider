/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
    EnrichedTonAddressFromJSONTyped,
    EnrichedTonAddressToJSON,
} from './EnrichedTonAddress';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSON,
    EnrichedTonChainFromJSONTyped,
    EnrichedTonChainToJSON,
} from './EnrichedTonChain';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
} from './ManagedTransactionData';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { TonMessageState } from './TonMessageState';
import {
    TonMessageStateFromJSON,
    TonMessageStateFromJSONTyped,
    TonMessageStateToJSON,
} from './TonMessageState';
import type { TonMessageStateChange } from './TonMessageStateChange';
import {
    TonMessageStateChangeFromJSON,
    TonMessageStateChangeFromJSONTyped,
    TonMessageStateChangeToJSON,
} from './TonMessageStateChange';
import type { TonMessageType } from './TonMessageType';
import {
    TonMessageTypeFromJSON,
    TonMessageTypeFromJSONTyped,
    TonMessageTypeToJSON,
} from './TonMessageType';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface TonMessage
 */
export interface TonMessage {
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TonMessage
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TonMessage
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof TonMessage
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof TonMessage
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof TonMessage
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof TonMessage
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    type: TonMessageTypeEnum;
    /**
     * 
     * @type {TonMessageType}
     * @memberof TonMessage
     */
    tonMessageType: TonMessageType;
    /**
     * 
     * @type {TonMessageState}
     * @memberof TonMessage
     */
    state: TonMessageState;
    /**
     * 
     * @type {Array<TonMessageStateChange>}
     * @memberof TonMessage
     */
    stateChanges: Array<TonMessageStateChange>;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    rawPayloadToSign: string;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    stringPayloadToSign: string;
    /**
     * 
     * @type {EnrichedTonChain}
     * @memberof TonMessage
     */
    chain: EnrichedTonChain;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonMessage
     */
    sender: EnrichedTonAddress;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    domain: string;
    /**
     * 
     * @type {number}
     * @memberof TonMessage
     */
    domainBytesLength: number;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    timestamp: string;
}


/**
 * @export
 */
export const TonMessageTypeEnum = {
    tonMessage: 'ton_message'
} as const;
export type TonMessageTypeEnum = typeof TonMessageTypeEnum[keyof typeof TonMessageTypeEnum];


/**
 * Check if a given object implements the TonMessage interface.
 */
export function instanceOfTonMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tonMessageType" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChanges" in value;
    isInstance = isInstance && "rawPayloadToSign" in value;
    isInstance = isInstance && "stringPayloadToSign" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "domainBytesLength" in value;
    isInstance = isInstance && "timestamp" in value;

    return isInstance;
}

export function TonMessageFromJSON(json: any): TonMessage {
    return TonMessageFromJSONTyped(json, false);
}

export function TonMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): TonMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': !exists(json, 'managed_transaction_data') ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': !exists(json, 'spam_state') ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'type': json['type'],
        'tonMessageType': TonMessageTypeFromJSON(json['ton_message_type']),
        'state': TonMessageStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(TonMessageStateChangeFromJSON)),
        'rawPayloadToSign': json['raw_payload_to_sign'],
        'stringPayloadToSign': json['string_payload_to_sign'],
        'chain': EnrichedTonChainFromJSON(json['chain']),
        'sender': EnrichedTonAddressFromJSON(json['sender']),
        'domain': json['domain'],
        'domainBytesLength': json['domain_bytes_length'],
        'timestamp': json['timestamp'],
    };
}

export function TonMessageToJSON(value?: TonMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value.managedTransactionData),
        'signatures': ((value.signatures as Array<any>).map(SignatureToJSON)),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'direction': TransactionDirectionToJSON(value.direction),
        'type': value.type,
        'ton_message_type': TonMessageTypeToJSON(value.tonMessageType),
        'state': TonMessageStateToJSON(value.state),
        'state_changes': ((value.stateChanges as Array<any>).map(TonMessageStateChangeToJSON)),
        'raw_payload_to_sign': value.rawPayloadToSign,
        'string_payload_to_sign': value.stringPayloadToSign,
        'chain': EnrichedTonChainToJSON(value.chain),
        'sender': EnrichedTonAddressToJSON(value.sender),
        'domain': value.domain,
        'domain_bytes_length': value.domainBytesLength,
        'timestamp': value.timestamp,
    };
}

