/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
    EnrichedTonAddressFromJSONTyped,
    EnrichedTonAddressToJSON,
    EnrichedTonAddressToJSONTyped,
} from './EnrichedTonAddress';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
    ManagedTransactionDataToJSONTyped,
} from './ManagedTransactionData';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { EnrichedTonChain } from './EnrichedTonChain';
import {
    EnrichedTonChainFromJSON,
    EnrichedTonChainFromJSONTyped,
    EnrichedTonChainToJSON,
    EnrichedTonChainToJSONTyped,
} from './EnrichedTonChain';
import type { TonMessageType } from './TonMessageType';
import {
    TonMessageTypeFromJSON,
    TonMessageTypeFromJSONTyped,
    TonMessageTypeToJSON,
    TonMessageTypeToJSONTyped,
} from './TonMessageType';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
    SignatureToJSONTyped,
} from './Signature';
import type { NonPushableTransactionStateChange } from './NonPushableTransactionStateChange';
import {
    NonPushableTransactionStateChangeFromJSON,
    NonPushableTransactionStateChangeFromJSONTyped,
    NonPushableTransactionStateChangeToJSON,
    NonPushableTransactionStateChangeToJSONTyped,
} from './NonPushableTransactionStateChange';
import type { NonPushableTransactionState } from './NonPushableTransactionState';
import {
    NonPushableTransactionStateFromJSON,
    NonPushableTransactionStateFromJSONTyped,
    NonPushableTransactionStateToJSON,
    NonPushableTransactionStateToJSONTyped,
} from './NonPushableTransactionState';

/**
 * 
 * @export
 * @interface TonMessage
 */
export interface TonMessage {
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof TonMessage
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TonMessage
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof TonMessage
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof TonMessage
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof TonMessage
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof TonMessage
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof TonMessage
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {NonPushableTransactionState}
     * @memberof TonMessage
     */
    state: NonPushableTransactionState;
    /**
     * 
     * @type {Array<NonPushableTransactionStateChange>}
     * @memberof TonMessage
     */
    stateChanges: Array<NonPushableTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    type: TonMessageTypeEnum;
    /**
     * 
     * @type {TonMessageType}
     * @memberof TonMessage
     */
    tonMessageType: TonMessageType;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    rawPayloadToSign: string;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    stringPayloadToSign: string;
    /**
     * 
     * @type {EnrichedTonChain}
     * @memberof TonMessage
     */
    chain: EnrichedTonChain;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonMessage
     */
    sender: EnrichedTonAddress;
    /**
     * 
     * @type {string}
     * @memberof TonMessage
     */
    domain: string;
    /**
     * 
     * @type {number}
     * @memberof TonMessage
     */
    domainBytesLength: number;
    /**
     * 
     * @type {number}
     * @memberof TonMessage
     */
    timestamp: number;
}


/**
 * @export
 */
export const TonMessageTypeEnum = {
    tonMessage: 'ton_message'
} as const;
export type TonMessageTypeEnum = typeof TonMessageTypeEnum[keyof typeof TonMessageTypeEnum];


/**
 * Check if a given object implements the TonMessage interface.
 */
export function instanceOfTonMessage(value: object): value is TonMessage {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('signatures' in value) || value['signatures'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChanges' in value) || value['stateChanges'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('tonMessageType' in value) || value['tonMessageType'] === undefined) return false;
    if (!('rawPayloadToSign' in value) || value['rawPayloadToSign'] === undefined) return false;
    if (!('stringPayloadToSign' in value) || value['stringPayloadToSign'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('domain' in value) || value['domain'] === undefined) return false;
    if (!('domainBytesLength' in value) || value['domainBytesLength'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function TonMessageFromJSON(json: any): TonMessage {
    return TonMessageFromJSONTyped(json, false);
}

export function TonMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): TonMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': NonPushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(NonPushableTransactionStateChangeFromJSON)),
        'type': json['type'],
        'tonMessageType': TonMessageTypeFromJSON(json['ton_message_type']),
        'rawPayloadToSign': json['raw_payload_to_sign'],
        'stringPayloadToSign': json['string_payload_to_sign'],
        'chain': EnrichedTonChainFromJSON(json['chain']),
        'sender': EnrichedTonAddressFromJSON(json['sender']),
        'domain': json['domain'],
        'domainBytesLength': json['domain_bytes_length'],
        'timestamp': json['timestamp'],
    };
}

export function TonMessageToJSON(json: any): TonMessage {
    return TonMessageToJSONTyped(json, false);
}

export function TonMessageToJSONTyped(value?: TonMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value['managedTransactionData']),
        'signatures': ((value['signatures'] as Array<any>).map(SignatureToJSON)),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'direction': TransactionDirectionToJSON(value['direction']),
        'signed_externally': value['signedExternally'],
        'state': NonPushableTransactionStateToJSON(value['state']),
        'state_changes': ((value['stateChanges'] as Array<any>).map(NonPushableTransactionStateChangeToJSON)),
        'type': value['type'],
        'ton_message_type': TonMessageTypeToJSON(value['tonMessageType']),
        'raw_payload_to_sign': value['rawPayloadToSign'],
        'string_payload_to_sign': value['stringPayloadToSign'],
        'chain': EnrichedTonChainToJSON(value['chain']),
        'sender': EnrichedTonAddressToJSON(value['sender']),
        'domain': value['domain'],
        'domain_bytes_length': value['domainBytesLength'],
        'timestamp': value['timestamp'],
    };
}

