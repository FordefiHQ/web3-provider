/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AmountLimitCondition } from './AmountLimitCondition';
import {
    AmountLimitConditionFromJSON,
    AmountLimitConditionFromJSONTyped,
    AmountLimitConditionToJSON,
} from './AmountLimitCondition';
import type { CosmosRuleConditions } from './CosmosRuleConditions';
import {
    CosmosRuleConditionsFromJSON,
    CosmosRuleConditionsFromJSONTyped,
    CosmosRuleConditionsToJSON,
} from './CosmosRuleConditions';
import type { InitiatorsCondition } from './InitiatorsCondition';
import {
    InitiatorsConditionFromJSON,
    InitiatorsConditionFromJSONTyped,
    InitiatorsConditionToJSON,
} from './InitiatorsCondition';
import type { PeriodicAmountCondition } from './PeriodicAmountCondition';
import {
    PeriodicAmountConditionFromJSON,
    PeriodicAmountConditionFromJSONTyped,
    PeriodicAmountConditionToJSON,
} from './PeriodicAmountCondition';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
} from './PricedAsset';
import type { RecipientsCondition } from './RecipientsCondition';
import {
    RecipientsConditionFromJSON,
    RecipientsConditionFromJSONTyped,
    RecipientsConditionToJSON,
} from './RecipientsCondition';
import type { TransactionTypeCondition } from './TransactionTypeCondition';
import {
    TransactionTypeConditionFromJSON,
    TransactionTypeConditionFromJSONTyped,
    TransactionTypeConditionToJSON,
} from './TransactionTypeCondition';
import type { VaultGroupRef } from './VaultGroupRef';
import {
    VaultGroupRefFromJSON,
    VaultGroupRefFromJSONTyped,
    VaultGroupRefToJSON,
} from './VaultGroupRef';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
} from './VaultRef';

/**
 * 
 * @export
 * @interface TransactionRuleConditions
 */
export interface TransactionRuleConditions {
    /**
     * 
     * @type {Array<TransactionTypeCondition>}
     * @memberof TransactionRuleConditions
     */
    transactionTypes?: Array<TransactionTypeCondition>;
    /**
     * 
     * @type {InitiatorsCondition}
     * @memberof TransactionRuleConditions
     */
    transactionInitiators: InitiatorsCondition;
    /**
     * 
     * @type {Array<VaultRef>}
     * @memberof TransactionRuleConditions
     */
    originVaults?: Array<VaultRef>;
    /**
     * 
     * @type {Array<VaultGroupRef>}
     * @memberof TransactionRuleConditions
     */
    originVaultGroups?: Array<VaultGroupRef>;
    /**
     * 
     * @type {RecipientsCondition}
     * @memberof TransactionRuleConditions
     */
    recipients: RecipientsCondition;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionRuleConditions
     */
    abiMethods: Array<string>;
    /**
     * 
     * @type {Array<PricedAsset>}
     * @memberof TransactionRuleConditions
     */
    transactionAssets?: Array<PricedAsset>;
    /**
     * 
     * @type {AmountLimitCondition}
     * @memberof TransactionRuleConditions
     */
    amountLimit?: AmountLimitCondition;
    /**
     * 
     * @type {PeriodicAmountCondition}
     * @memberof TransactionRuleConditions
     */
    periodicAmount?: PeriodicAmountCondition;
    /**
     * 
     * @type {CosmosRuleConditions}
     * @memberof TransactionRuleConditions
     */
    cosmosConditions?: CosmosRuleConditions;
}

/**
 * Check if a given object implements the TransactionRuleConditions interface.
 */
export function instanceOfTransactionRuleConditions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionInitiators" in value;
    isInstance = isInstance && "recipients" in value;
    isInstance = isInstance && "abiMethods" in value;

    return isInstance;
}

export function TransactionRuleConditionsFromJSON(json: any): TransactionRuleConditions {
    return TransactionRuleConditionsFromJSONTyped(json, false);
}

export function TransactionRuleConditionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRuleConditions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionTypes': !exists(json, 'transaction_types') ? undefined : ((json['transaction_types'] as Array<any>).map(TransactionTypeConditionFromJSON)),
        'transactionInitiators': InitiatorsConditionFromJSON(json['transaction_initiators']),
        'originVaults': !exists(json, 'origin_vaults') ? undefined : ((json['origin_vaults'] as Array<any>).map(VaultRefFromJSON)),
        'originVaultGroups': !exists(json, 'origin_vault_groups') ? undefined : ((json['origin_vault_groups'] as Array<any>).map(VaultGroupRefFromJSON)),
        'recipients': RecipientsConditionFromJSON(json['recipients']),
        'abiMethods': json['abi_methods'],
        'transactionAssets': !exists(json, 'transaction_assets') ? undefined : ((json['transaction_assets'] as Array<any>).map(PricedAssetFromJSON)),
        'amountLimit': !exists(json, 'amount_limit') ? undefined : AmountLimitConditionFromJSON(json['amount_limit']),
        'periodicAmount': !exists(json, 'periodic_amount') ? undefined : PeriodicAmountConditionFromJSON(json['periodic_amount']),
        'cosmosConditions': !exists(json, 'cosmos_conditions') ? undefined : CosmosRuleConditionsFromJSON(json['cosmos_conditions']),
    };
}

export function TransactionRuleConditionsToJSON(value?: TransactionRuleConditions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_types': value.transactionTypes === undefined ? undefined : ((value.transactionTypes as Array<any>).map(TransactionTypeConditionToJSON)),
        'transaction_initiators': InitiatorsConditionToJSON(value.transactionInitiators),
        'origin_vaults': value.originVaults === undefined ? undefined : ((value.originVaults as Array<any>).map(VaultRefToJSON)),
        'origin_vault_groups': value.originVaultGroups === undefined ? undefined : ((value.originVaultGroups as Array<any>).map(VaultGroupRefToJSON)),
        'recipients': RecipientsConditionToJSON(value.recipients),
        'abi_methods': value.abiMethods,
        'transaction_assets': value.transactionAssets === undefined ? undefined : ((value.transactionAssets as Array<any>).map(PricedAssetToJSON)),
        'amount_limit': AmountLimitConditionToJSON(value.amountLimit),
        'periodic_amount': PeriodicAmountConditionToJSON(value.periodicAmount),
        'cosmos_conditions': CosmosRuleConditionsToJSON(value.cosmosConditions),
    };
}

