/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AmountLimitCondition } from './AmountLimitCondition';
import {
    AmountLimitConditionFromJSON,
    AmountLimitConditionFromJSONTyped,
    AmountLimitConditionToJSON,
    AmountLimitConditionToJSONTyped,
} from './AmountLimitCondition';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
    VaultRefToJSONTyped,
} from './VaultRef';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
    PricedAssetToJSONTyped,
} from './PricedAsset';
import type { TransactionTypeCondition } from './TransactionTypeCondition';
import {
    TransactionTypeConditionFromJSON,
    TransactionTypeConditionFromJSONTyped,
    TransactionTypeConditionToJSON,
    TransactionTypeConditionToJSONTyped,
} from './TransactionTypeCondition';
import type { VaultGroupRef } from './VaultGroupRef';
import {
    VaultGroupRefFromJSON,
    VaultGroupRefFromJSONTyped,
    VaultGroupRefToJSON,
    VaultGroupRefToJSONTyped,
} from './VaultGroupRef';
import type { PeriodicAmountCondition } from './PeriodicAmountCondition';
import {
    PeriodicAmountConditionFromJSON,
    PeriodicAmountConditionFromJSONTyped,
    PeriodicAmountConditionToJSON,
    PeriodicAmountConditionToJSONTyped,
} from './PeriodicAmountCondition';
import type { CosmosRuleConditions } from './CosmosRuleConditions';
import {
    CosmosRuleConditionsFromJSON,
    CosmosRuleConditionsFromJSONTyped,
    CosmosRuleConditionsToJSON,
    CosmosRuleConditionsToJSONTyped,
} from './CosmosRuleConditions';
import type { Eip712MessageConditions } from './Eip712MessageConditions';
import {
    Eip712MessageConditionsFromJSON,
    Eip712MessageConditionsFromJSONTyped,
    Eip712MessageConditionsToJSON,
    Eip712MessageConditionsToJSONTyped,
} from './Eip712MessageConditions';
import type { RecipientsCondition } from './RecipientsCondition';
import {
    RecipientsConditionFromJSON,
    RecipientsConditionFromJSONTyped,
    RecipientsConditionToJSON,
    RecipientsConditionToJSONTyped,
} from './RecipientsCondition';
import type { OriginsCondition } from './OriginsCondition';
import {
    OriginsConditionFromJSON,
    OriginsConditionFromJSONTyped,
    OriginsConditionToJSON,
    OriginsConditionToJSONTyped,
} from './OriginsCondition';
import type { InitiatorsCondition } from './InitiatorsCondition';
import {
    InitiatorsConditionFromJSON,
    InitiatorsConditionFromJSONTyped,
    InitiatorsConditionToJSON,
    InitiatorsConditionToJSONTyped,
} from './InitiatorsCondition';

/**
 * 
 * @export
 * @interface TransactionRuleConditions
 */
export interface TransactionRuleConditions {
    /**
     * 
     * @type {Array<TransactionTypeCondition>}
     * @memberof TransactionRuleConditions
     */
    transactionTypes?: Array<TransactionTypeCondition>;
    /**
     * 
     * @type {InitiatorsCondition}
     * @memberof TransactionRuleConditions
     */
    transactionInitiators: InitiatorsCondition;
    /**
     * 
     * @type {OriginsCondition}
     * @memberof TransactionRuleConditions
     */
    origins: OriginsCondition;
    /**
     * 
     * @type {Array<VaultRef>}
     * @memberof TransactionRuleConditions
     * @deprecated
     */
    originVaults?: Array<VaultRef>;
    /**
     * 
     * @type {Array<VaultGroupRef>}
     * @memberof TransactionRuleConditions
     * @deprecated
     */
    originVaultGroups?: Array<VaultGroupRef>;
    /**
     * 
     * @type {RecipientsCondition}
     * @memberof TransactionRuleConditions
     */
    recipients: RecipientsCondition;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionRuleConditions
     */
    abiMethods: Array<string>;
    /**
     * 
     * @type {Array<PricedAsset>}
     * @memberof TransactionRuleConditions
     */
    transactionAssets?: Array<PricedAsset>;
    /**
     * 
     * @type {AmountLimitCondition}
     * @memberof TransactionRuleConditions
     */
    amountLimit?: AmountLimitCondition;
    /**
     * 
     * @type {PeriodicAmountCondition}
     * @memberof TransactionRuleConditions
     */
    periodicAmount?: PeriodicAmountCondition;
    /**
     * 
     * @type {CosmosRuleConditions}
     * @memberof TransactionRuleConditions
     */
    cosmosConditions?: CosmosRuleConditions;
    /**
     * 
     * @type {Eip712MessageConditions}
     * @memberof TransactionRuleConditions
     */
    eip712Message?: Eip712MessageConditions;
}

/**
 * Check if a given object implements the TransactionRuleConditions interface.
 */
export function instanceOfTransactionRuleConditions(value: object): value is TransactionRuleConditions {
    if (!('transactionInitiators' in value) || value['transactionInitiators'] === undefined) return false;
    if (!('origins' in value) || value['origins'] === undefined) return false;
    if (!('recipients' in value) || value['recipients'] === undefined) return false;
    if (!('abiMethods' in value) || value['abiMethods'] === undefined) return false;
    return true;
}

export function TransactionRuleConditionsFromJSON(json: any): TransactionRuleConditions {
    return TransactionRuleConditionsFromJSONTyped(json, false);
}

export function TransactionRuleConditionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRuleConditions {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionTypes': json['transaction_types'] == null ? undefined : ((json['transaction_types'] as Array<any>).map(TransactionTypeConditionFromJSON)),
        'transactionInitiators': InitiatorsConditionFromJSON(json['transaction_initiators']),
        'origins': OriginsConditionFromJSON(json['origins']),
        'originVaults': json['origin_vaults'] == null ? undefined : ((json['origin_vaults'] as Array<any>).map(VaultRefFromJSON)),
        'originVaultGroups': json['origin_vault_groups'] == null ? undefined : ((json['origin_vault_groups'] as Array<any>).map(VaultGroupRefFromJSON)),
        'recipients': RecipientsConditionFromJSON(json['recipients']),
        'abiMethods': json['abi_methods'],
        'transactionAssets': json['transaction_assets'] == null ? undefined : ((json['transaction_assets'] as Array<any>).map(PricedAssetFromJSON)),
        'amountLimit': json['amount_limit'] == null ? undefined : AmountLimitConditionFromJSON(json['amount_limit']),
        'periodicAmount': json['periodic_amount'] == null ? undefined : PeriodicAmountConditionFromJSON(json['periodic_amount']),
        'cosmosConditions': json['cosmos_conditions'] == null ? undefined : CosmosRuleConditionsFromJSON(json['cosmos_conditions']),
        'eip712Message': json['eip712_message'] == null ? undefined : Eip712MessageConditionsFromJSON(json['eip712_message']),
    };
}

export function TransactionRuleConditionsToJSON(json: any): TransactionRuleConditions {
    return TransactionRuleConditionsToJSONTyped(json, false);
}

export function TransactionRuleConditionsToJSONTyped(value?: TransactionRuleConditions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transaction_types': value['transactionTypes'] == null ? undefined : ((value['transactionTypes'] as Array<any>).map(TransactionTypeConditionToJSON)),
        'transaction_initiators': InitiatorsConditionToJSON(value['transactionInitiators']),
        'origins': OriginsConditionToJSON(value['origins']),
        'origin_vaults': value['originVaults'] == null ? undefined : ((value['originVaults'] as Array<any>).map(VaultRefToJSON)),
        'origin_vault_groups': value['originVaultGroups'] == null ? undefined : ((value['originVaultGroups'] as Array<any>).map(VaultGroupRefToJSON)),
        'recipients': RecipientsConditionToJSON(value['recipients']),
        'abi_methods': value['abiMethods'],
        'transaction_assets': value['transactionAssets'] == null ? undefined : ((value['transactionAssets'] as Array<any>).map(PricedAssetToJSON)),
        'amount_limit': AmountLimitConditionToJSON(value['amountLimit']),
        'periodic_amount': PeriodicAmountConditionToJSON(value['periodicAmount']),
        'cosmos_conditions': CosmosRuleConditionsToJSON(value['cosmosConditions']),
        'eip712_message': Eip712MessageConditionsToJSON(value['eip712Message']),
    };
}

