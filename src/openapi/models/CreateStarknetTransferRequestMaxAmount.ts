/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateStarknetTransferRequestMaxAmount
 */
export interface CreateStarknetTransferRequestMaxAmount {
    /**
     * 
     * @type {string}
     * @memberof CreateStarknetTransferRequestMaxAmount
     */
    type: CreateStarknetTransferRequestMaxAmountTypeEnum;
}


/**
 * @export
 */
export const CreateStarknetTransferRequestMaxAmountTypeEnum = {
    max: 'max'
} as const;
export type CreateStarknetTransferRequestMaxAmountTypeEnum = typeof CreateStarknetTransferRequestMaxAmountTypeEnum[keyof typeof CreateStarknetTransferRequestMaxAmountTypeEnum];


/**
 * Check if a given object implements the CreateStarknetTransferRequestMaxAmount interface.
 */
export function instanceOfCreateStarknetTransferRequestMaxAmount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CreateStarknetTransferRequestMaxAmountFromJSON(json: any): CreateStarknetTransferRequestMaxAmount {
    return CreateStarknetTransferRequestMaxAmountFromJSONTyped(json, false);
}

export function CreateStarknetTransferRequestMaxAmountFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateStarknetTransferRequestMaxAmount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
    };
}

export function CreateStarknetTransferRequestMaxAmountToJSON(value?: CreateStarknetTransferRequestMaxAmount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

