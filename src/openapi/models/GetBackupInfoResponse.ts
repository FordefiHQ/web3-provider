/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionSigner } from './ActionSigner';
import {
    ActionSignerFromJSON,
    ActionSignerFromJSONTyped,
    ActionSignerToJSON,
} from './ActionSigner';
import type { BackupEmailChageState } from './BackupEmailChageState';
import {
    BackupEmailChageStateFromJSON,
    BackupEmailChageStateFromJSONTyped,
    BackupEmailChageStateToJSON,
} from './BackupEmailChageState';
import type { BackupPublicKey } from './BackupPublicKey';
import {
    BackupPublicKeyFromJSON,
    BackupPublicKeyFromJSONTyped,
    BackupPublicKeyToJSON,
} from './BackupPublicKey';
import type { BackupState } from './BackupState';
import {
    BackupStateFromJSON,
    BackupStateFromJSONTyped,
    BackupStateToJSON,
} from './BackupState';
import type { BackupType } from './BackupType';
import {
    BackupTypeFromJSON,
    BackupTypeFromJSONTyped,
    BackupTypeToJSON,
} from './BackupType';

/**
 * 
 * @export
 * @interface GetBackupInfoResponse
 */
export interface GetBackupInfoResponse {
    /**
     * 
     * @type {BackupState}
     * @memberof GetBackupInfoResponse
     */
    state: BackupState;
    /**
     * 
     * @type {BackupType}
     * @memberof GetBackupInfoResponse
     */
    type?: BackupType;
    /**
     * 
     * @type {Array<ActionSigner>}
     * @memberof GetBackupInfoResponse
     */
    backupAdmins: Array<ActionSigner>;
    /**
     * 
     * @type {string}
     * @memberof GetBackupInfoResponse
     */
    backupEmail?: string;
    /**
     * 
     * @type {BackupEmailChageState}
     * @memberof GetBackupInfoResponse
     */
    emailChangeStatus?: BackupEmailChageState;
    /**
     * 
     * @type {Date}
     * @memberof GetBackupInfoResponse
     */
    lastSnapshotAt: Date;
    /**
     * 
     * @type {BackupPublicKey}
     * @memberof GetBackupInfoResponse
     */
    publicKey?: BackupPublicKey;
    /**
     * 
     * @type {string}
     * @memberof GetBackupInfoResponse
     */
    requestId?: string;
}

/**
 * Check if a given object implements the GetBackupInfoResponse interface.
 */
export function instanceOfGetBackupInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "backupAdmins" in value;
    isInstance = isInstance && "lastSnapshotAt" in value;

    return isInstance;
}

export function GetBackupInfoResponseFromJSON(json: any): GetBackupInfoResponse {
    return GetBackupInfoResponseFromJSONTyped(json, false);
}

export function GetBackupInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetBackupInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'state': BackupStateFromJSON(json['state']),
        'type': !exists(json, 'type') ? undefined : BackupTypeFromJSON(json['type']),
        'backupAdmins': ((json['backup_admins'] as Array<any>).map(ActionSignerFromJSON)),
        'backupEmail': !exists(json, 'backup_email') ? undefined : json['backup_email'],
        'emailChangeStatus': !exists(json, 'email_change_status') ? undefined : BackupEmailChageStateFromJSON(json['email_change_status']),
        'lastSnapshotAt': (new Date(json['last_snapshot_at'])),
        'publicKey': !exists(json, 'public_key') ? undefined : BackupPublicKeyFromJSON(json['public_key']),
        'requestId': !exists(json, 'request_id') ? undefined : json['request_id'],
    };
}

export function GetBackupInfoResponseToJSON(value?: GetBackupInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'state': BackupStateToJSON(value.state),
        'type': BackupTypeToJSON(value.type),
        'backup_admins': ((value.backupAdmins as Array<any>).map(ActionSignerToJSON)),
        'backup_email': value.backupEmail,
        'email_change_status': BackupEmailChageStateToJSON(value.emailChangeStatus),
        'last_snapshot_at': (value.lastSnapshotAt.toISOString()),
        'public_key': BackupPublicKeyToJSON(value.publicKey),
        'request_id': value.requestId,
    };
}

