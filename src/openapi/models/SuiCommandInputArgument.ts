/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SuiCommandInputArgument
 */
export interface SuiCommandInputArgument {
    /**
     * 
     * @type {string}
     * @memberof SuiCommandInputArgument
     */
    type: SuiCommandInputArgumentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof SuiCommandInputArgument
     */
    index: number;
}


/**
 * @export
 */
export const SuiCommandInputArgumentTypeEnum = {
    input: 'input'
} as const;
export type SuiCommandInputArgumentTypeEnum = typeof SuiCommandInputArgumentTypeEnum[keyof typeof SuiCommandInputArgumentTypeEnum];


/**
 * Check if a given object implements the SuiCommandInputArgument interface.
 */
export function instanceOfSuiCommandInputArgument(value: object): value is SuiCommandInputArgument {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('index' in value) || value['index'] === undefined) return false;
    return true;
}

export function SuiCommandInputArgumentFromJSON(json: any): SuiCommandInputArgument {
    return SuiCommandInputArgumentFromJSONTyped(json, false);
}

export function SuiCommandInputArgumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuiCommandInputArgument {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'index': json['index'],
    };
}

export function SuiCommandInputArgumentToJSON(json: any): SuiCommandInputArgument {
    return SuiCommandInputArgumentToJSONTyped(json, false);
}

export function SuiCommandInputArgumentToJSONTyped(value?: SuiCommandInputArgument | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'index': value['index'],
    };
}

