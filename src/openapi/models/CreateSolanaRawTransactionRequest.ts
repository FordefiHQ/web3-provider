/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SolanaMessageAddressTableLookupRequest } from './SolanaMessageAddressTableLookupRequest';
import {
    SolanaMessageAddressTableLookupRequestToJSON,
} from './SolanaMessageAddressTableLookupRequest';
import type { SolanaMessageVersion } from './SolanaMessageVersion';
import {
    SolanaMessageVersionToJSON,
} from './SolanaMessageVersion';
import type { SolanaChainUniqueId } from './SolanaChainUniqueId';
import {
    SolanaChainUniqueIdToJSON,
} from './SolanaChainUniqueId';
import type { SolanaTransactionSignaturesRequest } from './SolanaTransactionSignaturesRequest';
import {
    SolanaTransactionSignaturesRequestToJSON,
} from './SolanaTransactionSignaturesRequest';
import type { BatchSolanaTransactionRequestDetailsFee } from './BatchSolanaTransactionRequestDetailsFee';
import {
    BatchSolanaTransactionRequestDetailsFeeToJSON,
} from './BatchSolanaTransactionRequestDetailsFee';
import type { PushMode } from './PushMode';
import {
    PushModeToJSON,
} from './PushMode';
import type { SolanaCompiledInstructionRequest } from './SolanaCompiledInstructionRequest';
import {
    SolanaCompiledInstructionRequestToJSON,
} from './SolanaCompiledInstructionRequest';
import type { SolanaTransactionAccountRequest } from './SolanaTransactionAccountRequest';
import {
    SolanaTransactionAccountRequestToJSON,
} from './SolanaTransactionAccountRequest';

/**
 * 
 * @export
 * @interface CreateSolanaRawTransactionRequest
 */
export interface CreateSolanaRawTransactionRequest {
    /**
     * 
     * @type {SolanaMessageVersion}
     * @memberof CreateSolanaRawTransactionRequest
     */
    version: SolanaMessageVersion;
    /**
     * 
     * @type {Array<SolanaCompiledInstructionRequest>}
     * @memberof CreateSolanaRawTransactionRequest
     */
    instructions: Array<SolanaCompiledInstructionRequest>;
    /**
     * 
     * @type {Array<SolanaTransactionAccountRequest>}
     * @memberof CreateSolanaRawTransactionRequest
     */
    accounts: Array<SolanaTransactionAccountRequest>;
    /**
     * 
     * @type {Array<SolanaMessageAddressTableLookupRequest>}
     * @memberof CreateSolanaRawTransactionRequest
     */
    addressTableLookups: Array<SolanaMessageAddressTableLookupRequest>;
    /**
     * 
     * @type {Array<SolanaTransactionSignaturesRequest>}
     * @memberof CreateSolanaRawTransactionRequest
     */
    signatures?: Array<SolanaTransactionSignaturesRequest>;
    /**
     * 
     * @type {string}
     * @memberof CreateSolanaRawTransactionRequest
     */
    recentBlockhash?: string;
    /**
     * 
     * @type {BatchSolanaTransactionRequestDetailsFee}
     * @memberof CreateSolanaRawTransactionRequest
     */
    fee?: BatchSolanaTransactionRequestDetailsFee;
    /**
     * 
     * @type {string}
     * @memberof CreateSolanaRawTransactionRequest
     */
    type: CreateSolanaRawTransactionRequestTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSolanaRawTransactionRequest
     */
    failOnPredictionFailure?: boolean;
    /**
     * 
     * @type {PushMode}
     * @memberof CreateSolanaRawTransactionRequest
     */
    pushMode?: PushMode;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSolanaRawTransactionRequest
     */
    skipPrediction?: boolean;
    /**
     * 
     * @type {SolanaChainUniqueId}
     * @memberof CreateSolanaRawTransactionRequest
     */
    chain: SolanaChainUniqueId;
}


/**
 * 
 */
const CreateSolanaRawTransactionRequestTypeEnum = {
    solanaRawTransaction: 'solana_raw_transaction'
} as const;
type CreateSolanaRawTransactionRequestTypeEnum = typeof CreateSolanaRawTransactionRequestTypeEnum[keyof typeof CreateSolanaRawTransactionRequestTypeEnum];

export function CreateSolanaRawTransactionRequestToJSON(json: any): CreateSolanaRawTransactionRequest {
    return CreateSolanaRawTransactionRequestToJSONTyped(json, false);
}

function CreateSolanaRawTransactionRequestToJSONTyped(value?: CreateSolanaRawTransactionRequest | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version': SolanaMessageVersionToJSON(value['version']),
        'instructions': ((value['instructions'] as Array<any>).map(SolanaCompiledInstructionRequestToJSON)),
        'accounts': ((value['accounts'] as Array<any>).map(SolanaTransactionAccountRequestToJSON)),
        'address_table_lookups': ((value['addressTableLookups'] as Array<any>).map(SolanaMessageAddressTableLookupRequestToJSON)),
        'signatures': value['signatures'] == null ? undefined : ((value['signatures'] as Array<any>).map(SolanaTransactionSignaturesRequestToJSON)),
        'recent_blockhash': value['recentBlockhash'],
        'fee': BatchSolanaTransactionRequestDetailsFeeToJSON(value['fee']),
        'type': value['type'],
        'fail_on_prediction_failure': value['failOnPredictionFailure'],
        'push_mode': PushModeToJSON(value['pushMode']),
        'skip_prediction': value['skipPrediction'],
        'chain': SolanaChainUniqueIdToJSON(value['chain']),
    };
}
