/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TronEffects } from './TronEffects';
import {
    TronEffectsFromJSON,
    TronEffectsFromJSONTyped,
    TronEffectsToJSON,
    TronEffectsToJSONTyped,
} from './TronEffects';
import type { TronReversion } from './TronReversion';
import {
    TronReversionFromJSON,
    TronReversionFromJSONTyped,
    TronReversionToJSON,
    TronReversionToJSONTyped,
} from './TronReversion';
import type { TronFee } from './TronFee';
import {
    TronFeeFromJSON,
    TronFeeFromJSONTyped,
    TronFeeToJSON,
    TronFeeToJSONTyped,
} from './TronFee';

/**
 * 
 * @export
 * @interface TronTransactionResult
 */
export interface TronTransactionResult {
    /**
     * 
     * @type {TronReversion}
     * @memberof TronTransactionResult
     */
    reversion: TronReversion;
    /**
     * 
     * @type {TronFee}
     * @memberof TronTransactionResult
     */
    fee: TronFee;
    /**
     * 
     * @type {TronEffects}
     * @memberof TronTransactionResult
     */
    effects: TronEffects;
}

/**
 * Check if a given object implements the TronTransactionResult interface.
 */
export function instanceOfTronTransactionResult(value: object): value is TronTransactionResult {
    if (!('reversion' in value) || value['reversion'] === undefined) return false;
    if (!('fee' in value) || value['fee'] === undefined) return false;
    if (!('effects' in value) || value['effects'] === undefined) return false;
    return true;
}

export function TronTransactionResultFromJSON(json: any): TronTransactionResult {
    return TronTransactionResultFromJSONTyped(json, false);
}

export function TronTransactionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronTransactionResult {
    if (json == null) {
        return json;
    }
    return {
        
        'reversion': TronReversionFromJSON(json['reversion']),
        'fee': TronFeeFromJSON(json['fee']),
        'effects': TronEffectsFromJSON(json['effects']),
    };
}

export function TronTransactionResultToJSON(json: any): TronTransactionResult {
    return TronTransactionResultToJSONTyped(json, false);
}

export function TronTransactionResultToJSONTyped(value?: TronTransactionResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'reversion': TronReversionToJSON(value['reversion']),
        'fee': TronFeeToJSON(value['fee']),
        'effects': TronEffectsToJSON(value['effects']),
    };
}

