/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockchainExplorer } from './BlockchainExplorer';
import {
    BlockchainExplorerFromJSON,
    BlockchainExplorerFromJSONTyped,
    BlockchainExplorerToJSON,
} from './BlockchainExplorer';
import type { TonChainUniqueId } from './TonChainUniqueId';
import {
    TonChainUniqueIdFromJSON,
    TonChainUniqueIdFromJSONTyped,
    TonChainUniqueIdToJSON,
} from './TonChainUniqueId';

/**
 * 
 * @export
 * @interface EnrichedTonChain
 */
export interface EnrichedTonChain {
    /**
     * 
     * @type {string}
     * @memberof EnrichedTonChain
     */
    chainType: EnrichedTonChainChainTypeEnum;
    /**
     * 
     * @type {TonChainUniqueId}
     * @memberof EnrichedTonChain
     */
    uniqueId: TonChainUniqueId;
    /**
     * 
     * @type {string}
     * @memberof EnrichedTonChain
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedTonChain
     */
    nativeCurrencySymbol: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedTonChain
     */
    nativeCurrencyName: string;
    /**
     * 
     * @type {BlockchainExplorer}
     * @memberof EnrichedTonChain
     */
    blockchainExplorer?: BlockchainExplorer;
    /**
     * 
     * @type {string}
     * @memberof EnrichedTonChain
     */
    logoUrl: string;
}


/**
 * @export
 */
export const EnrichedTonChainChainTypeEnum = {
    ton: 'ton'
} as const;
export type EnrichedTonChainChainTypeEnum = typeof EnrichedTonChainChainTypeEnum[keyof typeof EnrichedTonChainChainTypeEnum];


/**
 * Check if a given object implements the EnrichedTonChain interface.
 */
export function instanceOfEnrichedTonChain(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "chainType" in value;
    isInstance = isInstance && "uniqueId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "nativeCurrencySymbol" in value;
    isInstance = isInstance && "nativeCurrencyName" in value;
    isInstance = isInstance && "logoUrl" in value;

    return isInstance;
}

export function EnrichedTonChainFromJSON(json: any): EnrichedTonChain {
    return EnrichedTonChainFromJSONTyped(json, false);
}

export function EnrichedTonChainFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnrichedTonChain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chainType': json['chain_type'],
        'uniqueId': TonChainUniqueIdFromJSON(json['unique_id']),
        'name': json['name'],
        'nativeCurrencySymbol': json['native_currency_symbol'],
        'nativeCurrencyName': json['native_currency_name'],
        'blockchainExplorer': !exists(json, 'blockchain_explorer') ? undefined : BlockchainExplorerFromJSON(json['blockchain_explorer']),
        'logoUrl': json['logo_url'],
    };
}

export function EnrichedTonChainToJSON(value?: EnrichedTonChain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chain_type': value.chainType,
        'unique_id': TonChainUniqueIdToJSON(value.uniqueId),
        'name': value.name,
        'native_currency_symbol': value.nativeCurrencySymbol,
        'native_currency_name': value.nativeCurrencyName,
        'blockchain_explorer': BlockchainExplorerToJSON(value.blockchainExplorer),
        'logo_url': value.logoUrl,
    };
}

