/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
    VaultRefToJSONTyped,
} from './VaultRef';

/**
 * 
 * @export
 * @interface EditVaultGroupChanges
 */
export interface EditVaultGroupChanges {
    /**
     * 
     * @type {string}
     * @memberof EditVaultGroupChanges
     */
    changeRequestId: string;
    /**
     * 
     * @type {Array<VaultRef>}
     * @memberof EditVaultGroupChanges
     */
    addedVaults: Array<VaultRef>;
    /**
     * 
     * @type {string}
     * @memberof EditVaultGroupChanges
     */
    type: EditVaultGroupChangesTypeEnum;
    /**
     * 
     * @type {Array<VaultRef>}
     * @memberof EditVaultGroupChanges
     */
    removedVaults: Array<VaultRef>;
    /**
     * 
     * @type {string}
     * @memberof EditVaultGroupChanges
     */
    newName?: string;
}


/**
 * @export
 */
export const EditVaultGroupChangesTypeEnum = {
    editGroup: 'edit_group'
} as const;
export type EditVaultGroupChangesTypeEnum = typeof EditVaultGroupChangesTypeEnum[keyof typeof EditVaultGroupChangesTypeEnum];


/**
 * Check if a given object implements the EditVaultGroupChanges interface.
 */
export function instanceOfEditVaultGroupChanges(value: object): value is EditVaultGroupChanges {
    if (!('changeRequestId' in value) || value['changeRequestId'] === undefined) return false;
    if (!('addedVaults' in value) || value['addedVaults'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('removedVaults' in value) || value['removedVaults'] === undefined) return false;
    return true;
}

export function EditVaultGroupChangesFromJSON(json: any): EditVaultGroupChanges {
    return EditVaultGroupChangesFromJSONTyped(json, false);
}

export function EditVaultGroupChangesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EditVaultGroupChanges {
    if (json == null) {
        return json;
    }
    return {
        
        'changeRequestId': json['change_request_id'],
        'addedVaults': ((json['added_vaults'] as Array<any>).map(VaultRefFromJSON)),
        'type': json['type'],
        'removedVaults': ((json['removed_vaults'] as Array<any>).map(VaultRefFromJSON)),
        'newName': json['new_name'] == null ? undefined : json['new_name'],
    };
}

export function EditVaultGroupChangesToJSON(json: any): EditVaultGroupChanges {
    return EditVaultGroupChangesToJSONTyped(json, false);
}

export function EditVaultGroupChangesToJSONTyped(value?: EditVaultGroupChanges | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'change_request_id': value['changeRequestId'],
        'added_vaults': ((value['addedVaults'] as Array<any>).map(VaultRefToJSON)),
        'type': value['type'],
        'removed_vaults': ((value['removedVaults'] as Array<any>).map(VaultRefToJSON)),
        'new_name': value['newName'],
    };
}

