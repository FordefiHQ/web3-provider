/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
} from './KeyType';
import type { MpcShare } from './MpcShare';
import {
    MpcShareFromJSON,
    MpcShareFromJSONTyped,
    MpcShareToJSON,
} from './MpcShare';
import type { VaultBackup } from './VaultBackup';
import {
    VaultBackupFromJSON,
    VaultBackupFromJSONTyped,
    VaultBackupToJSON,
} from './VaultBackup';

/**
 * 
 * @export
 * @interface KeyBackup
 */
export interface KeyBackup {
    /**
     * 
     * @type {string}
     * @memberof KeyBackup
     */
    keyId: string;
    /**
     * 
     * @type {KeyType}
     * @memberof KeyBackup
     */
    keyType: KeyType;
    /**
     * 
     * @type {string}
     * @memberof KeyBackup
     */
    chainCode: string;
    /**
     * 
     * @type {Array<MpcShare>}
     * @memberof KeyBackup
     */
    mpcShares: Array<MpcShare>;
    /**
     * 
     * @type {Array<VaultBackup>}
     * @memberof KeyBackup
     */
    vaults: Array<VaultBackup>;
}

/**
 * Check if a given object implements the KeyBackup interface.
 */
export function instanceOfKeyBackup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "keyId" in value;
    isInstance = isInstance && "keyType" in value;
    isInstance = isInstance && "chainCode" in value;
    isInstance = isInstance && "mpcShares" in value;
    isInstance = isInstance && "vaults" in value;

    return isInstance;
}

export function KeyBackupFromJSON(json: any): KeyBackup {
    return KeyBackupFromJSONTyped(json, false);
}

export function KeyBackupFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeyBackup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyId': json['key_id'],
        'keyType': KeyTypeFromJSON(json['key_type']),
        'chainCode': json['chain_code'],
        'mpcShares': ((json['mpc_shares'] as Array<any>).map(MpcShareFromJSON)),
        'vaults': ((json['vaults'] as Array<any>).map(VaultBackupFromJSON)),
    };
}

export function KeyBackupToJSON(value?: KeyBackup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key_id': value.keyId,
        'key_type': KeyTypeToJSON(value.keyType),
        'chain_code': value.chainCode,
        'mpc_shares': ((value.mpcShares as Array<any>).map(MpcShareToJSON)),
        'vaults': ((value.vaults as Array<any>).map(VaultBackupToJSON)),
    };
}

