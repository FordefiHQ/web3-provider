/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultBackup } from './VaultBackup';
import {
    VaultBackupFromJSON,
    VaultBackupFromJSONTyped,
    VaultBackupToJSON,
    VaultBackupToJSONTyped,
} from './VaultBackup';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
    KeyTypeToJSONTyped,
} from './KeyType';
import type { MpcShare } from './MpcShare';
import {
    MpcShareFromJSON,
    MpcShareFromJSONTyped,
    MpcShareToJSON,
    MpcShareToJSONTyped,
} from './MpcShare';

/**
 * 
 * @export
 * @interface KeyBackup
 */
export interface KeyBackup {
    /**
     * 
     * @type {string}
     * @memberof KeyBackup
     */
    keyId: string;
    /**
     * 
     * @type {KeyType}
     * @memberof KeyBackup
     */
    keyType: KeyType;
    /**
     * 
     * @type {string}
     * @memberof KeyBackup
     */
    chainCode: string;
    /**
     * 
     * @type {Array<MpcShare>}
     * @memberof KeyBackup
     */
    mpcShares: Array<MpcShare>;
    /**
     * 
     * @type {Array<VaultBackup>}
     * @memberof KeyBackup
     */
    vaults: Array<VaultBackup>;
}



/**
 * Check if a given object implements the KeyBackup interface.
 */
export function instanceOfKeyBackup(value: object): value is KeyBackup {
    if (!('keyId' in value) || value['keyId'] === undefined) return false;
    if (!('keyType' in value) || value['keyType'] === undefined) return false;
    if (!('chainCode' in value) || value['chainCode'] === undefined) return false;
    if (!('mpcShares' in value) || value['mpcShares'] === undefined) return false;
    if (!('vaults' in value) || value['vaults'] === undefined) return false;
    return true;
}

export function KeyBackupFromJSON(json: any): KeyBackup {
    return KeyBackupFromJSONTyped(json, false);
}

export function KeyBackupFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeyBackup {
    if (json == null) {
        return json;
    }
    return {
        
        'keyId': json['key_id'],
        'keyType': KeyTypeFromJSON(json['key_type']),
        'chainCode': json['chain_code'],
        'mpcShares': ((json['mpc_shares'] as Array<any>).map(MpcShareFromJSON)),
        'vaults': ((json['vaults'] as Array<any>).map(VaultBackupFromJSON)),
    };
}

export function KeyBackupToJSON(json: any): KeyBackup {
    return KeyBackupToJSONTyped(json, false);
}

export function KeyBackupToJSONTyped(value?: KeyBackup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key_id': value['keyId'],
        'key_type': KeyTypeToJSON(value['keyType']),
        'chain_code': value['chainCode'],
        'mpc_shares': ((value['mpcShares'] as Array<any>).map(MpcShareToJSON)),
        'vaults': ((value['vaults'] as Array<any>).map(VaultBackupToJSON)),
    };
}

