/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
    VaultRefToJSONTyped,
} from './VaultRef';
import type { UtxoAddress } from './UtxoAddress';
import {
    UtxoAddressFromJSON,
    UtxoAddressFromJSONTyped,
    UtxoAddressToJSON,
    UtxoAddressToJSONTyped,
} from './UtxoAddress';
import type { Balances } from './Balances';
import {
    BalancesFromJSON,
    BalancesFromJSONTyped,
    BalancesToJSON,
    BalancesToJSONTyped,
} from './Balances';

/**
 * 
 * @export
 * @interface UtxoVaultAddress
 */
export interface UtxoVaultAddress {
    /**
     * 
     * @type {string}
     * @memberof UtxoVaultAddress
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof UtxoVaultAddress
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UtxoVaultAddress
     */
    modifiedAt: Date;
    /**
     * 
     * @type {VaultRef}
     * @memberof UtxoVaultAddress
     */
    vault: VaultRef;
    /**
     * 
     * @type {string}
     * @memberof UtxoVaultAddress
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UtxoVaultAddress
     * @deprecated
     */
    balance?: string;
    /**
     * 
     * @type {Balances}
     * @memberof UtxoVaultAddress
     */
    balances?: Balances;
    /**
     * 
     * @type {string}
     * @memberof UtxoVaultAddress
     */
    publicKeyCompressed: string;
    /**
     * 
     * @type {string}
     * @memberof UtxoVaultAddress
     */
    derivationPath: string;
    /**
     * 
     * @type {string}
     * @memberof UtxoVaultAddress
     */
    type: UtxoVaultAddressTypeEnum;
    /**
     * 
     * @type {UtxoAddress}
     * @memberof UtxoVaultAddress
     */
    address: UtxoAddress;
}


/**
 * @export
 */
export const UtxoVaultAddressTypeEnum = {
    utxo: 'utxo'
} as const;
export type UtxoVaultAddressTypeEnum = typeof UtxoVaultAddressTypeEnum[keyof typeof UtxoVaultAddressTypeEnum];


/**
 * Check if a given object implements the UtxoVaultAddress interface.
 */
export function instanceOfUtxoVaultAddress(value: object): value is UtxoVaultAddress {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('vault' in value) || value['vault'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('publicKeyCompressed' in value) || value['publicKeyCompressed'] === undefined) return false;
    if (!('derivationPath' in value) || value['derivationPath'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    return true;
}

export function UtxoVaultAddressFromJSON(json: any): UtxoVaultAddress {
    return UtxoVaultAddressFromJSONTyped(json, false);
}

export function UtxoVaultAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): UtxoVaultAddress {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'vault': VaultRefFromJSON(json['vault']),
        'name': json['name'],
        'balance': json['balance'] == null ? undefined : json['balance'],
        'balances': json['balances'] == null ? undefined : BalancesFromJSON(json['balances']),
        'publicKeyCompressed': json['public_key_compressed'],
        'derivationPath': json['derivation_path'],
        'type': json['type'],
        'address': UtxoAddressFromJSON(json['address']),
    };
}

export function UtxoVaultAddressToJSON(json: any): UtxoVaultAddress {
    return UtxoVaultAddressToJSONTyped(json, false);
}

export function UtxoVaultAddressToJSONTyped(value?: UtxoVaultAddress | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'vault': VaultRefToJSON(value['vault']),
        'name': value['name'],
        'balance': value['balance'],
        'balances': BalancesToJSON(value['balances']),
        'public_key_compressed': value['publicKeyCompressed'],
        'derivation_path': value['derivationPath'],
        'type': value['type'],
        'address': UtxoAddressToJSON(value['address']),
    };
}

