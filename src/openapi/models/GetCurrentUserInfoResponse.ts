/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganizationMembership } from './OrganizationMembership';
import {
    OrganizationMembershipFromJSON,
    OrganizationMembershipFromJSONTyped,
    OrganizationMembershipToJSON,
} from './OrganizationMembership';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface GetCurrentUserInfoResponse
 */
export interface GetCurrentUserInfoResponse {
    /**
     * 
     * @type {User}
     * @memberof GetCurrentUserInfoResponse
     */
    user: User;
    /**
     * 
     * @type {string}
     * @memberof GetCurrentUserInfoResponse
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof GetCurrentUserInfoResponse
     */
    organizationName: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetCurrentUserInfoResponse
     */
    impersonationIsActive: boolean;
    /**
     * 
     * @type {Array<OrganizationMembership>}
     * @memberof GetCurrentUserInfoResponse
     */
    memberships: Array<OrganizationMembership>;
}

/**
 * Check if a given object implements the GetCurrentUserInfoResponse interface.
 */
export function instanceOfGetCurrentUserInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "organizationId" in value;
    isInstance = isInstance && "organizationName" in value;
    isInstance = isInstance && "impersonationIsActive" in value;
    isInstance = isInstance && "memberships" in value;

    return isInstance;
}

export function GetCurrentUserInfoResponseFromJSON(json: any): GetCurrentUserInfoResponse {
    return GetCurrentUserInfoResponseFromJSONTyped(json, false);
}

export function GetCurrentUserInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCurrentUserInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user': UserFromJSON(json['user']),
        'organizationId': json['organization_id'],
        'organizationName': json['organization_name'],
        'impersonationIsActive': json['impersonation_is_active'],
        'memberships': ((json['memberships'] as Array<any>).map(OrganizationMembershipFromJSON)),
    };
}

export function GetCurrentUserInfoResponseToJSON(value?: GetCurrentUserInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user': UserToJSON(value.user),
        'organization_id': value.organizationId,
        'organization_name': value.organizationName,
        'impersonation_is_active': value.impersonationIsActive,
        'memberships': ((value.memberships as Array<any>).map(OrganizationMembershipToJSON)),
    };
}

