/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CosmosChainUniqueId } from './CosmosChainUniqueId';
import {
    CosmosChainUniqueIdFromJSON,
    CosmosChainUniqueIdFromJSONTyped,
    CosmosChainUniqueIdToJSON,
} from './CosmosChainUniqueId';

/**
 * 
 * @export
 * @interface CosmosSuggestedFees
 */
export interface CosmosSuggestedFees {
    /**
     * 
     * @type {string}
     * @memberof CosmosSuggestedFees
     */
    type: CosmosSuggestedFeesTypeEnum;
    /**
     * 
     * @type {CosmosChainUniqueId}
     * @memberof CosmosSuggestedFees
     */
    chainUniqueId: CosmosChainUniqueId;
    /**
     * 
     * @type {number}
     * @memberof CosmosSuggestedFees
     */
    feePerSignature?: number;
}


/**
 * @export
 */
export const CosmosSuggestedFeesTypeEnum = {
    cosmos: 'cosmos'
} as const;
export type CosmosSuggestedFeesTypeEnum = typeof CosmosSuggestedFeesTypeEnum[keyof typeof CosmosSuggestedFeesTypeEnum];


/**
 * Check if a given object implements the CosmosSuggestedFees interface.
 */
export function instanceOfCosmosSuggestedFees(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "chainUniqueId" in value;

    return isInstance;
}

export function CosmosSuggestedFeesFromJSON(json: any): CosmosSuggestedFees {
    return CosmosSuggestedFeesFromJSONTyped(json, false);
}

export function CosmosSuggestedFeesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosSuggestedFees {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'chainUniqueId': CosmosChainUniqueIdFromJSON(json['chain_unique_id']),
        'feePerSignature': !exists(json, 'fee_per_signature') ? undefined : json['fee_per_signature'],
    };
}

export function CosmosSuggestedFeesToJSON(value?: CosmosSuggestedFees | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'chain_unique_id': CosmosChainUniqueIdToJSON(value.chainUniqueId),
        'fee_per_signature': value.feePerSignature,
    };
}

