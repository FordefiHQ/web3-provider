/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
    EnrichedEvmAddressFromJSONTyped,
    EnrichedEvmAddressToJSON,
} from './EnrichedEvmAddress';
import type { Erc20Contract } from './Erc20Contract';
import {
    Erc20ContractFromJSON,
    Erc20ContractFromJSONTyped,
    Erc20ContractToJSON,
} from './Erc20Contract';
import type { Price } from './Price';
import {
    PriceFromJSON,
    PriceFromJSONTyped,
    PriceToJSON,
} from './Price';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
} from './PricedAsset';

/**
 * 
 * @export
 * @interface Erc20AllowanceChange
 */
export interface Erc20AllowanceChange {
    /**
     * 
     * @type {PricedAsset}
     * @memberof Erc20AllowanceChange
     */
    pricedAsset: PricedAsset;
    /**
     * 
     * @type {string}
     * @memberof Erc20AllowanceChange
     */
    type: Erc20AllowanceChangeTypeEnum;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof Erc20AllowanceChange
     */
    owner: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof Erc20AllowanceChange
     */
    spender: EnrichedEvmAddress;
    /**
     * 
     * @type {string}
     * @memberof Erc20AllowanceChange
     */
    amount: string;
    /**
     * 
     * @type {Erc20Contract}
     * @memberof Erc20AllowanceChange
     */
    tokenContract: Erc20Contract;
    /**
     * 
     * @type {Price}
     * @memberof Erc20AllowanceChange
     */
    price?: Price;
}


/**
 * @export
 */
export const Erc20AllowanceChangeTypeEnum = {
    erc20: 'erc20'
} as const;
export type Erc20AllowanceChangeTypeEnum = typeof Erc20AllowanceChangeTypeEnum[keyof typeof Erc20AllowanceChangeTypeEnum];


/**
 * Check if a given object implements the Erc20AllowanceChange interface.
 */
export function instanceOfErc20AllowanceChange(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pricedAsset" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "spender" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "tokenContract" in value;

    return isInstance;
}

export function Erc20AllowanceChangeFromJSON(json: any): Erc20AllowanceChange {
    return Erc20AllowanceChangeFromJSONTyped(json, false);
}

export function Erc20AllowanceChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Erc20AllowanceChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pricedAsset': PricedAssetFromJSON(json['priced_asset']),
        'type': json['type'],
        'owner': EnrichedEvmAddressFromJSON(json['owner']),
        'spender': EnrichedEvmAddressFromJSON(json['spender']),
        'amount': json['amount'],
        'tokenContract': Erc20ContractFromJSON(json['token_contract']),
        'price': !exists(json, 'price') ? undefined : PriceFromJSON(json['price']),
    };
}

export function Erc20AllowanceChangeToJSON(value?: Erc20AllowanceChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'priced_asset': PricedAssetToJSON(value.pricedAsset),
        'type': value.type,
        'owner': EnrichedEvmAddressToJSON(value.owner),
        'spender': EnrichedEvmAddressToJSON(value.spender),
        'amount': value.amount,
        'token_contract': Erc20ContractToJSON(value.tokenContract),
        'price': PriceToJSON(value.price),
    };
}

