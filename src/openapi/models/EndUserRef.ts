/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EndUserRef
 */
export interface EndUserRef {
    /**
     * 
     * @type {string}
     * @memberof EndUserRef
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EndUserRef
     */
    userType: EndUserRefUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EndUserRef
     */
    externalId: string;
    /**
     * 
     * @type {string}
     * @memberof EndUserRef
     */
    state: EndUserRefStateEnum;
}


/**
 * @export
 */
export const EndUserRefUserTypeEnum = {
    endUser: 'end_user'
} as const;
export type EndUserRefUserTypeEnum = typeof EndUserRefUserTypeEnum[keyof typeof EndUserRefUserTypeEnum];

/**
 * @export
 */
export const EndUserRefStateEnum = {
    active: 'active',
    deleted: 'deleted'
} as const;
export type EndUserRefStateEnum = typeof EndUserRefStateEnum[keyof typeof EndUserRefStateEnum];


/**
 * Check if a given object implements the EndUserRef interface.
 */
export function instanceOfEndUserRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userType" in value;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function EndUserRefFromJSON(json: any): EndUserRef {
    return EndUserRefFromJSONTyped(json, false);
}

export function EndUserRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): EndUserRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userType': json['user_type'],
        'externalId': json['external_id'],
        'state': json['state'],
    };
}

export function EndUserRefToJSON(value?: EndUserRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'user_type': value.userType,
        'external_id': value.externalId,
        'state': value.state,
    };
}

