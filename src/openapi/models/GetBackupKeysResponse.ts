/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
    KeyTypeToJSONTyped,
} from './KeyType';
import type { TimestampedSignature } from './TimestampedSignature';
import {
    TimestampedSignatureFromJSON,
    TimestampedSignatureFromJSONTyped,
    TimestampedSignatureToJSON,
    TimestampedSignatureToJSONTyped,
} from './TimestampedSignature';
import type { BackupPublicKeyByDevice } from './BackupPublicKeyByDevice';
import {
    BackupPublicKeyByDeviceFromJSON,
    BackupPublicKeyByDeviceFromJSONTyped,
    BackupPublicKeyByDeviceToJSON,
    BackupPublicKeyByDeviceToJSONTyped,
} from './BackupPublicKeyByDevice';

/**
 * 
 * @export
 * @interface GetBackupKeysResponse
 */
export interface GetBackupKeysResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetBackupKeysResponse
     */
    hasBackup: boolean;
    /**
     * 
     * @type {Array<BackupPublicKeyByDevice>}
     * @memberof GetBackupKeysResponse
     */
    devicesPublicKeys: Array<BackupPublicKeyByDevice>;
    /**
     * 
     * @type {TimestampedSignature}
     * @memberof GetBackupKeysResponse
     */
    timestampedSignature: TimestampedSignature;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetBackupKeysResponse
     */
    keyIdsIncluded: Array<string>;
    /**
     * 
     * @type {Array<KeyType>}
     * @memberof GetBackupKeysResponse
     */
    deviceSharesIncluded: Array<KeyType>;
}

/**
 * Check if a given object implements the GetBackupKeysResponse interface.
 */
export function instanceOfGetBackupKeysResponse(value: object): value is GetBackupKeysResponse {
    if (!('hasBackup' in value) || value['hasBackup'] === undefined) return false;
    if (!('devicesPublicKeys' in value) || value['devicesPublicKeys'] === undefined) return false;
    if (!('timestampedSignature' in value) || value['timestampedSignature'] === undefined) return false;
    if (!('keyIdsIncluded' in value) || value['keyIdsIncluded'] === undefined) return false;
    if (!('deviceSharesIncluded' in value) || value['deviceSharesIncluded'] === undefined) return false;
    return true;
}

export function GetBackupKeysResponseFromJSON(json: any): GetBackupKeysResponse {
    return GetBackupKeysResponseFromJSONTyped(json, false);
}

export function GetBackupKeysResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetBackupKeysResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'hasBackup': json['has_backup'],
        'devicesPublicKeys': ((json['devices_public_keys'] as Array<any>).map(BackupPublicKeyByDeviceFromJSON)),
        'timestampedSignature': TimestampedSignatureFromJSON(json['timestamped_signature']),
        'keyIdsIncluded': json['key_ids_included'],
        'deviceSharesIncluded': ((json['device_shares_included'] as Array<any>).map(KeyTypeFromJSON)),
    };
}

export function GetBackupKeysResponseToJSON(json: any): GetBackupKeysResponse {
    return GetBackupKeysResponseToJSONTyped(json, false);
}

export function GetBackupKeysResponseToJSONTyped(value?: GetBackupKeysResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'has_backup': value['hasBackup'],
        'devices_public_keys': ((value['devicesPublicKeys'] as Array<any>).map(BackupPublicKeyByDeviceToJSON)),
        'timestamped_signature': TimestampedSignatureToJSON(value['timestampedSignature']),
        'key_ids_included': value['keyIdsIncluded'],
        'device_shares_included': ((value['deviceSharesIncluded'] as Array<any>).map(KeyTypeToJSON)),
    };
}

