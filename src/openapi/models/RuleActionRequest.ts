/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { RuleActionAllow } from './RuleActionAllow';
import {
    instanceOfRuleActionAllow,
    RuleActionAllowFromJSON,
    RuleActionAllowFromJSONTyped,
    RuleActionAllowToJSON,
} from './RuleActionAllow';
import type { RuleActionBlock } from './RuleActionBlock';
import {
    instanceOfRuleActionBlock,
    RuleActionBlockFromJSON,
    RuleActionBlockFromJSONTyped,
    RuleActionBlockToJSON,
} from './RuleActionBlock';
import type { RuleActionRequireApprovalRequest } from './RuleActionRequireApprovalRequest';
import {
    instanceOfRuleActionRequireApprovalRequest,
    RuleActionRequireApprovalRequestFromJSON,
    RuleActionRequireApprovalRequestFromJSONTyped,
    RuleActionRequireApprovalRequestToJSON,
} from './RuleActionRequireApprovalRequest';

/**
 * @type RuleActionRequest
 * 
 * @export
 */
export type RuleActionRequest = { type: 'allow' } & RuleActionAllow | { type: 'block' } & RuleActionBlock | { type: 'require_approval' } & RuleActionRequireApprovalRequest;

export function RuleActionRequestFromJSON(json: any): RuleActionRequest {
    return RuleActionRequestFromJSONTyped(json, false);
}

export function RuleActionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleActionRequest {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'allow':
            return Object.assign({}, RuleActionAllowFromJSONTyped(json, true), { type: 'allow' } as const);
        case 'block':
            return Object.assign({}, RuleActionBlockFromJSONTyped(json, true), { type: 'block' } as const);
        case 'require_approval':
            return Object.assign({}, RuleActionRequireApprovalRequestFromJSONTyped(json, true), { type: 'require_approval' } as const);
        default:
            throw new Error(`No variant of RuleActionRequest exists with 'type=${json['type']}'`);
    }
}

export function RuleActionRequestToJSON(json: any): any {
    return RuleActionRequestToJSONTyped(json, false);
}

export function RuleActionRequestToJSONTyped(value?: RuleActionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'allow':
            return Object.assign({}, RuleActionAllowToJSON(value), { type: 'allow' } as const);
        case 'block':
            return Object.assign({}, RuleActionBlockToJSON(value), { type: 'block' } as const);
        case 'require_approval':
            return Object.assign({}, RuleActionRequireApprovalRequestToJSON(value), { type: 'require_approval' } as const);
        default:
            throw new Error(`No variant of RuleActionRequest exists with 'type=${value['type']}'`);
    }

}

