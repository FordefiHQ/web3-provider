/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TonChain } from './TonChain';
import {
    TonChainFromJSON,
    TonChainFromJSONTyped,
    TonChainToJSON,
} from './TonChain';
import type { TonTransactionState } from './TonTransactionState';
import {
    TonTransactionStateFromJSON,
    TonTransactionStateFromJSONTyped,
    TonTransactionStateToJSON,
} from './TonTransactionState';
import type { TonTransactionType } from './TonTransactionType';
import {
    TonTransactionTypeFromJSON,
    TonTransactionTypeFromJSONTyped,
    TonTransactionTypeToJSON,
} from './TonTransactionType';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface WebhookTonTransactionStatusChangeEvent
 */
export interface WebhookTonTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookTonTransactionStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    type: WebhookTonTransactionStatusChangeEventTypeEnum;
    /**
     * 
     * @type {TonTransactionType}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    tonTransactionType: TonTransactionType;
    /**
     * 
     * @type {TonTransactionState}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    state: TonTransactionState;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    serializedSignedTransaction?: string;
    /**
     * 
     * @type {TonChain}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    chain: TonChain;
}


/**
 * @export
 */
export const WebhookTonTransactionStatusChangeEventTypeEnum = {
    tonTransaction: 'ton_transaction'
} as const;
export type WebhookTonTransactionStatusChangeEventTypeEnum = typeof WebhookTonTransactionStatusChangeEventTypeEnum[keyof typeof WebhookTonTransactionStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookTonTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookTonTransactionStatusChangeEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "isManagedTransaction" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "spamState" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tonTransactionType" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "chain" in value;

    return isInstance;
}

export function WebhookTonTransactionStatusChangeEventFromJSON(json: any): WebhookTonTransactionStatusChangeEvent {
    return WebhookTonTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookTonTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookTonTransactionStatusChangeEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'type': json['type'],
        'tonTransactionType': TonTransactionTypeFromJSON(json['ton_transaction_type']),
        'state': TonTransactionStateFromJSON(json['state']),
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'serializedSignedTransaction': !exists(json, 'serialized_signed_transaction') ? undefined : json['serialized_signed_transaction'],
        'chain': TonChainFromJSON(json['chain']),
    };
}

export function WebhookTonTransactionStatusChangeEventToJSON(value?: WebhookTonTransactionStatusChangeEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_id': value.transactionId,
        'is_managed_transaction': value.isManagedTransaction,
        'direction': TransactionDirectionToJSON(value.direction),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'type': value.type,
        'ton_transaction_type': TonTransactionTypeToJSON(value.tonTransactionType),
        'state': TonTransactionStateToJSON(value.state),
        'hash': value.hash,
        'serialized_signed_transaction': value.serializedSignedTransaction,
        'chain': TonChainToJSON(value.chain),
    };
}

