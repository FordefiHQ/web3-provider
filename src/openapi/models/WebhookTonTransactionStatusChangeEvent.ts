/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TonChain } from './TonChain';
import {
    TonChainFromJSON,
    TonChainFromJSONTyped,
    TonChainToJSON,
    TonChainToJSONTyped,
} from './TonChain';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { TonTransactionType } from './TonTransactionType';
import {
    TonTransactionTypeFromJSON,
    TonTransactionTypeFromJSONTyped,
    TonTransactionTypeToJSON,
    TonTransactionTypeToJSONTyped,
} from './TonTransactionType';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
    PushableTransactionStateFromJSONTyped,
    PushableTransactionStateToJSON,
    PushableTransactionStateToJSONTyped,
} from './PushableTransactionState';

/**
 * 
 * @export
 * @interface WebhookTonTransactionStatusChangeEvent
 */
export interface WebhookTonTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookTonTransactionStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    state: PushableTransactionState;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    type: WebhookTonTransactionStatusChangeEventTypeEnum;
    /**
     * 
     * @type {TonTransactionType}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    tonTransactionType: TonTransactionType;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    serializedSignedTransaction?: string;
    /**
     * 
     * @type {TonChain}
     * @memberof WebhookTonTransactionStatusChangeEvent
     */
    chain: TonChain;
}


/**
 * @export
 */
export const WebhookTonTransactionStatusChangeEventTypeEnum = {
    tonTransaction: 'ton_transaction'
} as const;
export type WebhookTonTransactionStatusChangeEventTypeEnum = typeof WebhookTonTransactionStatusChangeEventTypeEnum[keyof typeof WebhookTonTransactionStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookTonTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookTonTransactionStatusChangeEvent(value: object): value is WebhookTonTransactionStatusChangeEvent {
    if (!('transactionId' in value) || value['transactionId'] === undefined) return false;
    if (!('isManagedTransaction' in value) || value['isManagedTransaction'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('spamState' in value) || value['spamState'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('tonTransactionType' in value) || value['tonTransactionType'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    return true;
}

export function WebhookTonTransactionStatusChangeEventFromJSON(json: any): WebhookTonTransactionStatusChangeEvent {
    return WebhookTonTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookTonTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookTonTransactionStatusChangeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'state': PushableTransactionStateFromJSON(json['state']),
        'type': json['type'],
        'tonTransactionType': TonTransactionTypeFromJSON(json['ton_transaction_type']),
        'hash': json['hash'] == null ? undefined : json['hash'],
        'serializedSignedTransaction': json['serialized_signed_transaction'] == null ? undefined : json['serialized_signed_transaction'],
        'chain': TonChainFromJSON(json['chain']),
    };
}

export function WebhookTonTransactionStatusChangeEventToJSON(json: any): WebhookTonTransactionStatusChangeEvent {
    return WebhookTonTransactionStatusChangeEventToJSONTyped(json, false);
}

export function WebhookTonTransactionStatusChangeEventToJSONTyped(value?: WebhookTonTransactionStatusChangeEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transaction_id': value['transactionId'],
        'is_managed_transaction': value['isManagedTransaction'],
        'direction': TransactionDirectionToJSON(value['direction']),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'state': PushableTransactionStateToJSON(value['state']),
        'type': value['type'],
        'ton_transaction_type': TonTransactionTypeToJSON(value['tonTransactionType']),
        'hash': value['hash'],
        'serialized_signed_transaction': value['serializedSignedTransaction'],
        'chain': TonChainToJSON(value['chain']),
    };
}

