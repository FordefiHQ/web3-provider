/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CosmosMessageBase64Data
 */
export interface CosmosMessageBase64Data {
    /**
     * 
     * @type {string}
     * @memberof CosmosMessageBase64Data
     */
    type: CosmosMessageBase64DataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmosMessageBase64Data
     */
    data: string;
}


/**
 * @export
 */
export const CosmosMessageBase64DataTypeEnum = {
    base64: 'base64'
} as const;
export type CosmosMessageBase64DataTypeEnum = typeof CosmosMessageBase64DataTypeEnum[keyof typeof CosmosMessageBase64DataTypeEnum];


/**
 * Check if a given object implements the CosmosMessageBase64Data interface.
 */
export function instanceOfCosmosMessageBase64Data(value: object): value is CosmosMessageBase64Data {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function CosmosMessageBase64DataFromJSON(json: any): CosmosMessageBase64Data {
    return CosmosMessageBase64DataFromJSONTyped(json, false);
}

export function CosmosMessageBase64DataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosMessageBase64Data {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'data': json['data'],
    };
}

export function CosmosMessageBase64DataToJSON(json: any): CosmosMessageBase64Data {
    return CosmosMessageBase64DataToJSONTyped(json, false);
}

export function CosmosMessageBase64DataToJSONTyped(value?: CosmosMessageBase64Data | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'data': value['data'],
    };
}

