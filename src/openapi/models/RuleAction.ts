/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    RuleActionAllow,
    instanceOfRuleActionAllow,
    RuleActionAllowFromJSON,
    RuleActionAllowFromJSONTyped,
    RuleActionAllowToJSON,
} from './RuleActionAllow';
import {
    RuleActionBlock,
    instanceOfRuleActionBlock,
    RuleActionBlockFromJSON,
    RuleActionBlockFromJSONTyped,
    RuleActionBlockToJSON,
} from './RuleActionBlock';
import {
    RuleActionRequireApproval,
    instanceOfRuleActionRequireApproval,
    RuleActionRequireApprovalFromJSON,
    RuleActionRequireApprovalFromJSONTyped,
    RuleActionRequireApprovalToJSON,
} from './RuleActionRequireApproval';

/**
 * @type RuleAction
 * 
 * @export
 */
export type RuleAction = { type: 'allow' } & RuleActionAllow | { type: 'block' } & RuleActionBlock | { type: 'require_approval' } & RuleActionRequireApproval;

export function RuleActionFromJSON(json: any): RuleAction {
    return RuleActionFromJSONTyped(json, false);
}

export function RuleActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'allow':
            return {...RuleActionAllowFromJSONTyped(json, true), type: 'allow'};
        case 'block':
            return {...RuleActionBlockFromJSONTyped(json, true), type: 'block'};
        case 'require_approval':
            return {...RuleActionRequireApprovalFromJSONTyped(json, true), type: 'require_approval'};
        default:
            throw new Error(`No variant of RuleAction exists with 'type=${json['type']}'`);
    }
}

export function RuleActionToJSON(value?: RuleAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'allow':
            return RuleActionAllowToJSON(value);
        case 'block':
            return RuleActionBlockToJSON(value);
        case 'require_approval':
            return RuleActionRequireApprovalToJSON(value);
        default:
            throw new Error(`No variant of RuleAction exists with 'type=${value['type']}'`);
    }

}

