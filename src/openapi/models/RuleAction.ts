/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { RuleActionAllow } from './RuleActionAllow';
import {
    instanceOfRuleActionAllow,
    RuleActionAllowFromJSON,
    RuleActionAllowFromJSONTyped,
    RuleActionAllowToJSON,
} from './RuleActionAllow';
import type { RuleActionBlock } from './RuleActionBlock';
import {
    instanceOfRuleActionBlock,
    RuleActionBlockFromJSON,
    RuleActionBlockFromJSONTyped,
    RuleActionBlockToJSON,
} from './RuleActionBlock';
import type { RuleActionRequireApproval } from './RuleActionRequireApproval';
import {
    instanceOfRuleActionRequireApproval,
    RuleActionRequireApprovalFromJSON,
    RuleActionRequireApprovalFromJSONTyped,
    RuleActionRequireApprovalToJSON,
} from './RuleActionRequireApproval';

/**
 * @type RuleAction
 * 
 * @export
 */
export type RuleAction = { type: 'allow' } & RuleActionAllow | { type: 'block' } & RuleActionBlock | { type: 'require_approval' } & RuleActionRequireApproval;

export function RuleActionFromJSON(json: any): RuleAction {
    return RuleActionFromJSONTyped(json, false);
}

export function RuleActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleAction {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'allow':
            return Object.assign({}, RuleActionAllowFromJSONTyped(json, true), { type: 'allow' } as const);
        case 'block':
            return Object.assign({}, RuleActionBlockFromJSONTyped(json, true), { type: 'block' } as const);
        case 'require_approval':
            return Object.assign({}, RuleActionRequireApprovalFromJSONTyped(json, true), { type: 'require_approval' } as const);
        default:
            throw new Error(`No variant of RuleAction exists with 'type=${json['type']}'`);
    }
}

export function RuleActionToJSON(json: any): any {
    return RuleActionToJSONTyped(json, false);
}

export function RuleActionToJSONTyped(value?: RuleAction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'allow':
            return Object.assign({}, RuleActionAllowToJSON(value), { type: 'allow' } as const);
        case 'block':
            return Object.assign({}, RuleActionBlockToJSON(value), { type: 'block' } as const);
        case 'require_approval':
            return Object.assign({}, RuleActionRequireApprovalToJSON(value), { type: 'require_approval' } as const);
        default:
            throw new Error(`No variant of RuleAction exists with 'type=${value['type']}'`);
    }

}

