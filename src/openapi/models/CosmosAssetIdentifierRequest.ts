/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CosmosAssetIdentifierRequestDetails } from './CosmosAssetIdentifierRequestDetails';
import {
    CosmosAssetIdentifierRequestDetailsFromJSON,
    CosmosAssetIdentifierRequestDetailsFromJSONTyped,
    CosmosAssetIdentifierRequestDetailsToJSON,
} from './CosmosAssetIdentifierRequestDetails';

/**
 * 
 * @export
 * @interface CosmosAssetIdentifierRequest
 */
export interface CosmosAssetIdentifierRequest {
    /**
     * 
     * @type {string}
     * @memberof CosmosAssetIdentifierRequest
     */
    type: CosmosAssetIdentifierRequestTypeEnum;
    /**
     * 
     * @type {CosmosAssetIdentifierRequestDetails}
     * @memberof CosmosAssetIdentifierRequest
     */
    details: CosmosAssetIdentifierRequestDetails;
}


/**
 * @export
 */
export const CosmosAssetIdentifierRequestTypeEnum = {
    cosmos: 'cosmos'
} as const;
export type CosmosAssetIdentifierRequestTypeEnum = typeof CosmosAssetIdentifierRequestTypeEnum[keyof typeof CosmosAssetIdentifierRequestTypeEnum];


/**
 * Check if a given object implements the CosmosAssetIdentifierRequest interface.
 */
export function instanceOfCosmosAssetIdentifierRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "details" in value;

    return isInstance;
}

export function CosmosAssetIdentifierRequestFromJSON(json: any): CosmosAssetIdentifierRequest {
    return CosmosAssetIdentifierRequestFromJSONTyped(json, false);
}

export function CosmosAssetIdentifierRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosAssetIdentifierRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'details': CosmosAssetIdentifierRequestDetailsFromJSON(json['details']),
    };
}

export function CosmosAssetIdentifierRequestToJSON(value?: CosmosAssetIdentifierRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'details': CosmosAssetIdentifierRequestDetailsToJSON(value.details),
    };
}

