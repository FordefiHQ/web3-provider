/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ApiSignerExt,
    instanceOfApiSignerExt,
    ApiSignerExtFromJSON,
    ApiSignerExtFromJSONTyped,
    ApiSignerExtToJSON,
} from './ApiSignerExt';
import {
    ApiUserExt,
    instanceOfApiUserExt,
    ApiUserExtFromJSON,
    ApiUserExtFromJSONTyped,
    ApiUserExtToJSON,
} from './ApiUserExt';
import {
    PersonExt,
    instanceOfPersonExt,
    PersonExtFromJSON,
    PersonExtFromJSONTyped,
    PersonExtToJSON,
} from './PersonExt';

/**
 * @type UserExt
 * 
 * @export
 */
export type UserExt = { userType: 'api_signer' } & ApiSignerExt | { userType: 'api_user' } & ApiUserExt | { userType: 'person' } & PersonExt;

export function UserExtFromJSON(json: any): UserExt {
    return UserExtFromJSONTyped(json, false);
}

export function UserExtFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserExt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['user_type']) {
        case 'api_signer':
            return {...ApiSignerExtFromJSONTyped(json, true), userType: 'api_signer'};
        case 'api_user':
            return {...ApiUserExtFromJSONTyped(json, true), userType: 'api_user'};
        case 'person':
            return {...PersonExtFromJSONTyped(json, true), userType: 'person'};
        default:
            throw new Error(`No variant of UserExt exists with 'userType=${json['userType']}'`);
    }
}

export function UserExtToJSON(value?: UserExt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['userType']) {
        case 'api_signer':
            return ApiSignerExtToJSON(value);
        case 'api_user':
            return ApiUserExtToJSON(value);
        case 'person':
            return PersonExtToJSON(value);
        default:
            throw new Error(`No variant of UserExt exists with 'userType=${value['userType']}'`);
    }

}

