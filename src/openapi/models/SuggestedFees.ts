/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AptosSuggestedFees } from './AptosSuggestedFees';
import {
    instanceOfAptosSuggestedFees,
    AptosSuggestedFeesFromJSON,
    AptosSuggestedFeesFromJSONTyped,
    AptosSuggestedFeesToJSON,
} from './AptosSuggestedFees';
import type { CosmosSuggestedFees } from './CosmosSuggestedFees';
import {
    instanceOfCosmosSuggestedFees,
    CosmosSuggestedFeesFromJSON,
    CosmosSuggestedFeesFromJSONTyped,
    CosmosSuggestedFeesToJSON,
} from './CosmosSuggestedFees';
import type { EvmSuggestedFees } from './EvmSuggestedFees';
import {
    instanceOfEvmSuggestedFees,
    EvmSuggestedFeesFromJSON,
    EvmSuggestedFeesFromJSONTyped,
    EvmSuggestedFeesToJSON,
} from './EvmSuggestedFees';
import type { StarknetSuggestedFees } from './StarknetSuggestedFees';
import {
    instanceOfStarknetSuggestedFees,
    StarknetSuggestedFeesFromJSON,
    StarknetSuggestedFeesFromJSONTyped,
    StarknetSuggestedFeesToJSON,
} from './StarknetSuggestedFees';
import type { SuiSuggestedFees } from './SuiSuggestedFees';
import {
    instanceOfSuiSuggestedFees,
    SuiSuggestedFeesFromJSON,
    SuiSuggestedFeesFromJSONTyped,
    SuiSuggestedFeesToJSON,
} from './SuiSuggestedFees';
import type { TonSuggestedFees } from './TonSuggestedFees';
import {
    instanceOfTonSuggestedFees,
    TonSuggestedFeesFromJSON,
    TonSuggestedFeesFromJSONTyped,
    TonSuggestedFeesToJSON,
} from './TonSuggestedFees';
import type { UtxoSuggestedFees } from './UtxoSuggestedFees';
import {
    instanceOfUtxoSuggestedFees,
    UtxoSuggestedFeesFromJSON,
    UtxoSuggestedFeesFromJSONTyped,
    UtxoSuggestedFeesToJSON,
} from './UtxoSuggestedFees';

/**
 * @type SuggestedFees
 * 
 * @export
 */
export type SuggestedFees = { type: 'aptos' } & AptosSuggestedFees | { type: 'cosmos' } & CosmosSuggestedFees | { type: 'evm' } & EvmSuggestedFees | { type: 'starknet' } & StarknetSuggestedFees | { type: 'sui' } & SuiSuggestedFees | { type: 'ton' } & TonSuggestedFees | { type: 'utxo' } & UtxoSuggestedFees;

export function SuggestedFeesFromJSON(json: any): SuggestedFees {
    return SuggestedFeesFromJSONTyped(json, false);
}

export function SuggestedFeesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuggestedFees {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'aptos':
            return Object.assign({}, AptosSuggestedFeesFromJSONTyped(json, true), { type: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, CosmosSuggestedFeesFromJSONTyped(json, true), { type: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, EvmSuggestedFeesFromJSONTyped(json, true), { type: 'evm' } as const);
        case 'starknet':
            return Object.assign({}, StarknetSuggestedFeesFromJSONTyped(json, true), { type: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, SuiSuggestedFeesFromJSONTyped(json, true), { type: 'sui' } as const);
        case 'ton':
            return Object.assign({}, TonSuggestedFeesFromJSONTyped(json, true), { type: 'ton' } as const);
        case 'utxo':
            return Object.assign({}, UtxoSuggestedFeesFromJSONTyped(json, true), { type: 'utxo' } as const);
        default:
            throw new Error(`No variant of SuggestedFees exists with 'type=${json['type']}'`);
    }
}

export function SuggestedFeesToJSON(json: any): any {
    return SuggestedFeesToJSONTyped(json, false);
}

export function SuggestedFeesToJSONTyped(value?: SuggestedFees | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'aptos':
            return Object.assign({}, AptosSuggestedFeesToJSON(value), { type: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, CosmosSuggestedFeesToJSON(value), { type: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, EvmSuggestedFeesToJSON(value), { type: 'evm' } as const);
        case 'starknet':
            return Object.assign({}, StarknetSuggestedFeesToJSON(value), { type: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, SuiSuggestedFeesToJSON(value), { type: 'sui' } as const);
        case 'ton':
            return Object.assign({}, TonSuggestedFeesToJSON(value), { type: 'ton' } as const);
        case 'utxo':
            return Object.assign({}, UtxoSuggestedFeesToJSON(value), { type: 'utxo' } as const);
        default:
            throw new Error(`No variant of SuggestedFees exists with 'type=${value['type']}'`);
    }

}

