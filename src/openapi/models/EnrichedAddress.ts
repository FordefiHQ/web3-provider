/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EnrichedAptosAddress } from './EnrichedAptosAddress';
import {
    EnrichedAptosAddressFromJSONTyped,
} from './EnrichedAptosAddress';
import type { EnrichedCosmosBechAddress } from './EnrichedCosmosBechAddress';
import {
    EnrichedCosmosBechAddressFromJSONTyped,
} from './EnrichedCosmosBechAddress';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSONTyped,
} from './EnrichedEvmAddress';
import type { EnrichedExchangeAddress } from './EnrichedExchangeAddress';
import {
    EnrichedExchangeAddressFromJSONTyped,
} from './EnrichedExchangeAddress';
import type { EnrichedSolanaAddress } from './EnrichedSolanaAddress';
import {
    EnrichedSolanaAddressFromJSONTyped,
} from './EnrichedSolanaAddress';
import type { EnrichedStacksAddress } from './EnrichedStacksAddress';
import {
    EnrichedStacksAddressFromJSONTyped,
} from './EnrichedStacksAddress';
import type { EnrichedStarknetAddress } from './EnrichedStarknetAddress';
import {
    EnrichedStarknetAddressFromJSONTyped,
} from './EnrichedStarknetAddress';
import type { EnrichedSuiAddress } from './EnrichedSuiAddress';
import {
    EnrichedSuiAddressFromJSONTyped,
} from './EnrichedSuiAddress';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSONTyped,
} from './EnrichedTonAddress';
import type { EnrichedTronAddress } from './EnrichedTronAddress';
import {
    EnrichedTronAddressFromJSONTyped,
} from './EnrichedTronAddress';
import type { EnrichedUtxoAddress } from './EnrichedUtxoAddress';
import {
    EnrichedUtxoAddressFromJSONTyped,
} from './EnrichedUtxoAddress';

/**
 * 
 * @export
 * @type EnrichedAddress
 */
export type EnrichedAddress = { type: 'aptos' } & EnrichedAptosAddress | { type: 'cosmos' } & EnrichedCosmosBechAddress | { type: 'evm' } & EnrichedEvmAddress | { type: 'exchange' } & EnrichedExchangeAddress | { type: 'solana' } & EnrichedSolanaAddress | { type: 'stacks' } & EnrichedStacksAddress | { type: 'starknet' } & EnrichedStarknetAddress | { type: 'sui' } & EnrichedSuiAddress | { type: 'ton' } & EnrichedTonAddress | { type: 'tron' } & EnrichedTronAddress | { type: 'utxo' } & EnrichedUtxoAddress;

export function EnrichedAddressFromJSON(json: any): EnrichedAddress {
    return EnrichedAddressFromJSONTyped(json, false);
}

function EnrichedAddressFromJSONTyped(json: any, _ignoreDiscriminator: boolean): EnrichedAddress {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'aptos':
            return Object.assign({}, EnrichedAptosAddressFromJSONTyped(json, true), { type: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, EnrichedCosmosBechAddressFromJSONTyped(json, true), { type: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, EnrichedEvmAddressFromJSONTyped(json, true), { type: 'evm' } as const);
        case 'exchange':
            return Object.assign({}, EnrichedExchangeAddressFromJSONTyped(json, true), { type: 'exchange' } as const);
        case 'solana':
            return Object.assign({}, EnrichedSolanaAddressFromJSONTyped(json, true), { type: 'solana' } as const);
        case 'stacks':
            return Object.assign({}, EnrichedStacksAddressFromJSONTyped(json, true), { type: 'stacks' } as const);
        case 'starknet':
            return Object.assign({}, EnrichedStarknetAddressFromJSONTyped(json, true), { type: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, EnrichedSuiAddressFromJSONTyped(json, true), { type: 'sui' } as const);
        case 'ton':
            return Object.assign({}, EnrichedTonAddressFromJSONTyped(json, true), { type: 'ton' } as const);
        case 'tron':
            return Object.assign({}, EnrichedTronAddressFromJSONTyped(json, true), { type: 'tron' } as const);
        case 'utxo':
            return Object.assign({}, EnrichedUtxoAddressFromJSONTyped(json, true), { type: 'utxo' } as const);
        default:
            throw new Error(`No variant of EnrichedAddress exists with 'type=${json['type']}'`);
    }
}

