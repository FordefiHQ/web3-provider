/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DescribedEvmMessageTypedData } from './DescribedEvmMessageTypedData';
import {
    DescribedEvmMessageTypedDataFromJSON,
    DescribedEvmMessageTypedDataFromJSONTyped,
    DescribedEvmMessageTypedDataToJSON,
} from './DescribedEvmMessageTypedData';
import type { EnrichedEvmChain } from './EnrichedEvmChain';
import {
    EnrichedEvmChainFromJSON,
    EnrichedEvmChainFromJSONTyped,
    EnrichedEvmChainToJSON,
} from './EnrichedEvmChain';
import type { EvmMessageType } from './EvmMessageType';
import {
    EvmMessageTypeFromJSON,
    EvmMessageTypeFromJSONTyped,
    EvmMessageTypeToJSON,
} from './EvmMessageType';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
} from './VaultRef';

/**
 * 
 * @export
 * @interface DescribedEvmMessage
 */
export interface DescribedEvmMessage {
    /**
     * 
     * @type {string}
     * @memberof DescribedEvmMessage
     */
    type: DescribedEvmMessageTypeEnum;
    /**
     * 
     * @type {VaultRef}
     * @memberof DescribedEvmMessage
     */
    vault: VaultRef;
    /**
     * 
     * @type {EvmMessageType}
     * @memberof DescribedEvmMessage
     */
    evmMessageType: EvmMessageType;
    /**
     * 
     * @type {DescribedEvmMessageTypedData}
     * @memberof DescribedEvmMessage
     */
    typedData?: DescribedEvmMessageTypedData;
    /**
     * 
     * @type {EnrichedEvmChain}
     * @memberof DescribedEvmMessage
     */
    chain: EnrichedEvmChain;
    /**
     * 
     * @type {string}
     * @memberof DescribedEvmMessage
     */
    rawData: string;
}


/**
 * @export
 */
export const DescribedEvmMessageTypeEnum = {
    evmMessage: 'evm_message'
} as const;
export type DescribedEvmMessageTypeEnum = typeof DescribedEvmMessageTypeEnum[keyof typeof DescribedEvmMessageTypeEnum];


/**
 * Check if a given object implements the DescribedEvmMessage interface.
 */
export function instanceOfDescribedEvmMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "vault" in value;
    isInstance = isInstance && "evmMessageType" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "rawData" in value;

    return isInstance;
}

export function DescribedEvmMessageFromJSON(json: any): DescribedEvmMessage {
    return DescribedEvmMessageFromJSONTyped(json, false);
}

export function DescribedEvmMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): DescribedEvmMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'vault': VaultRefFromJSON(json['vault']),
        'evmMessageType': EvmMessageTypeFromJSON(json['evm_message_type']),
        'typedData': !exists(json, 'typed_data') ? undefined : DescribedEvmMessageTypedDataFromJSON(json['typed_data']),
        'chain': EnrichedEvmChainFromJSON(json['chain']),
        'rawData': json['raw_data'],
    };
}

export function DescribedEvmMessageToJSON(value?: DescribedEvmMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'vault': VaultRefToJSON(value.vault),
        'evm_message_type': EvmMessageTypeToJSON(value.evmMessageType),
        'typed_data': DescribedEvmMessageTypedDataToJSON(value.typedData),
        'chain': EnrichedEvmChainToJSON(value.chain),
        'raw_data': value.rawData,
    };
}

