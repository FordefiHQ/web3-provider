/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CosmosChainUniqueId } from './CosmosChainUniqueId';
import {
    CosmosChainUniqueIdFromJSON,
    CosmosChainUniqueIdFromJSONTyped,
    CosmosChainUniqueIdToJSON,
    CosmosChainUniqueIdToJSONTyped,
} from './CosmosChainUniqueId';

/**
 * 
 * @export
 * @interface CosmosTokenAssetIdentifierRequest
 */
export interface CosmosTokenAssetIdentifierRequest {
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenAssetIdentifierRequest
     */
    type: CosmosTokenAssetIdentifierRequestTypeEnum;
    /**
     * 
     * @type {CosmosChainUniqueId}
     * @memberof CosmosTokenAssetIdentifierRequest
     */
    chain: CosmosChainUniqueId;
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenAssetIdentifierRequest
     */
    denom: string;
}


/**
 * @export
 */
export const CosmosTokenAssetIdentifierRequestTypeEnum = {
    token: 'token'
} as const;
export type CosmosTokenAssetIdentifierRequestTypeEnum = typeof CosmosTokenAssetIdentifierRequestTypeEnum[keyof typeof CosmosTokenAssetIdentifierRequestTypeEnum];


/**
 * Check if a given object implements the CosmosTokenAssetIdentifierRequest interface.
 */
export function instanceOfCosmosTokenAssetIdentifierRequest(value: object): value is CosmosTokenAssetIdentifierRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('denom' in value) || value['denom'] === undefined) return false;
    return true;
}

export function CosmosTokenAssetIdentifierRequestFromJSON(json: any): CosmosTokenAssetIdentifierRequest {
    return CosmosTokenAssetIdentifierRequestFromJSONTyped(json, false);
}

export function CosmosTokenAssetIdentifierRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosTokenAssetIdentifierRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'chain': CosmosChainUniqueIdFromJSON(json['chain']),
        'denom': json['denom'],
    };
}

export function CosmosTokenAssetIdentifierRequestToJSON(json: any): CosmosTokenAssetIdentifierRequest {
    return CosmosTokenAssetIdentifierRequestToJSONTyped(json, false);
}

export function CosmosTokenAssetIdentifierRequestToJSONTyped(value?: CosmosTokenAssetIdentifierRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'chain': CosmosChainUniqueIdToJSON(value['chain']),
        'denom': value['denom'],
    };
}

