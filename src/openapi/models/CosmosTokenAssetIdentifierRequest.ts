/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CosmosChainUniqueId } from './CosmosChainUniqueId';
import {
    CosmosChainUniqueIdFromJSON,
    CosmosChainUniqueIdToJSON,
} from './CosmosChainUniqueId';

/**
 * 
 * @export
 * @interface CosmosTokenAssetIdentifierRequest
 */
export interface CosmosTokenAssetIdentifierRequest {
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenAssetIdentifierRequest
     */
    type: CosmosTokenAssetIdentifierRequestTypeEnum;
    /**
     * 
     * @type {CosmosChainUniqueId}
     * @memberof CosmosTokenAssetIdentifierRequest
     */
    chain: CosmosChainUniqueId;
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenAssetIdentifierRequest
     */
    denom: string;
}


/**
 * 
 */
const CosmosTokenAssetIdentifierRequestTypeEnum = {
    token: 'token'
} as const;
type CosmosTokenAssetIdentifierRequestTypeEnum = typeof CosmosTokenAssetIdentifierRequestTypeEnum[keyof typeof CosmosTokenAssetIdentifierRequestTypeEnum];

export function CosmosTokenAssetIdentifierRequestFromJSONTyped(json: any, _ignoreDiscriminator: boolean): CosmosTokenAssetIdentifierRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'chain': CosmosChainUniqueIdFromJSON(json['chain']),
        'denom': json['denom'],
    };
}

export function CosmosTokenAssetIdentifierRequestToJSON(json: any): CosmosTokenAssetIdentifierRequest {
    return CosmosTokenAssetIdentifierRequestToJSONTyped(json, false);
}

function CosmosTokenAssetIdentifierRequestToJSONTyped(value?: CosmosTokenAssetIdentifierRequest | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'chain': CosmosChainUniqueIdToJSON(value['chain']),
        'denom': value['denom'],
    };
}
