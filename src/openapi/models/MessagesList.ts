/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AminoMessagesList } from './AminoMessagesList';
import {
    instanceOfAminoMessagesList,
    AminoMessagesListFromJSON,
    AminoMessagesListFromJSONTyped,
    AminoMessagesListToJSON,
} from './AminoMessagesList';
import type { DirectMessagesList } from './DirectMessagesList';
import {
    instanceOfDirectMessagesList,
    DirectMessagesListFromJSON,
    DirectMessagesListFromJSONTyped,
    DirectMessagesListToJSON,
} from './DirectMessagesList';
import type { MinedMessagesList } from './MinedMessagesList';
import {
    instanceOfMinedMessagesList,
    MinedMessagesListFromJSON,
    MinedMessagesListFromJSONTyped,
    MinedMessagesListToJSON,
} from './MinedMessagesList';

/**
 * @type MessagesList
 * 
 * @export
 */
export type MessagesList = { format: 'amino' } & AminoMessagesList | { format: 'direct' } & DirectMessagesList | { format: 'mined' } & MinedMessagesList;

export function MessagesListFromJSON(json: any): MessagesList {
    return MessagesListFromJSONTyped(json, false);
}

export function MessagesListFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessagesList {
    if (json == null) {
        return json;
    }
    switch (json['format']) {
        case 'amino':
            return Object.assign({}, AminoMessagesListFromJSONTyped(json, true), { format: 'amino' } as const);
        case 'direct':
            return Object.assign({}, DirectMessagesListFromJSONTyped(json, true), { format: 'direct' } as const);
        case 'mined':
            return Object.assign({}, MinedMessagesListFromJSONTyped(json, true), { format: 'mined' } as const);
        default:
            throw new Error(`No variant of MessagesList exists with 'format=${json['format']}'`);
    }
}

export function MessagesListToJSON(json: any): any {
    return MessagesListToJSONTyped(json, false);
}

export function MessagesListToJSONTyped(value?: MessagesList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['format']) {
        case 'amino':
            return Object.assign({}, AminoMessagesListToJSON(value), { format: 'amino' } as const);
        case 'direct':
            return Object.assign({}, DirectMessagesListToJSON(value), { format: 'direct' } as const);
        case 'mined':
            return Object.assign({}, MinedMessagesListToJSON(value), { format: 'mined' } as const);
        default:
            throw new Error(`No variant of MessagesList exists with 'format=${value['format']}'`);
    }

}

