/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EndUserRef } from './EndUserRef';
import {
    EndUserRefFromJSON,
    EndUserRefFromJSONTyped,
    EndUserRefToJSON,
} from './EndUserRef';
import type { VaultState } from './VaultState';
import {
    VaultStateFromJSON,
    VaultStateFromJSONTyped,
    VaultStateToJSON,
} from './VaultState';

/**
 * 
 * @export
 * @interface VaultRef
 */
export interface VaultRef {
    /**
     * 
     * @type {string}
     * @memberof VaultRef
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof VaultRef
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof VaultRef
     */
    address?: string;
    /**
     * 
     * @type {VaultState}
     * @memberof VaultRef
     */
    state: VaultState;
    /**
     * 
     * @type {EndUserRef}
     * @memberof VaultRef
     */
    endUser?: EndUserRef;
}

/**
 * Check if a given object implements the VaultRef interface.
 */
export function instanceOfVaultRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function VaultRefFromJSON(json: any): VaultRef {
    return VaultRefFromJSONTyped(json, false);
}

export function VaultRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'state': VaultStateFromJSON(json['state']),
        'endUser': !exists(json, 'end_user') ? undefined : EndUserRefFromJSON(json['end_user']),
    };
}

export function VaultRefToJSON(value?: VaultRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'address': value.address,
        'state': VaultStateToJSON(value.state),
        'end_user': EndUserRefToJSON(value.endUser),
    };
}

