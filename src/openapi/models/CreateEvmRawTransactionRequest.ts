/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateEvmRawTransactionRequestGas } from './CreateEvmRawTransactionRequestGas';
import {
    CreateEvmRawTransactionRequestGasFromJSON,
    CreateEvmRawTransactionRequestGasFromJSONTyped,
    CreateEvmRawTransactionRequestGasToJSON,
} from './CreateEvmRawTransactionRequestGas';
import type { EvmChainRequest } from './EvmChainRequest';
import {
    EvmChainRequestFromJSON,
    EvmChainRequestFromJSONTyped,
    EvmChainRequestToJSON,
} from './EvmChainRequest';
import type { EvmDataRequest } from './EvmDataRequest';
import {
    EvmDataRequestFromJSON,
    EvmDataRequestFromJSONTyped,
    EvmDataRequestToJSON,
} from './EvmDataRequest';
import type { PushMode } from './PushMode';
import {
    PushModeFromJSON,
    PushModeFromJSONTyped,
    PushModeToJSON,
} from './PushMode';

/**
 * 
 * @export
 * @interface CreateEvmRawTransactionRequest
 */
export interface CreateEvmRawTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateEvmRawTransactionRequest
     */
    type: CreateEvmRawTransactionRequestTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateEvmRawTransactionRequest
     */
    useSecureNode?: boolean;
    /**
     * 
     * @type {CreateEvmRawTransactionRequestGas}
     * @memberof CreateEvmRawTransactionRequest
     */
    gas: CreateEvmRawTransactionRequestGas;
    /**
     * 
     * @type {boolean}
     * @memberof CreateEvmRawTransactionRequest
     */
    failOnPredictionFailure?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateEvmRawTransactionRequest
     */
    skipPrediction?: boolean;
    /**
     * 
     * @type {PushMode}
     * @memberof CreateEvmRawTransactionRequest
     */
    pushMode?: PushMode;
    /**
     * 
     * @type {string}
     * @memberof CreateEvmRawTransactionRequest
     */
    funder?: string;
    /**
     * 
     * @type {EvmChainRequest}
     * @memberof CreateEvmRawTransactionRequest
     */
    chain: EvmChainRequest;
    /**
     * 
     * @type {string}
     * @memberof CreateEvmRawTransactionRequest
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEvmRawTransactionRequest
     */
    value: string;
    /**
     * 
     * @type {EvmDataRequest}
     * @memberof CreateEvmRawTransactionRequest
     */
    data?: EvmDataRequest;
}


/**
 * @export
 */
export const CreateEvmRawTransactionRequestTypeEnum = {
    evmRawTransaction: 'evm_raw_transaction'
} as const;
export type CreateEvmRawTransactionRequestTypeEnum = typeof CreateEvmRawTransactionRequestTypeEnum[keyof typeof CreateEvmRawTransactionRequestTypeEnum];


/**
 * Check if a given object implements the CreateEvmRawTransactionRequest interface.
 */
export function instanceOfCreateEvmRawTransactionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "gas" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function CreateEvmRawTransactionRequestFromJSON(json: any): CreateEvmRawTransactionRequest {
    return CreateEvmRawTransactionRequestFromJSONTyped(json, false);
}

export function CreateEvmRawTransactionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateEvmRawTransactionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'useSecureNode': !exists(json, 'use_secure_node') ? undefined : json['use_secure_node'],
        'gas': CreateEvmRawTransactionRequestGasFromJSON(json['gas']),
        'failOnPredictionFailure': !exists(json, 'fail_on_prediction_failure') ? undefined : json['fail_on_prediction_failure'],
        'skipPrediction': !exists(json, 'skip_prediction') ? undefined : json['skip_prediction'],
        'pushMode': !exists(json, 'push_mode') ? undefined : PushModeFromJSON(json['push_mode']),
        'funder': !exists(json, 'funder') ? undefined : json['funder'],
        'chain': EvmChainRequestFromJSON(json['chain']),
        'to': json['to'],
        'value': json['value'],
        'data': !exists(json, 'data') ? undefined : EvmDataRequestFromJSON(json['data']),
    };
}

export function CreateEvmRawTransactionRequestToJSON(value?: CreateEvmRawTransactionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'use_secure_node': value.useSecureNode,
        'gas': CreateEvmRawTransactionRequestGasToJSON(value.gas),
        'fail_on_prediction_failure': value.failOnPredictionFailure,
        'skip_prediction': value.skipPrediction,
        'push_mode': PushModeToJSON(value.pushMode),
        'funder': value.funder,
        'chain': EvmChainRequestToJSON(value.chain),
        'to': value.to,
        'value': value.value,
        'data': EvmDataRequestToJSON(value.data),
    };
}

