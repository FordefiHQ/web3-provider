/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { FordefiRpcEndpoint } from './FordefiRpcEndpoint';
import {
    instanceOfFordefiRpcEndpoint,
    FordefiRpcEndpointFromJSON,
    FordefiRpcEndpointFromJSONTyped,
    FordefiRpcEndpointToJSON,
} from './FordefiRpcEndpoint';
import type { PublicRpcEndpoint } from './PublicRpcEndpoint';
import {
    instanceOfPublicRpcEndpoint,
    PublicRpcEndpointFromJSON,
    PublicRpcEndpointFromJSONTyped,
    PublicRpcEndpointToJSON,
} from './PublicRpcEndpoint';

/**
 * @type RpcEndpointDetails
 * 
 * @export
 */
export type RpcEndpointDetails = { type: 'fordefi_suggested' } & FordefiRpcEndpoint | { type: 'public' } & PublicRpcEndpoint;

export function RpcEndpointDetailsFromJSON(json: any): RpcEndpointDetails {
    return RpcEndpointDetailsFromJSONTyped(json, false);
}

export function RpcEndpointDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RpcEndpointDetails {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'fordefi_suggested':
            return Object.assign({}, FordefiRpcEndpointFromJSONTyped(json, true), { type: 'fordefi_suggested' } as const);
        case 'public':
            return Object.assign({}, PublicRpcEndpointFromJSONTyped(json, true), { type: 'public' } as const);
        default:
            throw new Error(`No variant of RpcEndpointDetails exists with 'type=${json['type']}'`);
    }
}

export function RpcEndpointDetailsToJSON(json: any): any {
    return RpcEndpointDetailsToJSONTyped(json, false);
}

export function RpcEndpointDetailsToJSONTyped(value?: RpcEndpointDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'fordefi_suggested':
            return Object.assign({}, FordefiRpcEndpointToJSON(value), { type: 'fordefi_suggested' } as const);
        case 'public':
            return Object.assign({}, PublicRpcEndpointToJSON(value), { type: 'public' } as const);
        default:
            throw new Error(`No variant of RpcEndpointDetails exists with 'type=${value['type']}'`);
    }

}

