/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
    VaultRefToJSONTyped,
} from './VaultRef';
import type { VaultGroupRef } from './VaultGroupRef';
import {
    VaultGroupRefFromJSON,
    VaultGroupRefFromJSONTyped,
    VaultGroupRefToJSON,
    VaultGroupRefToJSONTyped,
} from './VaultGroupRef';

/**
 * 
 * @export
 * @interface VaultsConditionCustom
 */
export interface VaultsConditionCustom {
    /**
     * 
     * @type {string}
     * @memberof VaultsConditionCustom
     */
    type: VaultsConditionCustomTypeEnum;
    /**
     * 
     * @type {Array<VaultRef>}
     * @memberof VaultsConditionCustom
     */
    vaults?: Array<VaultRef>;
    /**
     * 
     * @type {Array<VaultGroupRef>}
     * @memberof VaultsConditionCustom
     */
    vaultGroups?: Array<VaultGroupRef>;
}


/**
 * @export
 */
export const VaultsConditionCustomTypeEnum = {
    custom: 'custom'
} as const;
export type VaultsConditionCustomTypeEnum = typeof VaultsConditionCustomTypeEnum[keyof typeof VaultsConditionCustomTypeEnum];


/**
 * Check if a given object implements the VaultsConditionCustom interface.
 */
export function instanceOfVaultsConditionCustom(value: object): value is VaultsConditionCustom {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function VaultsConditionCustomFromJSON(json: any): VaultsConditionCustom {
    return VaultsConditionCustomFromJSONTyped(json, false);
}

export function VaultsConditionCustomFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultsConditionCustom {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'vaults': json['vaults'] == null ? undefined : ((json['vaults'] as Array<any>).map(VaultRefFromJSON)),
        'vaultGroups': json['vault_groups'] == null ? undefined : ((json['vault_groups'] as Array<any>).map(VaultGroupRefFromJSON)),
    };
}

export function VaultsConditionCustomToJSON(json: any): VaultsConditionCustom {
    return VaultsConditionCustomToJSONTyped(json, false);
}

export function VaultsConditionCustomToJSONTyped(value?: VaultsConditionCustom | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'vaults': value['vaults'] == null ? undefined : ((value['vaults'] as Array<any>).map(VaultRefToJSON)),
        'vault_groups': value['vaultGroups'] == null ? undefined : ((value['vaultGroups'] as Array<any>).map(VaultGroupRefToJSON)),
    };
}

