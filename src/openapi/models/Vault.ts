/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AptosVault } from './AptosVault';
import {
    AptosVaultFromJSONTyped,
} from './AptosVault';
import type { BlackBoxVault } from './BlackBoxVault';
import {
    BlackBoxVaultFromJSONTyped,
} from './BlackBoxVault';
import type { CosmosVault } from './CosmosVault';
import {
    CosmosVaultFromJSONTyped,
} from './CosmosVault';
import type { EvmVault } from './EvmVault';
import {
    EvmVaultFromJSONTyped,
} from './EvmVault';
import type { ExchangeVault } from './ExchangeVault';
import {
    ExchangeVaultFromJSONTyped,
} from './ExchangeVault';
import type { SolanaVault } from './SolanaVault';
import {
    SolanaVaultFromJSONTyped,
} from './SolanaVault';
import type { StacksVault } from './StacksVault';
import {
    StacksVaultFromJSONTyped,
} from './StacksVault';
import type { StarknetVault } from './StarknetVault';
import {
    StarknetVaultFromJSONTyped,
} from './StarknetVault';
import type { SuiVault } from './SuiVault';
import {
    SuiVaultFromJSONTyped,
} from './SuiVault';
import type { TonVault } from './TonVault';
import {
    TonVaultFromJSONTyped,
} from './TonVault';
import type { TronVault } from './TronVault';
import {
    TronVaultFromJSONTyped,
} from './TronVault';
import type { UtxoVault } from './UtxoVault';
import {
    UtxoVaultFromJSONTyped,
} from './UtxoVault';

/**
 * 
 * @export
 * @type Vault
 */
export type Vault = { type: 'aptos' } & AptosVault | { type: 'black_box' } & BlackBoxVault | { type: 'cosmos' } & CosmosVault | { type: 'evm' } & EvmVault | { type: 'exchange' } & ExchangeVault | { type: 'solana' } & SolanaVault | { type: 'stacks' } & StacksVault | { type: 'starknet' } & StarknetVault | { type: 'sui' } & SuiVault | { type: 'ton' } & TonVault | { type: 'tron' } & TronVault | { type: 'utxo' } & UtxoVault;

export function VaultFromJSON(json: any): Vault {
    return VaultFromJSONTyped(json, false);
}

function VaultFromJSONTyped(json: any, _ignoreDiscriminator: boolean): Vault {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'aptos':
            return Object.assign({}, AptosVaultFromJSONTyped(json, true), { type: 'aptos' } as const);
        case 'black_box':
            return Object.assign({}, BlackBoxVaultFromJSONTyped(json, true), { type: 'black_box' } as const);
        case 'cosmos':
            return Object.assign({}, CosmosVaultFromJSONTyped(json, true), { type: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, EvmVaultFromJSONTyped(json, true), { type: 'evm' } as const);
        case 'exchange':
            return Object.assign({}, ExchangeVaultFromJSONTyped(json, true), { type: 'exchange' } as const);
        case 'solana':
            return Object.assign({}, SolanaVaultFromJSONTyped(json, true), { type: 'solana' } as const);
        case 'stacks':
            return Object.assign({}, StacksVaultFromJSONTyped(json, true), { type: 'stacks' } as const);
        case 'starknet':
            return Object.assign({}, StarknetVaultFromJSONTyped(json, true), { type: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, SuiVaultFromJSONTyped(json, true), { type: 'sui' } as const);
        case 'ton':
            return Object.assign({}, TonVaultFromJSONTyped(json, true), { type: 'ton' } as const);
        case 'tron':
            return Object.assign({}, TronVaultFromJSONTyped(json, true), { type: 'tron' } as const);
        case 'utxo':
            return Object.assign({}, UtxoVaultFromJSONTyped(json, true), { type: 'utxo' } as const);
        default:
            throw new Error(`No variant of Vault exists with 'type=${json['type']}'`);
    }
}

