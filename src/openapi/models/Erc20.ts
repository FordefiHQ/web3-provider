/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EvmAddress } from './EvmAddress';
import {
    EvmAddressFromJSON,
    EvmAddressFromJSONTyped,
    EvmAddressToJSON,
} from './EvmAddress';

/**
 * 
 * @export
 * @interface Erc20
 */
export interface Erc20 {
    /**
     * 
     * @type {EvmAddress}
     * @memberof Erc20
     */
    address: EvmAddress;
    /**
     * 
     * @type {string}
     * @memberof Erc20
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Erc20
     */
    symbol: string;
    /**
     * 
     * @type {string}
     * @memberof Erc20
     */
    type: Erc20TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Erc20
     */
    decimals: number;
    /**
     * 
     * @type {string}
     * @memberof Erc20
     */
    logoUrl?: string;
}


/**
 * @export
 */
export const Erc20TypeEnum = {
    erc20: 'erc20'
} as const;
export type Erc20TypeEnum = typeof Erc20TypeEnum[keyof typeof Erc20TypeEnum];


/**
 * Check if a given object implements the Erc20 interface.
 */
export function instanceOfErc20(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "decimals" in value;

    return isInstance;
}

export function Erc20FromJSON(json: any): Erc20 {
    return Erc20FromJSONTyped(json, false);
}

export function Erc20FromJSONTyped(json: any, ignoreDiscriminator: boolean): Erc20 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': EvmAddressFromJSON(json['address']),
        'name': json['name'],
        'symbol': json['symbol'],
        'type': json['type'],
        'decimals': json['decimals'],
        'logoUrl': !exists(json, 'logo_url') ? undefined : json['logo_url'],
    };
}

export function Erc20ToJSON(value?: Erc20 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': EvmAddressToJSON(value.address),
        'name': value.name,
        'symbol': value.symbol,
        'type': value.type,
        'decimals': value.decimals,
        'logo_url': value.logoUrl,
    };
}

