/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CosmosChainUniqueId } from './CosmosChainUniqueId';
import {
    CosmosChainUniqueIdFromJSON,
    CosmosChainUniqueIdFromJSONTyped,
    CosmosChainUniqueIdToJSON,
    CosmosChainUniqueIdToJSONTyped,
} from './CosmosChainUniqueId';
import type { TypedCosmosRawTransactionRequestRequestData } from './TypedCosmosRawTransactionRequestRequestData';
import {
    TypedCosmosRawTransactionRequestRequestDataFromJSON,
    TypedCosmosRawTransactionRequestRequestDataFromJSONTyped,
    TypedCosmosRawTransactionRequestRequestDataToJSON,
    TypedCosmosRawTransactionRequestRequestDataToJSONTyped,
} from './TypedCosmosRawTransactionRequestRequestData';
import type { PushMode } from './PushMode';
import {
    PushModeFromJSON,
    PushModeFromJSONTyped,
    PushModeToJSON,
    PushModeToJSONTyped,
} from './PushMode';

/**
 * 
 * @export
 * @interface TypedCosmosRawTransactionRequest
 */
export interface TypedCosmosRawTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof TypedCosmosRawTransactionRequest
     */
    type: TypedCosmosRawTransactionRequestTypeEnum;
    /**
     * 
     * @type {PushMode}
     * @memberof TypedCosmosRawTransactionRequest
     */
    pushMode?: PushMode;
    /**
     * 
     * @type {CosmosChainUniqueId}
     * @memberof TypedCosmosRawTransactionRequest
     */
    chain: CosmosChainUniqueId;
    /**
     * 
     * @type {TypedCosmosRawTransactionRequestRequestData}
     * @memberof TypedCosmosRawTransactionRequest
     */
    requestData: TypedCosmosRawTransactionRequestRequestData;
}


/**
 * @export
 */
export const TypedCosmosRawTransactionRequestTypeEnum = {
    cosmosRawTransaction: 'cosmos_raw_transaction'
} as const;
export type TypedCosmosRawTransactionRequestTypeEnum = typeof TypedCosmosRawTransactionRequestTypeEnum[keyof typeof TypedCosmosRawTransactionRequestTypeEnum];


/**
 * Check if a given object implements the TypedCosmosRawTransactionRequest interface.
 */
export function instanceOfTypedCosmosRawTransactionRequest(value: object): value is TypedCosmosRawTransactionRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('requestData' in value) || value['requestData'] === undefined) return false;
    return true;
}

export function TypedCosmosRawTransactionRequestFromJSON(json: any): TypedCosmosRawTransactionRequest {
    return TypedCosmosRawTransactionRequestFromJSONTyped(json, false);
}

export function TypedCosmosRawTransactionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedCosmosRawTransactionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'pushMode': json['push_mode'] == null ? undefined : PushModeFromJSON(json['push_mode']),
        'chain': CosmosChainUniqueIdFromJSON(json['chain']),
        'requestData': TypedCosmosRawTransactionRequestRequestDataFromJSON(json['request_data']),
    };
}

export function TypedCosmosRawTransactionRequestToJSON(json: any): TypedCosmosRawTransactionRequest {
    return TypedCosmosRawTransactionRequestToJSONTyped(json, false);
}

export function TypedCosmosRawTransactionRequestToJSONTyped(value?: TypedCosmosRawTransactionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'push_mode': PushModeToJSON(value['pushMode']),
        'chain': CosmosChainUniqueIdToJSON(value['chain']),
        'request_data': TypedCosmosRawTransactionRequestRequestDataToJSON(value['requestData']),
    };
}

