/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
} from './ApprovalRequest';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
    EnrichedEvmAddressFromJSONTyped,
    EnrichedEvmAddressToJSON,
} from './EnrichedEvmAddress';
import type { EnrichedEvmChain } from './EnrichedEvmChain';
import {
    EnrichedEvmChainFromJSON,
    EnrichedEvmChainFromJSONTyped,
    EnrichedEvmChainToJSON,
} from './EnrichedEvmChain';
import type { EvmGasEstimation } from './EvmGasEstimation';
import {
    EvmGasEstimationFromJSON,
    EvmGasEstimationFromJSONTyped,
    EvmGasEstimationToJSON,
} from './EvmGasEstimation';
import type { EvmSuggestedFees } from './EvmSuggestedFees';
import {
    EvmSuggestedFeesFromJSON,
    EvmSuggestedFeesFromJSONTyped,
    EvmSuggestedFeesToJSON,
} from './EvmSuggestedFees';
import type { EvmTransactionEvmTransactionTypeDetails } from './EvmTransactionEvmTransactionTypeDetails';
import {
    EvmTransactionEvmTransactionTypeDetailsFromJSON,
    EvmTransactionEvmTransactionTypeDetailsFromJSONTyped,
    EvmTransactionEvmTransactionTypeDetailsToJSON,
} from './EvmTransactionEvmTransactionTypeDetails';
import type { EvmTransactionParsedData } from './EvmTransactionParsedData';
import {
    EvmTransactionParsedDataFromJSON,
    EvmTransactionParsedDataFromJSONTyped,
    EvmTransactionParsedDataToJSON,
} from './EvmTransactionParsedData';
import type { EvmTransactionResult } from './EvmTransactionResult';
import {
    EvmTransactionResultFromJSON,
    EvmTransactionResultFromJSONTyped,
    EvmTransactionResultToJSON,
} from './EvmTransactionResult';
import type { PolicyMatch } from './PolicyMatch';
import {
    PolicyMatchFromJSON,
    PolicyMatchFromJSONTyped,
    PolicyMatchToJSON,
} from './PolicyMatch';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
} from './SimulationStatusResult';
import type { TransactionRisk } from './TransactionRisk';
import {
    TransactionRiskFromJSON,
    TransactionRiskFromJSONTyped,
    TransactionRiskToJSON,
} from './TransactionRisk';

/**
 * 
 * @export
 * @interface PredictedEvmTransaction
 */
export interface PredictedEvmTransaction {
    /**
     * 
     * @type {PolicyMatch}
     * @memberof PredictedEvmTransaction
     */
    policyMatch: PolicyMatch;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof PredictedEvmTransaction
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {Array<TransactionRisk>}
     * @memberof PredictedEvmTransaction
     */
    risks: Array<TransactionRisk>;
    /**
     * 
     * @type {string}
     * @memberof PredictedEvmTransaction
     */
    type: PredictedEvmTransactionTypeEnum;
    /**
     * 
     * @type {EvmTransactionResult}
     * @memberof PredictedEvmTransaction
     */
    expectedResult: EvmTransactionResult;
    /**
     * 
     * @type {EnrichedEvmChain}
     * @memberof PredictedEvmTransaction
     */
    chain: EnrichedEvmChain;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof PredictedEvmTransaction
     */
    simulationStatusResult: SimulationStatusResult;
    /**
     * 
     * @type {EvmTransactionEvmTransactionTypeDetails}
     * @memberof PredictedEvmTransaction
     */
    evmTransactionTypeDetails: EvmTransactionEvmTransactionTypeDetails;
    /**
     * 
     * @type {EvmTransactionParsedData}
     * @memberof PredictedEvmTransaction
     */
    parsedData: EvmTransactionParsedData;
    /**
     * 
     * @type {EvmGasEstimation}
     * @memberof PredictedEvmTransaction
     */
    gasEstimation?: EvmGasEstimation;
    /**
     * 
     * @type {EvmSuggestedFees}
     * @memberof PredictedEvmTransaction
     */
    suggestedFees: EvmSuggestedFees;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof PredictedEvmTransaction
     */
    sender: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof PredictedEvmTransaction
     */
    to: EnrichedEvmAddress;
    /**
     * 
     * @type {string}
     * @memberof PredictedEvmTransaction
     */
    hexData?: string;
}


/**
 * @export
 */
export const PredictedEvmTransactionTypeEnum = {
    evmTransaction: 'evm_transaction'
} as const;
export type PredictedEvmTransactionTypeEnum = typeof PredictedEvmTransactionTypeEnum[keyof typeof PredictedEvmTransactionTypeEnum];


/**
 * Check if a given object implements the PredictedEvmTransaction interface.
 */
export function instanceOfPredictedEvmTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "policyMatch" in value;
    isInstance = isInstance && "risks" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "expectedResult" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "simulationStatusResult" in value;
    isInstance = isInstance && "evmTransactionTypeDetails" in value;
    isInstance = isInstance && "parsedData" in value;
    isInstance = isInstance && "suggestedFees" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "to" in value;

    return isInstance;
}

export function PredictedEvmTransactionFromJSON(json: any): PredictedEvmTransaction {
    return PredictedEvmTransactionFromJSONTyped(json, false);
}

export function PredictedEvmTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PredictedEvmTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'policyMatch': PolicyMatchFromJSON(json['policy_match']),
        'approvalRequest': !exists(json, 'approval_request') ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'risks': ((json['risks'] as Array<any>).map(TransactionRiskFromJSON)),
        'type': json['type'],
        'expectedResult': EvmTransactionResultFromJSON(json['expected_result']),
        'chain': EnrichedEvmChainFromJSON(json['chain']),
        'simulationStatusResult': SimulationStatusResultFromJSON(json['simulation_status_result']),
        'evmTransactionTypeDetails': EvmTransactionEvmTransactionTypeDetailsFromJSON(json['evm_transaction_type_details']),
        'parsedData': EvmTransactionParsedDataFromJSON(json['parsed_data']),
        'gasEstimation': !exists(json, 'gas_estimation') ? undefined : EvmGasEstimationFromJSON(json['gas_estimation']),
        'suggestedFees': EvmSuggestedFeesFromJSON(json['suggested_fees']),
        'sender': EnrichedEvmAddressFromJSON(json['sender']),
        'to': EnrichedEvmAddressFromJSON(json['to']),
        'hexData': !exists(json, 'hex_data') ? undefined : json['hex_data'],
    };
}

export function PredictedEvmTransactionToJSON(value?: PredictedEvmTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'policy_match': PolicyMatchToJSON(value.policyMatch),
        'approval_request': ApprovalRequestToJSON(value.approvalRequest),
        'risks': ((value.risks as Array<any>).map(TransactionRiskToJSON)),
        'type': value.type,
        'expected_result': EvmTransactionResultToJSON(value.expectedResult),
        'chain': EnrichedEvmChainToJSON(value.chain),
        'simulation_status_result': SimulationStatusResultToJSON(value.simulationStatusResult),
        'evm_transaction_type_details': EvmTransactionEvmTransactionTypeDetailsToJSON(value.evmTransactionTypeDetails),
        'parsed_data': EvmTransactionParsedDataToJSON(value.parsedData),
        'gas_estimation': EvmGasEstimationToJSON(value.gasEstimation),
        'suggested_fees': EvmSuggestedFeesToJSON(value.suggestedFees),
        'sender': EnrichedEvmAddressToJSON(value.sender),
        'to': EnrichedEvmAddressToJSON(value.to),
        'hex_data': value.hexData,
    };
}

