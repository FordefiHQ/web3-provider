/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ApiSigner } from './ApiSigner';
import {
    instanceOfApiSigner,
    ApiSignerFromJSON,
    ApiSignerFromJSONTyped,
    ApiSignerToJSON,
} from './ApiSigner';
import type { ApiUser } from './ApiUser';
import {
    instanceOfApiUser,
    ApiUserFromJSON,
    ApiUserFromJSONTyped,
    ApiUserToJSON,
} from './ApiUser';
import type { Person } from './Person';
import {
    instanceOfPerson,
    PersonFromJSON,
    PersonFromJSONTyped,
    PersonToJSON,
} from './Person';
import type { SystemUser } from './SystemUser';
import {
    instanceOfSystemUser,
    SystemUserFromJSON,
    SystemUserFromJSONTyped,
    SystemUserToJSON,
} from './SystemUser';

/**
 * @type User
 * 
 * @export
 */
export type User = { userType: 'api_signer' } & ApiSigner | { userType: 'api_user' } & ApiUser | { userType: 'person' } & Person | { userType: 'system' } & SystemUser;

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    switch (json['user_type']) {
        case 'api_signer':
            return Object.assign({}, ApiSignerFromJSONTyped(json, true), { userType: 'api_signer' } as const);
        case 'api_user':
            return Object.assign({}, ApiUserFromJSONTyped(json, true), { userType: 'api_user' } as const);
        case 'person':
            return Object.assign({}, PersonFromJSONTyped(json, true), { userType: 'person' } as const);
        case 'system':
            return Object.assign({}, SystemUserFromJSONTyped(json, true), { userType: 'system' } as const);
        default:
            throw new Error(`No variant of User exists with 'userType=${json['userType']}'`);
    }
}

export function UserToJSON(json: any): any {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['userType']) {
        case 'api_signer':
            return Object.assign({}, ApiSignerToJSON(value), { userType: 'api_signer' } as const);
        case 'api_user':
            return Object.assign({}, ApiUserToJSON(value), { userType: 'api_user' } as const);
        case 'person':
            return Object.assign({}, PersonToJSON(value), { userType: 'person' } as const);
        case 'system':
            return Object.assign({}, SystemUserToJSON(value), { userType: 'system' } as const);
        default:
            throw new Error(`No variant of User exists with 'userType=${value['userType']}'`);
    }

}

