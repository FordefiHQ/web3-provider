/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
    KeyTypeToJSONTyped,
} from './KeyType';
import type { KeyOriginType } from './KeyOriginType';
import {
    KeyOriginTypeFromJSON,
    KeyOriginTypeFromJSONTyped,
    KeyOriginTypeToJSON,
    KeyOriginTypeToJSONTyped,
} from './KeyOriginType';

/**
 * 
 * @export
 * @interface EncryptedShare
 */
export interface EncryptedShare {
    /**
     * 
     * @type {string}
     * @memberof EncryptedShare
     */
    keyId: string;
    /**
     * 
     * @type {KeyType}
     * @memberof EncryptedShare
     */
    keyType: KeyType;
    /**
     * 
     * @type {KeyOriginType}
     * @memberof EncryptedShare
     */
    keyOriginType: KeyOriginType;
    /**
     * 
     * @type {string}
     * @memberof EncryptedShare
     */
    encryptedShare: string;
}



/**
 * Check if a given object implements the EncryptedShare interface.
 */
export function instanceOfEncryptedShare(value: object): value is EncryptedShare {
    if (!('keyId' in value) || value['keyId'] === undefined) return false;
    if (!('keyType' in value) || value['keyType'] === undefined) return false;
    if (!('keyOriginType' in value) || value['keyOriginType'] === undefined) return false;
    if (!('encryptedShare' in value) || value['encryptedShare'] === undefined) return false;
    return true;
}

export function EncryptedShareFromJSON(json: any): EncryptedShare {
    return EncryptedShareFromJSONTyped(json, false);
}

export function EncryptedShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncryptedShare {
    if (json == null) {
        return json;
    }
    return {
        
        'keyId': json['key_id'],
        'keyType': KeyTypeFromJSON(json['key_type']),
        'keyOriginType': KeyOriginTypeFromJSON(json['key_origin_type']),
        'encryptedShare': json['encrypted_share'],
    };
}

export function EncryptedShareToJSON(json: any): EncryptedShare {
    return EncryptedShareToJSONTyped(json, false);
}

export function EncryptedShareToJSONTyped(value?: EncryptedShare | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key_id': value['keyId'],
        'key_type': KeyTypeToJSON(value['keyType']),
        'key_origin_type': KeyOriginTypeToJSON(value['keyOriginType']),
        'encrypted_share': value['encryptedShare'],
    };
}

