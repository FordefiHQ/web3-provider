/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockchainExplorer } from './BlockchainExplorer';
import {
    BlockchainExplorerFromJSON,
    BlockchainExplorerFromJSONTyped,
    BlockchainExplorerToJSON,
} from './BlockchainExplorer';
import type { EvmChainId } from './EvmChainId';
import {
    EvmChainIdFromJSON,
    EvmChainIdFromJSONTyped,
    EvmChainIdToJSON,
} from './EvmChainId';
import type { EvmChainName } from './EvmChainName';
import {
    EvmChainNameFromJSON,
    EvmChainNameFromJSONTyped,
    EvmChainNameToJSON,
} from './EvmChainName';
import type { EvmChainUniqueId } from './EvmChainUniqueId';
import {
    EvmChainUniqueIdFromJSON,
    EvmChainUniqueIdFromJSONTyped,
    EvmChainUniqueIdToJSON,
} from './EvmChainUniqueId';
import type { GasType } from './GasType';
import {
    GasTypeFromJSON,
    GasTypeFromJSONTyped,
    GasTypeToJSON,
} from './GasType';

/**
 * 
 * @export
 * @interface EnrichedEvmChain
 */
export interface EnrichedEvmChain {
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    chainType: EnrichedEvmChainChainTypeEnum;
    /**
     * 
     * @type {EvmChainName}
     * @memberof EnrichedEvmChain
     */
    namedChainId: EvmChainName;
    /**
     * 
     * @type {EvmChainId}
     * @memberof EnrichedEvmChain
     */
    chainId: EvmChainId;
    /**
     * 
     * @type {EvmChainUniqueId}
     * @memberof EnrichedEvmChain
     */
    uniqueId: EvmChainUniqueId;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    nativeCurrencySymbol: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    nativeCurrencyName: string;
    /**
     * 
     * @type {BlockchainExplorer}
     * @memberof EnrichedEvmChain
     */
    blockchainExplorer: BlockchainExplorer;
    /**
     * 
     * @type {GasType}
     * @memberof EnrichedEvmChain
     */
    gasType: GasType;
    /**
     * 
     * @type {boolean}
     * @memberof EnrichedEvmChain
     */
    supportsSecureNode?: boolean;
}


/**
 * @export
 */
export const EnrichedEvmChainChainTypeEnum = {
    evm: 'evm'
} as const;
export type EnrichedEvmChainChainTypeEnum = typeof EnrichedEvmChainChainTypeEnum[keyof typeof EnrichedEvmChainChainTypeEnum];


/**
 * Check if a given object implements the EnrichedEvmChain interface.
 */
export function instanceOfEnrichedEvmChain(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "chainType" in value;
    isInstance = isInstance && "namedChainId" in value;
    isInstance = isInstance && "chainId" in value;
    isInstance = isInstance && "uniqueId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "nativeCurrencySymbol" in value;
    isInstance = isInstance && "nativeCurrencyName" in value;
    isInstance = isInstance && "blockchainExplorer" in value;
    isInstance = isInstance && "gasType" in value;

    return isInstance;
}

export function EnrichedEvmChainFromJSON(json: any): EnrichedEvmChain {
    return EnrichedEvmChainFromJSONTyped(json, false);
}

export function EnrichedEvmChainFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnrichedEvmChain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chainType': json['chain_type'],
        'namedChainId': EvmChainNameFromJSON(json['named_chain_id']),
        'chainId': EvmChainIdFromJSON(json['chain_id']),
        'uniqueId': EvmChainUniqueIdFromJSON(json['unique_id']),
        'name': json['name'],
        'nativeCurrencySymbol': json['native_currency_symbol'],
        'nativeCurrencyName': json['native_currency_name'],
        'blockchainExplorer': BlockchainExplorerFromJSON(json['blockchain_explorer']),
        'gasType': GasTypeFromJSON(json['gas_type']),
        'supportsSecureNode': !exists(json, 'supports_secure_node') ? undefined : json['supports_secure_node'],
    };
}

export function EnrichedEvmChainToJSON(value?: EnrichedEvmChain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chain_type': value.chainType,
        'named_chain_id': EvmChainNameToJSON(value.namedChainId),
        'chain_id': EvmChainIdToJSON(value.chainId),
        'unique_id': EvmChainUniqueIdToJSON(value.uniqueId),
        'name': value.name,
        'native_currency_symbol': value.nativeCurrencySymbol,
        'native_currency_name': value.nativeCurrencyName,
        'blockchain_explorer': BlockchainExplorerToJSON(value.blockchainExplorer),
        'gas_type': GasTypeToJSON(value.gasType),
        'supports_secure_node': value.supportsSecureNode,
    };
}

