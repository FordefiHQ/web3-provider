/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChainSource } from './ChainSource';
import {
    ChainSourceFromJSON,
    ChainSourceFromJSONTyped,
    ChainSourceToJSON,
    ChainSourceToJSONTyped,
} from './ChainSource';
import type { BlockchainExplorer } from './BlockchainExplorer';
import {
    BlockchainExplorerFromJSON,
    BlockchainExplorerFromJSONTyped,
    BlockchainExplorerToJSON,
    BlockchainExplorerToJSONTyped,
} from './BlockchainExplorer';
import type { GasType } from './GasType';
import {
    GasTypeFromJSON,
    GasTypeFromJSONTyped,
    GasTypeToJSON,
    GasTypeToJSONTyped,
} from './GasType';

/**
 * 
 * @export
 * @interface EnrichedEvmChain
 */
export interface EnrichedEvmChain {
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    chainType: EnrichedEvmChainChainTypeEnum;
    /**
     * The EVM chain name can be either one of those supported by the default chains below or a custom chain name if one was added to your organization. <ul><li>`arbitrum_mainnet`</li><li>`arbitrum_sepolia`</li><li>`avalanche_chain`</li><li>`base_mainnet`</li><li>`berachain_mainnet`</li><li>`blast_mainnet`</li><li>`bsc_mainnet`</li><li>`canto_mainnet`</li><li>`clink_mainnet`</li><li>`clink_testnet`</li><li>`conflux_mainnet`</li><li>`dymension_mainnet`</li><li>`ethereum_goerli`</li><li>`ethereum_holesky`</li><li>`ethereum_mainnet`</li><li>`ethereum_sepolia`</li><li>`fantom_mainnet`</li><li>`flare_mainnet`</li><li>`flare_testnet`</li><li>`gnosis_mainnet`</li><li>`kava_mainnet`</li><li>`linea_mainnet`</li><li>`optimism_mainnet`</li><li>`manta_pacific_mainnet`</li><li>`mantle_mainnet`</li><li>`merlin_mainnet`</li><li>`polygon_mainnet`</li><li>`polygon_mumbai`</li><li>`polygon_zkevm_mainnet`</li><li>`reya_mainnet`</li><li>`scroll_mainnet`</li><li>`sei_mainnet`</li><li>`sonic_mainnet`</li><li>`xai_mainnet`</li><li>`zeta_mainnet`</li><li>`zklink_nova_mainnet`</li><li>`zksync_era_mainnet`</li></ul>
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    namedChainId?: string;
    /**
     * 
     * @type {number}
     * @memberof EnrichedEvmChain
     */
    chainId: number;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    uniqueId: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    nativeCurrencySymbol: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    nativeCurrencyName: string;
    /**
     * 
     * @type {BlockchainExplorer}
     * @memberof EnrichedEvmChain
     */
    blockchainExplorer?: BlockchainExplorer;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    logoUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnrichedEvmChain
     */
    isTestnet: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EnrichedEvmChain
     */
    isEnabled: boolean;
    /**
     * 
     * @type {GasType}
     * @memberof EnrichedEvmChain
     */
    gasType: GasType;
    /**
     * 
     * @type {boolean}
     * @memberof EnrichedEvmChain
     */
    supportsSecureNode?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnrichedEvmChain
     */
    rpcUrl?: string;
    /**
     * 
     * @type {ChainSource}
     * @memberof EnrichedEvmChain
     */
    source: ChainSource;
}


/**
 * @export
 */
export const EnrichedEvmChainChainTypeEnum = {
    evm: 'evm'
} as const;
export type EnrichedEvmChainChainTypeEnum = typeof EnrichedEvmChainChainTypeEnum[keyof typeof EnrichedEvmChainChainTypeEnum];


/**
 * Check if a given object implements the EnrichedEvmChain interface.
 */
export function instanceOfEnrichedEvmChain(value: object): value is EnrichedEvmChain {
    if (!('chainType' in value) || value['chainType'] === undefined) return false;
    if (!('chainId' in value) || value['chainId'] === undefined) return false;
    if (!('uniqueId' in value) || value['uniqueId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nativeCurrencySymbol' in value) || value['nativeCurrencySymbol'] === undefined) return false;
    if (!('nativeCurrencyName' in value) || value['nativeCurrencyName'] === undefined) return false;
    if (!('logoUrl' in value) || value['logoUrl'] === undefined) return false;
    if (!('isTestnet' in value) || value['isTestnet'] === undefined) return false;
    if (!('isEnabled' in value) || value['isEnabled'] === undefined) return false;
    if (!('gasType' in value) || value['gasType'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    return true;
}

export function EnrichedEvmChainFromJSON(json: any): EnrichedEvmChain {
    return EnrichedEvmChainFromJSONTyped(json, false);
}

export function EnrichedEvmChainFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnrichedEvmChain {
    if (json == null) {
        return json;
    }
    return {
        
        'chainType': json['chain_type'],
        'namedChainId': json['named_chain_id'] == null ? undefined : json['named_chain_id'],
        'chainId': json['chain_id'],
        'uniqueId': json['unique_id'],
        'name': json['name'],
        'nativeCurrencySymbol': json['native_currency_symbol'],
        'nativeCurrencyName': json['native_currency_name'],
        'blockchainExplorer': json['blockchain_explorer'] == null ? undefined : BlockchainExplorerFromJSON(json['blockchain_explorer']),
        'logoUrl': json['logo_url'],
        'isTestnet': json['is_testnet'],
        'isEnabled': json['is_enabled'],
        'gasType': GasTypeFromJSON(json['gas_type']),
        'supportsSecureNode': json['supports_secure_node'] == null ? undefined : json['supports_secure_node'],
        'rpcUrl': json['rpc_url'] == null ? undefined : json['rpc_url'],
        'source': ChainSourceFromJSON(json['source']),
    };
}

export function EnrichedEvmChainToJSON(json: any): EnrichedEvmChain {
    return EnrichedEvmChainToJSONTyped(json, false);
}

export function EnrichedEvmChainToJSONTyped(value?: EnrichedEvmChain | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chain_type': value['chainType'],
        'named_chain_id': value['namedChainId'],
        'chain_id': value['chainId'],
        'unique_id': value['uniqueId'],
        'name': value['name'],
        'native_currency_symbol': value['nativeCurrencySymbol'],
        'native_currency_name': value['nativeCurrencyName'],
        'blockchain_explorer': BlockchainExplorerToJSON(value['blockchainExplorer']),
        'logo_url': value['logoUrl'],
        'is_testnet': value['isTestnet'],
        'is_enabled': value['isEnabled'],
        'gas_type': GasTypeToJSON(value['gasType']),
        'supports_secure_node': value['supportsSecureNode'],
        'rpc_url': value['rpcUrl'],
        'source': ChainSourceToJSON(value['source']),
    };
}

