/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    StarknetErc20AssetIdentifierRequest,
    instanceOfStarknetErc20AssetIdentifierRequest,
    StarknetErc20AssetIdentifierRequestFromJSON,
    StarknetErc20AssetIdentifierRequestFromJSONTyped,
    StarknetErc20AssetIdentifierRequestToJSON,
} from './StarknetErc20AssetIdentifierRequest';
import {
    StarknetNativeAssetIdentifierRequest,
    instanceOfStarknetNativeAssetIdentifierRequest,
    StarknetNativeAssetIdentifierRequestFromJSON,
    StarknetNativeAssetIdentifierRequestFromJSONTyped,
    StarknetNativeAssetIdentifierRequestToJSON,
} from './StarknetNativeAssetIdentifierRequest';

/**
 * @type StarknetAssetIdentifierDetails
 * 
 * @export
 */
export type StarknetAssetIdentifierDetails = { type: 'erc20' } & StarknetErc20AssetIdentifierRequest | { type: 'native' } & StarknetNativeAssetIdentifierRequest;

export function StarknetAssetIdentifierDetailsFromJSON(json: any): StarknetAssetIdentifierDetails {
    return StarknetAssetIdentifierDetailsFromJSONTyped(json, false);
}

export function StarknetAssetIdentifierDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StarknetAssetIdentifierDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'erc20':
            return {...StarknetErc20AssetIdentifierRequestFromJSONTyped(json, true), type: 'erc20'};
        case 'native':
            return {...StarknetNativeAssetIdentifierRequestFromJSONTyped(json, true), type: 'native'};
        default:
            throw new Error(`No variant of StarknetAssetIdentifierDetails exists with 'type=${json['type']}'`);
    }
}

export function StarknetAssetIdentifierDetailsToJSON(value?: StarknetAssetIdentifierDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'erc20':
            return StarknetErc20AssetIdentifierRequestToJSON(value);
        case 'native':
            return StarknetNativeAssetIdentifierRequestToJSON(value);
        default:
            throw new Error(`No variant of StarknetAssetIdentifierDetails exists with 'type=${value['type']}'`);
    }

}

