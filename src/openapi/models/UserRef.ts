/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ApiSignerRef } from './ApiSignerRef';
import {
    instanceOfApiSignerRef,
    ApiSignerRefFromJSON,
    ApiSignerRefFromJSONTyped,
    ApiSignerRefToJSON,
} from './ApiSignerRef';
import type { ApiUserRef } from './ApiUserRef';
import {
    instanceOfApiUserRef,
    ApiUserRefFromJSON,
    ApiUserRefFromJSONTyped,
    ApiUserRefToJSON,
} from './ApiUserRef';
import type { EndUserRef } from './EndUserRef';
import {
    instanceOfEndUserRef,
    EndUserRefFromJSON,
    EndUserRefFromJSONTyped,
    EndUserRefToJSON,
} from './EndUserRef';
import type { PersonRef } from './PersonRef';
import {
    instanceOfPersonRef,
    PersonRefFromJSON,
    PersonRefFromJSONTyped,
    PersonRefToJSON,
} from './PersonRef';
import type { SystemUserRef } from './SystemUserRef';
import {
    instanceOfSystemUserRef,
    SystemUserRefFromJSON,
    SystemUserRefFromJSONTyped,
    SystemUserRefToJSON,
} from './SystemUserRef';

/**
 * @type UserRef
 * 
 * @export
 */
export type UserRef = { userType: 'api_signer' } & ApiSignerRef | { userType: 'api_user' } & ApiUserRef | { userType: 'end_user' } & EndUserRef | { userType: 'person' } & PersonRef | { userType: 'system' } & SystemUserRef;

export function UserRefFromJSON(json: any): UserRef {
    return UserRefFromJSONTyped(json, false);
}

export function UserRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRef {
    if (json == null) {
        return json;
    }
    switch (json['user_type']) {
        case 'api_signer':
            return Object.assign({}, ApiSignerRefFromJSONTyped(json, true), { userType: 'api_signer' } as const);
        case 'api_user':
            return Object.assign({}, ApiUserRefFromJSONTyped(json, true), { userType: 'api_user' } as const);
        case 'end_user':
            return Object.assign({}, EndUserRefFromJSONTyped(json, true), { userType: 'end_user' } as const);
        case 'person':
            return Object.assign({}, PersonRefFromJSONTyped(json, true), { userType: 'person' } as const);
        case 'system':
            return Object.assign({}, SystemUserRefFromJSONTyped(json, true), { userType: 'system' } as const);
        default:
            throw new Error(`No variant of UserRef exists with 'userType=${json['userType']}'`);
    }
}

export function UserRefToJSON(json: any): any {
    return UserRefToJSONTyped(json, false);
}

export function UserRefToJSONTyped(value?: UserRef | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['userType']) {
        case 'api_signer':
            return Object.assign({}, ApiSignerRefToJSON(value), { userType: 'api_signer' } as const);
        case 'api_user':
            return Object.assign({}, ApiUserRefToJSON(value), { userType: 'api_user' } as const);
        case 'end_user':
            return Object.assign({}, EndUserRefToJSON(value), { userType: 'end_user' } as const);
        case 'person':
            return Object.assign({}, PersonRefToJSON(value), { userType: 'person' } as const);
        case 'system':
            return Object.assign({}, SystemUserRefToJSON(value), { userType: 'system' } as const);
        default:
            throw new Error(`No variant of UserRef exists with 'userType=${value['userType']}'`);
    }

}

