/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
    KeyTypeToJSONTyped,
} from './KeyType';
import type { MpcMessage } from './MpcMessage';
import {
    MpcMessageFromJSON,
    MpcMessageFromJSONTyped,
    MpcMessageToJSON,
    MpcMessageToJSONTyped,
} from './MpcMessage';

/**
 * 
 * @export
 * @interface RegisterMpcSetupSessionRequest
 */
export interface RegisterMpcSetupSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterMpcSetupSessionRequest
     */
    keyId?: string;
    /**
     * 
     * @type {KeyType}
     * @memberof RegisterMpcSetupSessionRequest
     */
    keyType: KeyType;
    /**
     * 
     * @type {string}
     * @memberof RegisterMpcSetupSessionRequest
     */
    keysetId?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMpcSetupSessionRequest
     */
    protocolVersion: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMpcSetupSessionRequest
     */
    signature?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMpcSetupSessionRequest
     */
    sessionSeed: string;
    /**
     * 
     * @type {MpcMessage}
     * @memberof RegisterMpcSetupSessionRequest
     */
    firstMpcProtocolMessage: MpcMessage;
}



/**
 * Check if a given object implements the RegisterMpcSetupSessionRequest interface.
 */
export function instanceOfRegisterMpcSetupSessionRequest(value: object): value is RegisterMpcSetupSessionRequest {
    if (!('keyType' in value) || value['keyType'] === undefined) return false;
    if (!('protocolVersion' in value) || value['protocolVersion'] === undefined) return false;
    if (!('sessionSeed' in value) || value['sessionSeed'] === undefined) return false;
    if (!('firstMpcProtocolMessage' in value) || value['firstMpcProtocolMessage'] === undefined) return false;
    return true;
}

export function RegisterMpcSetupSessionRequestFromJSON(json: any): RegisterMpcSetupSessionRequest {
    return RegisterMpcSetupSessionRequestFromJSONTyped(json, false);
}

export function RegisterMpcSetupSessionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterMpcSetupSessionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'keyId': json['key_id'] == null ? undefined : json['key_id'],
        'keyType': KeyTypeFromJSON(json['key_type']),
        'keysetId': json['keyset_id'] == null ? undefined : json['keyset_id'],
        'protocolVersion': json['protocol_version'],
        'signature': json['signature'] == null ? undefined : json['signature'],
        'sessionSeed': json['session_seed'],
        'firstMpcProtocolMessage': MpcMessageFromJSON(json['first_mpc_protocol_message']),
    };
}

export function RegisterMpcSetupSessionRequestToJSON(json: any): RegisterMpcSetupSessionRequest {
    return RegisterMpcSetupSessionRequestToJSONTyped(json, false);
}

export function RegisterMpcSetupSessionRequestToJSONTyped(value?: RegisterMpcSetupSessionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key_id': value['keyId'],
        'key_type': KeyTypeToJSON(value['keyType']),
        'keyset_id': value['keysetId'],
        'protocol_version': value['protocolVersion'],
        'signature': value['signature'],
        'session_seed': value['sessionSeed'],
        'first_mpc_protocol_message': MpcMessageToJSON(value['firstMpcProtocolMessage']),
    };
}

