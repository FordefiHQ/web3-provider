/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExchangeTransactionState } from './ExchangeTransactionState';
import {
    ExchangeTransactionStateFromJSON,
    ExchangeTransactionStateFromJSONTyped,
    ExchangeTransactionStateToJSON,
    ExchangeTransactionStateToJSONTyped,
} from './ExchangeTransactionState';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
    ManagedTransactionDataToJSONTyped,
} from './ManagedTransactionData';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { ExchangeTransactionStateChange } from './ExchangeTransactionStateChange';
import {
    ExchangeTransactionStateChangeFromJSON,
    ExchangeTransactionStateChangeFromJSONTyped,
    ExchangeTransactionStateChangeToJSON,
    ExchangeTransactionStateChangeToJSONTyped,
} from './ExchangeTransactionStateChange';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
    SignatureToJSONTyped,
} from './Signature';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
    SimulationStatusResultToJSONTyped,
} from './SimulationStatusResult';
import type { ExchangeTransactionExchangeTransactionTypeDetails } from './ExchangeTransactionExchangeTransactionTypeDetails';
import {
    ExchangeTransactionExchangeTransactionTypeDetailsFromJSON,
    ExchangeTransactionExchangeTransactionTypeDetailsFromJSONTyped,
    ExchangeTransactionExchangeTransactionTypeDetailsToJSON,
    ExchangeTransactionExchangeTransactionTypeDetailsToJSONTyped,
} from './ExchangeTransactionExchangeTransactionTypeDetails';
import type { ExchangeTransactionResult } from './ExchangeTransactionResult';
import {
    ExchangeTransactionResultFromJSON,
    ExchangeTransactionResultFromJSONTyped,
    ExchangeTransactionResultToJSON,
    ExchangeTransactionResultToJSONTyped,
} from './ExchangeTransactionResult';

/**
 * 
 * @export
 * @interface ExchangeTransaction
 */
export interface ExchangeTransaction {
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ExchangeTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ExchangeTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof ExchangeTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof ExchangeTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof ExchangeTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof ExchangeTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof ExchangeTransaction
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {ExchangeTransactionState}
     * @memberof ExchangeTransaction
     */
    state: ExchangeTransactionState;
    /**
     * 
     * @type {Array<ExchangeTransactionStateChange>}
     * @memberof ExchangeTransaction
     */
    stateChanges: Array<ExchangeTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     */
    type: ExchangeTransactionTypeEnum;
    /**
     * 
     * @type {ExchangeTransactionExchangeTransactionTypeDetails}
     * @memberof ExchangeTransaction
     */
    exchangeTransactionTypeDetails: ExchangeTransactionExchangeTransactionTypeDetails;
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     */
    exchangeNonce?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     */
    exchangeTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     * @deprecated
     */
    hash?: string;
    /**
     * 
     * @type {ExchangeTransactionResult}
     * @memberof ExchangeTransaction
     */
    expectedResult?: ExchangeTransactionResult;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof ExchangeTransaction
     */
    simulationStatusResult: SimulationStatusResult;
    /**
     * 
     * @type {ExchangeTransactionResult}
     * @memberof ExchangeTransaction
     */
    minedResult?: ExchangeTransactionResult;
    /**
     * 
     * @type {string}
     * @memberof ExchangeTransaction
     * @deprecated
     */
    explorerUrl?: string;
}


/**
 * @export
 */
export const ExchangeTransactionTypeEnum = {
    exchangeTransaction: 'exchange_transaction'
} as const;
export type ExchangeTransactionTypeEnum = typeof ExchangeTransactionTypeEnum[keyof typeof ExchangeTransactionTypeEnum];


/**
 * Check if a given object implements the ExchangeTransaction interface.
 */
export function instanceOfExchangeTransaction(value: object): value is ExchangeTransaction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('signatures' in value) || value['signatures'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChanges' in value) || value['stateChanges'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('exchangeTransactionTypeDetails' in value) || value['exchangeTransactionTypeDetails'] === undefined) return false;
    if (!('simulationStatusResult' in value) || value['simulationStatusResult'] === undefined) return false;
    return true;
}

export function ExchangeTransactionFromJSON(json: any): ExchangeTransaction {
    return ExchangeTransactionFromJSONTyped(json, false);
}

export function ExchangeTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': ExchangeTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(ExchangeTransactionStateChangeFromJSON)),
        'type': json['type'],
        'exchangeTransactionTypeDetails': ExchangeTransactionExchangeTransactionTypeDetailsFromJSON(json['exchange_transaction_type_details']),
        'exchangeNonce': json['exchange_nonce'] == null ? undefined : json['exchange_nonce'],
        'exchangeTransactionId': json['exchange_transaction_id'] == null ? undefined : json['exchange_transaction_id'],
        'hash': json['hash'] == null ? undefined : json['hash'],
        'expectedResult': json['expected_result'] == null ? undefined : ExchangeTransactionResultFromJSON(json['expected_result']),
        'simulationStatusResult': SimulationStatusResultFromJSON(json['simulation_status_result']),
        'minedResult': json['mined_result'] == null ? undefined : ExchangeTransactionResultFromJSON(json['mined_result']),
        'explorerUrl': json['explorer_url'] == null ? undefined : json['explorer_url'],
    };
}

export function ExchangeTransactionToJSON(json: any): ExchangeTransaction {
    return ExchangeTransactionToJSONTyped(json, false);
}

export function ExchangeTransactionToJSONTyped(value?: ExchangeTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value['managedTransactionData']),
        'signatures': ((value['signatures'] as Array<any>).map(SignatureToJSON)),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'direction': TransactionDirectionToJSON(value['direction']),
        'signed_externally': value['signedExternally'],
        'state': ExchangeTransactionStateToJSON(value['state']),
        'state_changes': ((value['stateChanges'] as Array<any>).map(ExchangeTransactionStateChangeToJSON)),
        'type': value['type'],
        'exchange_transaction_type_details': ExchangeTransactionExchangeTransactionTypeDetailsToJSON(value['exchangeTransactionTypeDetails']),
        'exchange_nonce': value['exchangeNonce'],
        'exchange_transaction_id': value['exchangeTransactionId'],
        'hash': value['hash'],
        'expected_result': ExchangeTransactionResultToJSON(value['expectedResult']),
        'simulation_status_result': SimulationStatusResultToJSON(value['simulationStatusResult']),
        'mined_result': ExchangeTransactionResultToJSON(value['minedResult']),
        'explorer_url': value['explorerUrl'],
    };
}

