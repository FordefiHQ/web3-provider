/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AminoMessagesList } from './AminoMessagesList';
import {
    AminoMessagesListFromJSON,
    AminoMessagesListFromJSONTyped,
    AminoMessagesListToJSON,
} from './AminoMessagesList';
import type { EnrichedCosmosChain } from './EnrichedCosmosChain';
import {
    EnrichedCosmosChainFromJSON,
    EnrichedCosmosChainFromJSONTyped,
    EnrichedCosmosChainToJSON,
} from './EnrichedCosmosChain';
import type { StdFee } from './StdFee';
import {
    StdFeeFromJSON,
    StdFeeFromJSONTyped,
    StdFeeToJSON,
} from './StdFee';

/**
 * 
 * @export
 * @interface StdSignDoc
 */
export interface StdSignDoc {
    /**
     * 
     * @type {EnrichedCosmosChain}
     * @memberof StdSignDoc
     */
    chain: EnrichedCosmosChain;
    /**
     * 
     * @type {string}
     * @memberof StdSignDoc
     */
    accountNumber: string;
    /**
     * 
     * @type {string}
     * @memberof StdSignDoc
     */
    sequence: string;
    /**
     * 
     * @type {string}
     * @memberof StdSignDoc
     */
    timeoutHeight?: string;
    /**
     * 
     * @type {StdFee}
     * @memberof StdSignDoc
     */
    fee: StdFee;
    /**
     * 
     * @type {AminoMessagesList}
     * @memberof StdSignDoc
     */
    messages: AminoMessagesList;
    /**
     * 
     * @type {string}
     * @memberof StdSignDoc
     */
    memo: string;
}

/**
 * Check if a given object implements the StdSignDoc interface.
 */
export function instanceOfStdSignDoc(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "accountNumber" in value;
    isInstance = isInstance && "sequence" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "messages" in value;
    isInstance = isInstance && "memo" in value;

    return isInstance;
}

export function StdSignDocFromJSON(json: any): StdSignDoc {
    return StdSignDocFromJSONTyped(json, false);
}

export function StdSignDocFromJSONTyped(json: any, ignoreDiscriminator: boolean): StdSignDoc {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chain': EnrichedCosmosChainFromJSON(json['chain']),
        'accountNumber': json['account_number'],
        'sequence': json['sequence'],
        'timeoutHeight': !exists(json, 'timeout_height') ? undefined : json['timeout_height'],
        'fee': StdFeeFromJSON(json['fee']),
        'messages': AminoMessagesListFromJSON(json['messages']),
        'memo': json['memo'],
    };
}

export function StdSignDocToJSON(value?: StdSignDoc | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chain': EnrichedCosmosChainToJSON(value.chain),
        'account_number': value.accountNumber,
        'sequence': value.sequence,
        'timeout_height': value.timeoutHeight,
        'fee': StdFeeToJSON(value.fee),
        'messages': AminoMessagesListToJSON(value.messages),
        'memo': value.memo,
    };
}

