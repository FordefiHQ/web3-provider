/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebhookTransactionStatusChangeEventEvent } from './WebhookTransactionStatusChangeEventEvent';
import {
    WebhookTransactionStatusChangeEventEventFromJSON,
    WebhookTransactionStatusChangeEventEventFromJSONTyped,
    WebhookTransactionStatusChangeEventEventToJSON,
    WebhookTransactionStatusChangeEventEventToJSONTyped,
} from './WebhookTransactionStatusChangeEventEvent';

/**
 * 
 * @export
 * @interface WebhookTransactionStatusChangeEvent
 */
export interface WebhookTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    webhookId: string;
    /**
     * 
     * @type {Date}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    eventId: string;
    /**
     * 
     * @type {number}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    attempt: number;
    /**
     * 
     * @type {Date}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    sentAt: Date;
    /**
     * 
     * @type {WebhookTransactionStatusChangeEventEvent}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    event: WebhookTransactionStatusChangeEventEvent;
    /**
     * 
     * @type {string}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    eventType: WebhookTransactionStatusChangeEventEventTypeEnum;
}


/**
 * @export
 */
export const WebhookTransactionStatusChangeEventEventTypeEnum = {
    transactionStateUpdate: 'transaction_state_update'
} as const;
export type WebhookTransactionStatusChangeEventEventTypeEnum = typeof WebhookTransactionStatusChangeEventEventTypeEnum[keyof typeof WebhookTransactionStatusChangeEventEventTypeEnum];


/**
 * Check if a given object implements the WebhookTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookTransactionStatusChangeEvent(value: object): value is WebhookTransactionStatusChangeEvent {
    if (!('webhookId' in value) || value['webhookId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('attempt' in value) || value['attempt'] === undefined) return false;
    if (!('sentAt' in value) || value['sentAt'] === undefined) return false;
    if (!('event' in value) || value['event'] === undefined) return false;
    if (!('eventType' in value) || value['eventType'] === undefined) return false;
    return true;
}

export function WebhookTransactionStatusChangeEventFromJSON(json: any): WebhookTransactionStatusChangeEvent {
    return WebhookTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookTransactionStatusChangeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'webhookId': json['webhook_id'],
        'createdAt': (new Date(json['created_at'])),
        'eventId': json['event_id'],
        'attempt': json['attempt'],
        'sentAt': (new Date(json['sent_at'])),
        'event': WebhookTransactionStatusChangeEventEventFromJSON(json['event']),
        'eventType': json['event_type'],
    };
}

export function WebhookTransactionStatusChangeEventToJSON(json: any): WebhookTransactionStatusChangeEvent {
    return WebhookTransactionStatusChangeEventToJSONTyped(json, false);
}

export function WebhookTransactionStatusChangeEventToJSONTyped(value?: WebhookTransactionStatusChangeEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'webhook_id': value['webhookId'],
        'created_at': ((value['createdAt']).toISOString()),
        'event_id': value['eventId'],
        'attempt': value['attempt'],
        'sent_at': ((value['sentAt']).toISOString()),
        'event': WebhookTransactionStatusChangeEventEventToJSON(value['event']),
        'event_type': value['eventType'],
    };
}

