/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WebhookTransactionStatusChangeEventEvent } from './WebhookTransactionStatusChangeEventEvent';
import {
    WebhookTransactionStatusChangeEventEventFromJSON,
    WebhookTransactionStatusChangeEventEventFromJSONTyped,
    WebhookTransactionStatusChangeEventEventToJSON,
} from './WebhookTransactionStatusChangeEventEvent';

/**
 * 
 * @export
 * @interface WebhookTransactionStatusChangeEvent
 */
export interface WebhookTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    webhookId: string;
    /**
     * 
     * @type {Date}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    eventId: string;
    /**
     * 
     * @type {number}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    attempt: number;
    /**
     * 
     * @type {Date}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    sentAt: Date;
    /**
     * 
     * @type {WebhookTransactionStatusChangeEventEvent}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    event: WebhookTransactionStatusChangeEventEvent;
    /**
     * 
     * @type {string}
     * @memberof WebhookTransactionStatusChangeEvent
     */
    eventType: WebhookTransactionStatusChangeEventEventTypeEnum;
}


/**
 * @export
 */
export const WebhookTransactionStatusChangeEventEventTypeEnum = {
    transactionStateUpdate: 'transaction_state_update'
} as const;
export type WebhookTransactionStatusChangeEventEventTypeEnum = typeof WebhookTransactionStatusChangeEventEventTypeEnum[keyof typeof WebhookTransactionStatusChangeEventEventTypeEnum];


/**
 * Check if a given object implements the WebhookTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookTransactionStatusChangeEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "webhookId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "eventId" in value;
    isInstance = isInstance && "attempt" in value;
    isInstance = isInstance && "sentAt" in value;
    isInstance = isInstance && "event" in value;
    isInstance = isInstance && "eventType" in value;

    return isInstance;
}

export function WebhookTransactionStatusChangeEventFromJSON(json: any): WebhookTransactionStatusChangeEvent {
    return WebhookTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookTransactionStatusChangeEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'webhookId': json['webhook_id'],
        'createdAt': (new Date(json['created_at'])),
        'eventId': json['event_id'],
        'attempt': json['attempt'],
        'sentAt': (new Date(json['sent_at'])),
        'event': WebhookTransactionStatusChangeEventEventFromJSON(json['event']),
        'eventType': json['event_type'],
    };
}

export function WebhookTransactionStatusChangeEventToJSON(value?: WebhookTransactionStatusChangeEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'webhook_id': value.webhookId,
        'created_at': (value.createdAt.toISOString()),
        'event_id': value.eventId,
        'attempt': value.attempt,
        'sent_at': (value.sentAt.toISOString()),
        'event': WebhookTransactionStatusChangeEventEventToJSON(value.event),
        'event_type': value.eventType,
    };
}

