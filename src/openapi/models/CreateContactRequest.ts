/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CreateAptosContactRequest } from './CreateAptosContactRequest';
import {
    instanceOfCreateAptosContactRequest,
    CreateAptosContactRequestFromJSON,
    CreateAptosContactRequestFromJSONTyped,
    CreateAptosContactRequestToJSON,
} from './CreateAptosContactRequest';
import type { CreateCosmosContactRequest } from './CreateCosmosContactRequest';
import {
    instanceOfCreateCosmosContactRequest,
    CreateCosmosContactRequestFromJSON,
    CreateCosmosContactRequestFromJSONTyped,
    CreateCosmosContactRequestToJSON,
} from './CreateCosmosContactRequest';
import type { CreateEVMContactRequest } from './CreateEVMContactRequest';
import {
    instanceOfCreateEVMContactRequest,
    CreateEVMContactRequestFromJSON,
    CreateEVMContactRequestFromJSONTyped,
    CreateEVMContactRequestToJSON,
} from './CreateEVMContactRequest';
import type { CreateSolanaContactRequest } from './CreateSolanaContactRequest';
import {
    instanceOfCreateSolanaContactRequest,
    CreateSolanaContactRequestFromJSON,
    CreateSolanaContactRequestFromJSONTyped,
    CreateSolanaContactRequestToJSON,
} from './CreateSolanaContactRequest';
import type { CreateStacksContactRequest } from './CreateStacksContactRequest';
import {
    instanceOfCreateStacksContactRequest,
    CreateStacksContactRequestFromJSON,
    CreateStacksContactRequestFromJSONTyped,
    CreateStacksContactRequestToJSON,
} from './CreateStacksContactRequest';
import type { CreateStarknetContactRequest } from './CreateStarknetContactRequest';
import {
    instanceOfCreateStarknetContactRequest,
    CreateStarknetContactRequestFromJSON,
    CreateStarknetContactRequestFromJSONTyped,
    CreateStarknetContactRequestToJSON,
} from './CreateStarknetContactRequest';
import type { CreateSuiContactRequest } from './CreateSuiContactRequest';
import {
    instanceOfCreateSuiContactRequest,
    CreateSuiContactRequestFromJSON,
    CreateSuiContactRequestFromJSONTyped,
    CreateSuiContactRequestToJSON,
} from './CreateSuiContactRequest';
import type { CreateTonContactRequest } from './CreateTonContactRequest';
import {
    instanceOfCreateTonContactRequest,
    CreateTonContactRequestFromJSON,
    CreateTonContactRequestFromJSONTyped,
    CreateTonContactRequestToJSON,
} from './CreateTonContactRequest';
import type { CreateTronContactRequest } from './CreateTronContactRequest';
import {
    instanceOfCreateTronContactRequest,
    CreateTronContactRequestFromJSON,
    CreateTronContactRequestFromJSONTyped,
    CreateTronContactRequestToJSON,
} from './CreateTronContactRequest';
import type { CreateUtxoContactRequest } from './CreateUtxoContactRequest';
import {
    instanceOfCreateUtxoContactRequest,
    CreateUtxoContactRequestFromJSON,
    CreateUtxoContactRequestFromJSONTyped,
    CreateUtxoContactRequestToJSON,
} from './CreateUtxoContactRequest';

/**
 * @type CreateContactRequest
 * 
 * @export
 */
export type CreateContactRequest = { type: 'aptos' } & CreateAptosContactRequest | { type: 'cosmos' } & CreateCosmosContactRequest | { type: 'evm' } & CreateEVMContactRequest | { type: 'solana' } & CreateSolanaContactRequest | { type: 'stacks' } & CreateStacksContactRequest | { type: 'starknet' } & CreateStarknetContactRequest | { type: 'sui' } & CreateSuiContactRequest | { type: 'ton' } & CreateTonContactRequest | { type: 'tron' } & CreateTronContactRequest | { type: 'utxo' } & CreateUtxoContactRequest;

export function CreateContactRequestFromJSON(json: any): CreateContactRequest {
    return CreateContactRequestFromJSONTyped(json, false);
}

export function CreateContactRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateContactRequest {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'aptos':
            return Object.assign({}, CreateAptosContactRequestFromJSONTyped(json, true), { type: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, CreateCosmosContactRequestFromJSONTyped(json, true), { type: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, CreateEVMContactRequestFromJSONTyped(json, true), { type: 'evm' } as const);
        case 'solana':
            return Object.assign({}, CreateSolanaContactRequestFromJSONTyped(json, true), { type: 'solana' } as const);
        case 'stacks':
            return Object.assign({}, CreateStacksContactRequestFromJSONTyped(json, true), { type: 'stacks' } as const);
        case 'starknet':
            return Object.assign({}, CreateStarknetContactRequestFromJSONTyped(json, true), { type: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, CreateSuiContactRequestFromJSONTyped(json, true), { type: 'sui' } as const);
        case 'ton':
            return Object.assign({}, CreateTonContactRequestFromJSONTyped(json, true), { type: 'ton' } as const);
        case 'tron':
            return Object.assign({}, CreateTronContactRequestFromJSONTyped(json, true), { type: 'tron' } as const);
        case 'utxo':
            return Object.assign({}, CreateUtxoContactRequestFromJSONTyped(json, true), { type: 'utxo' } as const);
        default:
            throw new Error(`No variant of CreateContactRequest exists with 'type=${json['type']}'`);
    }
}

export function CreateContactRequestToJSON(json: any): any {
    return CreateContactRequestToJSONTyped(json, false);
}

export function CreateContactRequestToJSONTyped(value?: CreateContactRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'aptos':
            return Object.assign({}, CreateAptosContactRequestToJSON(value), { type: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, CreateCosmosContactRequestToJSON(value), { type: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, CreateEVMContactRequestToJSON(value), { type: 'evm' } as const);
        case 'solana':
            return Object.assign({}, CreateSolanaContactRequestToJSON(value), { type: 'solana' } as const);
        case 'stacks':
            return Object.assign({}, CreateStacksContactRequestToJSON(value), { type: 'stacks' } as const);
        case 'starknet':
            return Object.assign({}, CreateStarknetContactRequestToJSON(value), { type: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, CreateSuiContactRequestToJSON(value), { type: 'sui' } as const);
        case 'ton':
            return Object.assign({}, CreateTonContactRequestToJSON(value), { type: 'ton' } as const);
        case 'tron':
            return Object.assign({}, CreateTronContactRequestToJSON(value), { type: 'tron' } as const);
        case 'utxo':
            return Object.assign({}, CreateUtxoContactRequestToJSON(value), { type: 'utxo' } as const);
        default:
            throw new Error(`No variant of CreateContactRequest exists with 'type=${value['type']}'`);
    }

}

