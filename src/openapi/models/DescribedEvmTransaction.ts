/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DescribedEvmTransactionEvmTransactionTypeDetails } from './DescribedEvmTransactionEvmTransactionTypeDetails';
import {
    DescribedEvmTransactionEvmTransactionTypeDetailsFromJSON,
    DescribedEvmTransactionEvmTransactionTypeDetailsFromJSONTyped,
    DescribedEvmTransactionEvmTransactionTypeDetailsToJSON,
} from './DescribedEvmTransactionEvmTransactionTypeDetails';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
    EnrichedEvmAddressFromJSONTyped,
    EnrichedEvmAddressToJSON,
} from './EnrichedEvmAddress';
import type { EnrichedEvmChain } from './EnrichedEvmChain';
import {
    EnrichedEvmChainFromJSON,
    EnrichedEvmChainFromJSONTyped,
    EnrichedEvmChainToJSON,
} from './EnrichedEvmChain';
import type { EvmGasEstimation } from './EvmGasEstimation';
import {
    EvmGasEstimationFromJSON,
    EvmGasEstimationFromJSONTyped,
    EvmGasEstimationToJSON,
} from './EvmGasEstimation';
import type { EvmSuggestedFees } from './EvmSuggestedFees';
import {
    EvmSuggestedFeesFromJSON,
    EvmSuggestedFeesFromJSONTyped,
    EvmSuggestedFeesToJSON,
} from './EvmSuggestedFees';
import type { EvmTransactionParsedData } from './EvmTransactionParsedData';
import {
    EvmTransactionParsedDataFromJSON,
    EvmTransactionParsedDataFromJSONTyped,
    EvmTransactionParsedDataToJSON,
} from './EvmTransactionParsedData';

/**
 * 
 * @export
 * @interface DescribedEvmTransaction
 */
export interface DescribedEvmTransaction {
    /**
     * 
     * @type {string}
     * @memberof DescribedEvmTransaction
     */
    type: DescribedEvmTransactionTypeEnum;
    /**
     * 
     * @type {DescribedEvmTransactionEvmTransactionTypeDetails}
     * @memberof DescribedEvmTransaction
     */
    evmTransactionTypeDetails: DescribedEvmTransactionEvmTransactionTypeDetails;
    /**
     * 
     * @type {EvmTransactionParsedData}
     * @memberof DescribedEvmTransaction
     */
    parsedData: EvmTransactionParsedData;
    /**
     * 
     * @type {string}
     * @memberof DescribedEvmTransaction
     * @deprecated
     */
    gasLimit: string;
    /**
     * 
     * @type {EvmGasEstimation}
     * @memberof DescribedEvmTransaction
     */
    gasEstimation: EvmGasEstimation;
    /**
     * 
     * @type {EvmSuggestedFees}
     * @memberof DescribedEvmTransaction
     */
    suggestedFees: EvmSuggestedFees;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof DescribedEvmTransaction
     */
    from: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof DescribedEvmTransaction
     */
    to: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmChain}
     * @memberof DescribedEvmTransaction
     */
    chain: EnrichedEvmChain;
}


/**
 * @export
 */
export const DescribedEvmTransactionTypeEnum = {
    evmTransaction: 'evm_transaction'
} as const;
export type DescribedEvmTransactionTypeEnum = typeof DescribedEvmTransactionTypeEnum[keyof typeof DescribedEvmTransactionTypeEnum];


/**
 * Check if a given object implements the DescribedEvmTransaction interface.
 */
export function instanceOfDescribedEvmTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "evmTransactionTypeDetails" in value;
    isInstance = isInstance && "parsedData" in value;
    isInstance = isInstance && "gasLimit" in value;
    isInstance = isInstance && "gasEstimation" in value;
    isInstance = isInstance && "suggestedFees" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "chain" in value;

    return isInstance;
}

export function DescribedEvmTransactionFromJSON(json: any): DescribedEvmTransaction {
    return DescribedEvmTransactionFromJSONTyped(json, false);
}

export function DescribedEvmTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): DescribedEvmTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'evmTransactionTypeDetails': DescribedEvmTransactionEvmTransactionTypeDetailsFromJSON(json['evm_transaction_type_details']),
        'parsedData': EvmTransactionParsedDataFromJSON(json['parsed_data']),
        'gasLimit': json['gas_limit'],
        'gasEstimation': EvmGasEstimationFromJSON(json['gas_estimation']),
        'suggestedFees': EvmSuggestedFeesFromJSON(json['suggested_fees']),
        'from': EnrichedEvmAddressFromJSON(json['from']),
        'to': EnrichedEvmAddressFromJSON(json['to']),
        'chain': EnrichedEvmChainFromJSON(json['chain']),
    };
}

export function DescribedEvmTransactionToJSON(value?: DescribedEvmTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'evm_transaction_type_details': DescribedEvmTransactionEvmTransactionTypeDetailsToJSON(value.evmTransactionTypeDetails),
        'parsed_data': EvmTransactionParsedDataToJSON(value.parsedData),
        'gas_limit': value.gasLimit,
        'gas_estimation': EvmGasEstimationToJSON(value.gasEstimation),
        'suggested_fees': EvmSuggestedFeesToJSON(value.suggestedFees),
        'from': EnrichedEvmAddressToJSON(value.from),
        'to': EnrichedEvmAddressToJSON(value.to),
        'chain': EnrichedEvmChainToJSON(value.chain),
    };
}

