/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    CosmosTransferToAddressRequest,
    instanceOfCosmosTransferToAddressRequest,
    CosmosTransferToAddressRequestFromJSON,
    CosmosTransferToAddressRequestFromJSONTyped,
    CosmosTransferToAddressRequestToJSON,
} from './CosmosTransferToAddressRequest';
import {
    CosmosTransferToVaultIdRequest,
    instanceOfCosmosTransferToVaultIdRequest,
    CosmosTransferToVaultIdRequestFromJSON,
    CosmosTransferToVaultIdRequestFromJSONTyped,
    CosmosTransferToVaultIdRequestToJSON,
} from './CosmosTransferToVaultIdRequest';

/**
 * @type TypedCosmosTransferRequestTo
 * 
 * @export
 */
export type TypedCosmosTransferRequestTo = { type: 'address' } & CosmosTransferToAddressRequest | { type: 'vault_id' } & CosmosTransferToVaultIdRequest;

export function TypedCosmosTransferRequestToFromJSON(json: any): TypedCosmosTransferRequestTo {
    return TypedCosmosTransferRequestToFromJSONTyped(json, false);
}

export function TypedCosmosTransferRequestToFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedCosmosTransferRequestTo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'address':
            return {...CosmosTransferToAddressRequestFromJSONTyped(json, true), type: 'address'};
        case 'vault_id':
            return {...CosmosTransferToVaultIdRequestFromJSONTyped(json, true), type: 'vault_id'};
        default:
            throw new Error(`No variant of TypedCosmosTransferRequestTo exists with 'type=${json['type']}'`);
    }
}

export function TypedCosmosTransferRequestToToJSON(value?: TypedCosmosTransferRequestTo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'address':
            return CosmosTransferToAddressRequestToJSON(value);
        case 'vault_id':
            return CosmosTransferToVaultIdRequestToJSON(value);
        default:
            throw new Error(`No variant of TypedCosmosTransferRequestTo exists with 'type=${value['type']}'`);
    }

}

