/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { UtxoTransactionType } from './UtxoTransactionType';
import {
    UtxoTransactionTypeFromJSON,
    UtxoTransactionTypeFromJSONTyped,
    UtxoTransactionTypeToJSON,
    UtxoTransactionTypeToJSONTyped,
} from './UtxoTransactionType';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
    PushableTransactionStateFromJSONTyped,
    PushableTransactionStateToJSON,
    PushableTransactionStateToJSONTyped,
} from './PushableTransactionState';
import type { UtxoChain } from './UtxoChain';
import {
    UtxoChainFromJSON,
    UtxoChainFromJSONTyped,
    UtxoChainToJSON,
    UtxoChainToJSONTyped,
} from './UtxoChain';

/**
 * 
 * @export
 * @interface WebhookUtxoTransactionStatusChangeEvent
 */
export interface WebhookUtxoTransactionStatusChangeEvent {
    /**
     * 
     * @type {string}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    transactionId: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     * @deprecated
     */
    isManagedTransaction: boolean;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    spamState: TransactionSpamState;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    state: PushableTransactionState;
    /**
     * 
     * @type {string}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    type: WebhookUtxoTransactionStatusChangeEventTypeEnum;
    /**
     * 
     * @type {UtxoTransactionType}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    utxoTransactionType: UtxoTransactionType;
    /**
     * 
     * @type {string}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    hash?: string;
    /**
     * 
     * @type {UtxoChain}
     * @memberof WebhookUtxoTransactionStatusChangeEvent
     */
    chain: UtxoChain;
}


/**
 * @export
 */
export const WebhookUtxoTransactionStatusChangeEventTypeEnum = {
    utxoTransaction: 'utxo_transaction'
} as const;
export type WebhookUtxoTransactionStatusChangeEventTypeEnum = typeof WebhookUtxoTransactionStatusChangeEventTypeEnum[keyof typeof WebhookUtxoTransactionStatusChangeEventTypeEnum];


/**
 * Check if a given object implements the WebhookUtxoTransactionStatusChangeEvent interface.
 */
export function instanceOfWebhookUtxoTransactionStatusChangeEvent(value: object): value is WebhookUtxoTransactionStatusChangeEvent {
    if (!('transactionId' in value) || value['transactionId'] === undefined) return false;
    if (!('isManagedTransaction' in value) || value['isManagedTransaction'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('spamState' in value) || value['spamState'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('utxoTransactionType' in value) || value['utxoTransactionType'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    return true;
}

export function WebhookUtxoTransactionStatusChangeEventFromJSON(json: any): WebhookUtxoTransactionStatusChangeEvent {
    return WebhookUtxoTransactionStatusChangeEventFromJSONTyped(json, false);
}

export function WebhookUtxoTransactionStatusChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookUtxoTransactionStatusChangeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'],
        'isManagedTransaction': json['is_managed_transaction'],
        'direction': TransactionDirectionFromJSON(json['direction']),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': TransactionSpamStateFromJSON(json['spam_state']),
        'state': PushableTransactionStateFromJSON(json['state']),
        'type': json['type'],
        'utxoTransactionType': UtxoTransactionTypeFromJSON(json['utxo_transaction_type']),
        'hash': json['hash'] == null ? undefined : json['hash'],
        'chain': UtxoChainFromJSON(json['chain']),
    };
}

export function WebhookUtxoTransactionStatusChangeEventToJSON(json: any): WebhookUtxoTransactionStatusChangeEvent {
    return WebhookUtxoTransactionStatusChangeEventToJSONTyped(json, false);
}

export function WebhookUtxoTransactionStatusChangeEventToJSONTyped(value?: WebhookUtxoTransactionStatusChangeEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transaction_id': value['transactionId'],
        'is_managed_transaction': value['isManagedTransaction'],
        'direction': TransactionDirectionToJSON(value['direction']),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'state': PushableTransactionStateToJSON(value['state']),
        'type': value['type'],
        'utxo_transaction_type': UtxoTransactionTypeToJSON(value['utxoTransactionType']),
        'hash': value['hash'],
        'chain': UtxoChainToJSON(value['chain']),
    };
}

