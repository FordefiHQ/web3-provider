/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TronChainUniqueId } from './TronChainUniqueId';
import {
    TronChainUniqueIdFromJSON,
    TronChainUniqueIdFromJSONTyped,
    TronChainUniqueIdToJSON,
    TronChainUniqueIdToJSONTyped,
} from './TronChainUniqueId';
import type { TronAssetIdentifierRequest } from './TronAssetIdentifierRequest';
import {
    TronAssetIdentifierRequestFromJSON,
    TronAssetIdentifierRequestFromJSONTyped,
    TronAssetIdentifierRequestToJSON,
    TronAssetIdentifierRequestToJSONTyped,
} from './TronAssetIdentifierRequest';

/**
 * 
 * @export
 * @interface CreateTronContactRequest
 */
export interface CreateTronContactRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTronContactRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTronContactRequest
     */
    type: CreateTronContactRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateTronContactRequest
     */
    address: string;
    /**
     * 
     * @type {Array<TronChainUniqueId>}
     * @memberof CreateTronContactRequest
     */
    chains: Array<TronChainUniqueId>;
    /**
     * 
     * @type {Array<TronAssetIdentifierRequest>}
     * @memberof CreateTronContactRequest
     */
    assetsIdentifiers?: Array<TronAssetIdentifierRequest>;
    /**
     * 
     * @type {string}
     * @memberof CreateTronContactRequest
     */
    memo?: string;
}


/**
 * @export
 */
export const CreateTronContactRequestTypeEnum = {
    tron: 'tron'
} as const;
export type CreateTronContactRequestTypeEnum = typeof CreateTronContactRequestTypeEnum[keyof typeof CreateTronContactRequestTypeEnum];


/**
 * Check if a given object implements the CreateTronContactRequest interface.
 */
export function instanceOfCreateTronContactRequest(value: object): value is CreateTronContactRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('chains' in value) || value['chains'] === undefined) return false;
    return true;
}

export function CreateTronContactRequestFromJSON(json: any): CreateTronContactRequest {
    return CreateTronContactRequestFromJSONTyped(json, false);
}

export function CreateTronContactRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTronContactRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'address': json['address'],
        'chains': ((json['chains'] as Array<any>).map(TronChainUniqueIdFromJSON)),
        'assetsIdentifiers': json['assets_identifiers'] == null ? undefined : ((json['assets_identifiers'] as Array<any>).map(TronAssetIdentifierRequestFromJSON)),
        'memo': json['memo'] == null ? undefined : json['memo'],
    };
}

export function CreateTronContactRequestToJSON(json: any): CreateTronContactRequest {
    return CreateTronContactRequestToJSONTyped(json, false);
}

export function CreateTronContactRequestToJSONTyped(value?: CreateTronContactRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': value['type'],
        'address': value['address'],
        'chains': ((value['chains'] as Array<any>).map(TronChainUniqueIdToJSON)),
        'assets_identifiers': value['assetsIdentifiers'] == null ? undefined : ((value['assetsIdentifiers'] as Array<any>).map(TronAssetIdentifierRequestToJSON)),
        'memo': value['memo'],
    };
}

