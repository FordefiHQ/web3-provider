/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { VaultGroupAccessPermissionsAll } from './VaultGroupAccessPermissionsAll';
import {
    instanceOfVaultGroupAccessPermissionsAll,
    VaultGroupAccessPermissionsAllFromJSON,
    VaultGroupAccessPermissionsAllFromJSONTyped,
    VaultGroupAccessPermissionsAllToJSON,
} from './VaultGroupAccessPermissionsAll';
import type { VaultGroupAccessPermissionsPermittedRequest } from './VaultGroupAccessPermissionsPermittedRequest';
import {
    instanceOfVaultGroupAccessPermissionsPermittedRequest,
    VaultGroupAccessPermissionsPermittedRequestFromJSON,
    VaultGroupAccessPermissionsPermittedRequestFromJSONTyped,
    VaultGroupAccessPermissionsPermittedRequestToJSON,
} from './VaultGroupAccessPermissionsPermittedRequest';

/**
 * @type VaultGroupAccessPermissionsRequest
 * 
 * @export
 */
export type VaultGroupAccessPermissionsRequest = { accessType: 'all' } & VaultGroupAccessPermissionsAll | { accessType: 'permitted' } & VaultGroupAccessPermissionsPermittedRequest;

export function VaultGroupAccessPermissionsRequestFromJSON(json: any): VaultGroupAccessPermissionsRequest {
    return VaultGroupAccessPermissionsRequestFromJSONTyped(json, false);
}

export function VaultGroupAccessPermissionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultGroupAccessPermissionsRequest {
    if (json == null) {
        return json;
    }
    switch (json['access_type']) {
        case 'all':
            return Object.assign({}, VaultGroupAccessPermissionsAllFromJSONTyped(json, true), { accessType: 'all' } as const);
        case 'permitted':
            return Object.assign({}, VaultGroupAccessPermissionsPermittedRequestFromJSONTyped(json, true), { accessType: 'permitted' } as const);
        default:
            throw new Error(`No variant of VaultGroupAccessPermissionsRequest exists with 'accessType=${json['accessType']}'`);
    }
}

export function VaultGroupAccessPermissionsRequestToJSON(json: any): any {
    return VaultGroupAccessPermissionsRequestToJSONTyped(json, false);
}

export function VaultGroupAccessPermissionsRequestToJSONTyped(value?: VaultGroupAccessPermissionsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['accessType']) {
        case 'all':
            return Object.assign({}, VaultGroupAccessPermissionsAllToJSON(value), { accessType: 'all' } as const);
        case 'permitted':
            return Object.assign({}, VaultGroupAccessPermissionsPermittedRequestToJSON(value), { accessType: 'permitted' } as const);
        default:
            throw new Error(`No variant of VaultGroupAccessPermissionsRequest exists with 'accessType=${value['accessType']}'`);
    }

}

