/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DescribedEvmTransactionEvmTransactionTypeDetails } from './DescribedEvmTransactionEvmTransactionTypeDetails';
import {
    DescribedEvmTransactionEvmTransactionTypeDetailsFromJSON,
    DescribedEvmTransactionEvmTransactionTypeDetailsFromJSONTyped,
    DescribedEvmTransactionEvmTransactionTypeDetailsToJSON,
} from './DescribedEvmTransactionEvmTransactionTypeDetails';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
    EnrichedEvmAddressFromJSONTyped,
    EnrichedEvmAddressToJSON,
} from './EnrichedEvmAddress';
import type { EnrichedEvmChain } from './EnrichedEvmChain';
import {
    EnrichedEvmChainFromJSON,
    EnrichedEvmChainFromJSONTyped,
    EnrichedEvmChainToJSON,
} from './EnrichedEvmChain';
import type { EvmBlockData } from './EvmBlockData';
import {
    EvmBlockDataFromJSON,
    EvmBlockDataFromJSONTyped,
    EvmBlockDataToJSON,
} from './EvmBlockData';
import type { EvmTransactionGasSubmitted } from './EvmTransactionGasSubmitted';
import {
    EvmTransactionGasSubmittedFromJSON,
    EvmTransactionGasSubmittedFromJSONTyped,
    EvmTransactionGasSubmittedToJSON,
} from './EvmTransactionGasSubmitted';
import type { EvmTransactionParsedData } from './EvmTransactionParsedData';
import {
    EvmTransactionParsedDataFromJSON,
    EvmTransactionParsedDataFromJSONTyped,
    EvmTransactionParsedDataToJSON,
} from './EvmTransactionParsedData';
import type { EvmTransactionResult } from './EvmTransactionResult';
import {
    EvmTransactionResultFromJSON,
    EvmTransactionResultFromJSONTyped,
    EvmTransactionResultToJSON,
} from './EvmTransactionResult';
import type { EvmTransactionState } from './EvmTransactionState';
import {
    EvmTransactionStateFromJSON,
    EvmTransactionStateFromJSONTyped,
    EvmTransactionStateToJSON,
} from './EvmTransactionState';
import type { EvmTransactionStateChange } from './EvmTransactionStateChange';
import {
    EvmTransactionStateChangeFromJSON,
    EvmTransactionStateChangeFromJSONTyped,
    EvmTransactionStateChangeToJSON,
} from './EvmTransactionStateChange';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
} from './ManagedTransactionData';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
    SimulationStatusResultFromJSONTyped,
    SimulationStatusResultToJSON,
} from './SimulationStatusResult';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
    VaultRefFromJSONTyped,
    VaultRefToJSON,
} from './VaultRef';

/**
 * 
 * @export
 * @interface EvmTransaction
 */
export interface EvmTransaction {
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof EvmTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof EvmTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof EvmTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof EvmTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof EvmTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof EvmTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    type: EvmTransactionTypeEnum;
    /**
     * 
     * @type {DescribedEvmTransactionEvmTransactionTypeDetails}
     * @memberof EvmTransaction
     */
    evmTransactionTypeDetails: DescribedEvmTransactionEvmTransactionTypeDetails;
    /**
     * 
     * @type {EnrichedEvmChain}
     * @memberof EvmTransaction
     */
    chain: EnrichedEvmChain;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof EvmTransaction
     */
    from: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof EvmTransaction
     */
    to: EnrichedEvmAddress;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    data: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    hexData?: string;
    /**
     * 
     * @type {EvmTransactionParsedData}
     * @memberof EvmTransaction
     */
    parsedData: EvmTransactionParsedData;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    hash?: string;
    /**
     * 
     * @type {number}
     * @memberof EvmTransaction
     */
    nonce?: number;
    /**
     * 
     * @type {EvmBlockData}
     * @memberof EvmTransaction
     */
    block?: EvmBlockData;
    /**
     * 
     * @type {EvmTransactionResult}
     * @memberof EvmTransaction
     */
    expectedResult?: EvmTransactionResult;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof EvmTransaction
     */
    simulationStatusResult?: SimulationStatusResult;
    /**
     * 
     * @type {EvmTransactionResult}
     * @memberof EvmTransaction
     */
    minedResult?: EvmTransactionResult;
    /**
     * 
     * @type {EvmTransactionGasSubmitted}
     * @memberof EvmTransaction
     */
    gasSubmitted: EvmTransactionGasSubmitted;
    /**
     * 
     * @type {EvmTransactionState}
     * @memberof EvmTransaction
     */
    state: EvmTransactionState;
    /**
     * 
     * @type {Array<EvmTransactionStateChange>}
     * @memberof EvmTransaction
     */
    stateChanges: Array<EvmTransactionStateChange>;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    parentTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    childTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    fundingForTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    fundedByTransactionId?: string;
    /**
     * 
     * @type {VaultRef}
     * @memberof EvmTransaction
     */
    fundedByVault?: VaultRef;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    currentPrecedingPushedToBlockchainTransactionId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    isCancelation: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    isAcceleration: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    useSecureNode: boolean;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    explorerUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    rawTransaction?: string;
}


/**
 * @export
 */
export const EvmTransactionTypeEnum = {
    evmTransaction: 'evm_transaction'
} as const;
export type EvmTransactionTypeEnum = typeof EvmTransactionTypeEnum[keyof typeof EvmTransactionTypeEnum];


/**
 * Check if a given object implements the EvmTransaction interface.
 */
export function instanceOfEvmTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "evmTransactionTypeDetails" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "parsedData" in value;
    isInstance = isInstance && "gasSubmitted" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChanges" in value;
    isInstance = isInstance && "isCancelation" in value;
    isInstance = isInstance && "isAcceleration" in value;
    isInstance = isInstance && "useSecureNode" in value;

    return isInstance;
}

export function EvmTransactionFromJSON(json: any): EvmTransaction {
    return EvmTransactionFromJSONTyped(json, false);
}

export function EvmTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvmTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': !exists(json, 'managed_transaction_data') ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': !exists(json, 'spam_state') ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'type': json['type'],
        'evmTransactionTypeDetails': DescribedEvmTransactionEvmTransactionTypeDetailsFromJSON(json['evm_transaction_type_details']),
        'chain': EnrichedEvmChainFromJSON(json['chain']),
        'from': EnrichedEvmAddressFromJSON(json['from']),
        'to': EnrichedEvmAddressFromJSON(json['to']),
        'value': json['value'],
        'data': json['data'],
        'hexData': !exists(json, 'hex_data') ? undefined : json['hex_data'],
        'parsedData': EvmTransactionParsedDataFromJSON(json['parsed_data']),
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'nonce': !exists(json, 'nonce') ? undefined : json['nonce'],
        'block': !exists(json, 'block') ? undefined : EvmBlockDataFromJSON(json['block']),
        'expectedResult': !exists(json, 'expected_result') ? undefined : EvmTransactionResultFromJSON(json['expected_result']),
        'simulationStatusResult': !exists(json, 'simulation_status_result') ? undefined : SimulationStatusResultFromJSON(json['simulation_status_result']),
        'minedResult': !exists(json, 'mined_result') ? undefined : EvmTransactionResultFromJSON(json['mined_result']),
        'gasSubmitted': EvmTransactionGasSubmittedFromJSON(json['gas_submitted']),
        'state': EvmTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(EvmTransactionStateChangeFromJSON)),
        'parentTransactionId': !exists(json, 'parent_transaction_id') ? undefined : json['parent_transaction_id'],
        'childTransactionId': !exists(json, 'child_transaction_id') ? undefined : json['child_transaction_id'],
        'fundingForTransactionId': !exists(json, 'funding_for_transaction_id') ? undefined : json['funding_for_transaction_id'],
        'fundedByTransactionId': !exists(json, 'funded_by_transaction_id') ? undefined : json['funded_by_transaction_id'],
        'fundedByVault': !exists(json, 'funded_by_vault') ? undefined : VaultRefFromJSON(json['funded_by_vault']),
        'currentPrecedingPushedToBlockchainTransactionId': !exists(json, 'current_preceding_pushed_to_blockchain_transaction_id') ? undefined : json['current_preceding_pushed_to_blockchain_transaction_id'],
        'isCancelation': json['is_cancelation'],
        'isAcceleration': json['is_acceleration'],
        'useSecureNode': json['use_secure_node'],
        'explorerUrl': !exists(json, 'explorer_url') ? undefined : json['explorer_url'],
        'rawTransaction': !exists(json, 'raw_transaction') ? undefined : json['raw_transaction'],
    };
}

export function EvmTransactionToJSON(value?: EvmTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value.managedTransactionData),
        'signatures': ((value.signatures as Array<any>).map(SignatureToJSON)),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'direction': TransactionDirectionToJSON(value.direction),
        'type': value.type,
        'evm_transaction_type_details': DescribedEvmTransactionEvmTransactionTypeDetailsToJSON(value.evmTransactionTypeDetails),
        'chain': EnrichedEvmChainToJSON(value.chain),
        'from': EnrichedEvmAddressToJSON(value.from),
        'to': EnrichedEvmAddressToJSON(value.to),
        'value': value.value,
        'data': value.data,
        'hex_data': value.hexData,
        'parsed_data': EvmTransactionParsedDataToJSON(value.parsedData),
        'hash': value.hash,
        'nonce': value.nonce,
        'block': EvmBlockDataToJSON(value.block),
        'expected_result': EvmTransactionResultToJSON(value.expectedResult),
        'simulation_status_result': SimulationStatusResultToJSON(value.simulationStatusResult),
        'mined_result': EvmTransactionResultToJSON(value.minedResult),
        'gas_submitted': EvmTransactionGasSubmittedToJSON(value.gasSubmitted),
        'state': EvmTransactionStateToJSON(value.state),
        'state_changes': ((value.stateChanges as Array<any>).map(EvmTransactionStateChangeToJSON)),
        'parent_transaction_id': value.parentTransactionId,
        'child_transaction_id': value.childTransactionId,
        'funding_for_transaction_id': value.fundingForTransactionId,
        'funded_by_transaction_id': value.fundedByTransactionId,
        'funded_by_vault': VaultRefToJSON(value.fundedByVault),
        'current_preceding_pushed_to_blockchain_transaction_id': value.currentPrecedingPushedToBlockchainTransactionId,
        'is_cancelation': value.isCancelation,
        'is_acceleration': value.isAcceleration,
        'use_secure_node': value.useSecureNode,
        'explorer_url': value.explorerUrl,
        'raw_transaction': value.rawTransaction,
    };
}

