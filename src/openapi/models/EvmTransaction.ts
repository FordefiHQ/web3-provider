/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EvmTransactionResult } from './EvmTransactionResult';
import {
    EvmTransactionResultFromJSON,
} from './EvmTransactionResult';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
} from './ManagedTransactionData';
import type { EvmTransactionGasSubmitted } from './EvmTransactionGasSubmitted';
import {
    EvmTransactionGasSubmittedFromJSON,
} from './EvmTransactionGasSubmitted';
import type { EvmTransactionParsedData } from './EvmTransactionParsedData';
import {
    EvmTransactionParsedDataFromJSON,
} from './EvmTransactionParsedData';
import type { EvmBlockData } from './EvmBlockData';
import {
    EvmBlockDataFromJSON,
} from './EvmBlockData';
import type { PushableTransactionStateChange } from './PushableTransactionStateChange';
import {
    PushableTransactionStateChangeFromJSON,
} from './PushableTransactionStateChange';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
} from './EnrichedEvmAddress';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
} from './PushableTransactionState';
import type { AmlPolicyMatchIncoming } from './AmlPolicyMatchIncoming';
import {
    AmlPolicyMatchIncomingFromJSON,
} from './AmlPolicyMatchIncoming';
import type { VaultRef } from './VaultRef';
import {
    VaultRefFromJSON,
} from './VaultRef';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
} from './TransactionDirection';
import type { EnrichedEvmChain } from './EnrichedEvmChain';
import {
    EnrichedEvmChainFromJSON,
} from './EnrichedEvmChain';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
} from './Signature';
import type { SimulationStatusResult } from './SimulationStatusResult';
import {
    SimulationStatusResultFromJSON,
} from './SimulationStatusResult';
import type { EvmTransactionEvmTransactionTypeDetails } from './EvmTransactionEvmTransactionTypeDetails';
import {
    EvmTransactionEvmTransactionTypeDetailsFromJSON,
} from './EvmTransactionEvmTransactionTypeDetails';
import type { AmlResults } from './AmlResults';
import {
    AmlResultsFromJSON,
} from './AmlResults';

/**
 * 
 * @export
 * @interface EvmTransaction
 */
export interface EvmTransaction {
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof EvmTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof EvmTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof EvmTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof EvmTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof EvmTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof EvmTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof EvmTransaction
     */
    state: PushableTransactionState;
    /**
     * 
     * @type {Array<PushableTransactionStateChange>}
     * @memberof EvmTransaction
     */
    stateChanges: Array<PushableTransactionStateChange>;
    /**
     * 
     * @type {AmlResults}
     * @memberof EvmTransaction
     */
    amlResults?: AmlResults;
    /**
     * 
     * @type {AmlPolicyMatchIncoming}
     * @memberof EvmTransaction
     */
    incomingAmlPolicyMatch?: AmlPolicyMatchIncoming;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    type: EvmTransactionTypeEnum;
    /**
     * 
     * @type {EvmTransactionEvmTransactionTypeDetails}
     * @memberof EvmTransaction
     */
    evmTransactionTypeDetails: EvmTransactionEvmTransactionTypeDetails;
    /**
     * 
     * @type {EnrichedEvmChain}
     * @memberof EvmTransaction
     */
    chain: EnrichedEvmChain;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof EvmTransaction
     */
    from: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof EvmTransaction
     */
    to: EnrichedEvmAddress;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    data: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    hexData?: string;
    /**
     * 
     * @type {EvmTransactionParsedData}
     * @memberof EvmTransaction
     */
    parsedData: EvmTransactionParsedData;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    hash?: string;
    /**
     * 
     * @type {number}
     * @memberof EvmTransaction
     */
    nonce?: number;
    /**
     * 
     * @type {EvmBlockData}
     * @memberof EvmTransaction
     */
    block?: EvmBlockData;
    /**
     * 
     * @type {EvmTransactionResult}
     * @memberof EvmTransaction
     */
    expectedResult?: EvmTransactionResult;
    /**
     * 
     * @type {SimulationStatusResult}
     * @memberof EvmTransaction
     */
    simulationStatusResult?: SimulationStatusResult;
    /**
     * 
     * @type {EvmTransactionResult}
     * @memberof EvmTransaction
     */
    minedResult?: EvmTransactionResult;
    /**
     * 
     * @type {EvmTransactionGasSubmitted}
     * @memberof EvmTransaction
     */
    gasSubmitted: EvmTransactionGasSubmitted;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    parentTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    childTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    fundingForTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    fundedByTransactionId?: string;
    /**
     * 
     * @type {VaultRef}
     * @memberof EvmTransaction
     */
    fundedByVault?: VaultRef;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    currentPrecedingPushedToBlockchainTransactionId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    isCancelation: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    isAcceleration: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EvmTransaction
     */
    useSecureNode: boolean;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    explorerUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof EvmTransaction
     */
    rawTransaction?: string;
}


/**
 * 
 */
const EvmTransactionTypeEnum = {
    evmTransaction: 'evm_transaction'
} as const;
type EvmTransactionTypeEnum = typeof EvmTransactionTypeEnum[keyof typeof EvmTransactionTypeEnum];

export function EvmTransactionFromJSONTyped(json: any, _ignoreDiscriminator: boolean): EvmTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': PushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(PushableTransactionStateChangeFromJSON)),
        'amlResults': json['aml_results'] == null ? undefined : AmlResultsFromJSON(json['aml_results']),
        'incomingAmlPolicyMatch': json['incoming_aml_policy_match'] == null ? undefined : AmlPolicyMatchIncomingFromJSON(json['incoming_aml_policy_match']),
        'type': json['type'],
        'evmTransactionTypeDetails': EvmTransactionEvmTransactionTypeDetailsFromJSON(json['evm_transaction_type_details']),
        'chain': EnrichedEvmChainFromJSON(json['chain']),
        'from': EnrichedEvmAddressFromJSON(json['from']),
        'to': EnrichedEvmAddressFromJSON(json['to']),
        'value': json['value'],
        'data': json['data'],
        'hexData': json['hex_data'] == null ? undefined : json['hex_data'],
        'parsedData': EvmTransactionParsedDataFromJSON(json['parsed_data']),
        'hash': json['hash'] == null ? undefined : json['hash'],
        'nonce': json['nonce'] == null ? undefined : json['nonce'],
        'block': json['block'] == null ? undefined : EvmBlockDataFromJSON(json['block']),
        'expectedResult': json['expected_result'] == null ? undefined : EvmTransactionResultFromJSON(json['expected_result']),
        'simulationStatusResult': json['simulation_status_result'] == null ? undefined : SimulationStatusResultFromJSON(json['simulation_status_result']),
        'minedResult': json['mined_result'] == null ? undefined : EvmTransactionResultFromJSON(json['mined_result']),
        'gasSubmitted': EvmTransactionGasSubmittedFromJSON(json['gas_submitted']),
        'parentTransactionId': json['parent_transaction_id'] == null ? undefined : json['parent_transaction_id'],
        'childTransactionId': json['child_transaction_id'] == null ? undefined : json['child_transaction_id'],
        'fundingForTransactionId': json['funding_for_transaction_id'] == null ? undefined : json['funding_for_transaction_id'],
        'fundedByTransactionId': json['funded_by_transaction_id'] == null ? undefined : json['funded_by_transaction_id'],
        'fundedByVault': json['funded_by_vault'] == null ? undefined : VaultRefFromJSON(json['funded_by_vault']),
        'currentPrecedingPushedToBlockchainTransactionId': json['current_preceding_pushed_to_blockchain_transaction_id'] == null ? undefined : json['current_preceding_pushed_to_blockchain_transaction_id'],
        'isCancelation': json['is_cancelation'],
        'isAcceleration': json['is_acceleration'],
        'useSecureNode': json['use_secure_node'],
        'explorerUrl': json['explorer_url'] == null ? undefined : json['explorer_url'],
        'rawTransaction': json['raw_transaction'] == null ? undefined : json['raw_transaction'],
    };
}
