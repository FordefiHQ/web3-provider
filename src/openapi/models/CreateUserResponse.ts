/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ApiSigner } from './ApiSigner';
import {
    instanceOfApiSigner,
    ApiSignerFromJSON,
    ApiSignerFromJSONTyped,
    ApiSignerToJSON,
} from './ApiSigner';
import type { ApiUserResponse } from './ApiUserResponse';
import {
    instanceOfApiUserResponse,
    ApiUserResponseFromJSON,
    ApiUserResponseFromJSONTyped,
    ApiUserResponseToJSON,
} from './ApiUserResponse';
import type { CreatePersonResponse } from './CreatePersonResponse';
import {
    instanceOfCreatePersonResponse,
    CreatePersonResponseFromJSON,
    CreatePersonResponseFromJSONTyped,
    CreatePersonResponseToJSON,
} from './CreatePersonResponse';

/**
 * @type CreateUserResponse
 * 
 * @export
 */
export type CreateUserResponse = { userType: 'api_signer' } & ApiSigner | { userType: 'api_user' } & ApiUserResponse | { userType: 'person' } & CreatePersonResponse;

export function CreateUserResponseFromJSON(json: any): CreateUserResponse {
    return CreateUserResponseFromJSONTyped(json, false);
}

export function CreateUserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUserResponse {
    if (json == null) {
        return json;
    }
    switch (json['user_type']) {
        case 'api_signer':
            return Object.assign({}, ApiSignerFromJSONTyped(json, true), { userType: 'api_signer' } as const);
        case 'api_user':
            return Object.assign({}, ApiUserResponseFromJSONTyped(json, true), { userType: 'api_user' } as const);
        case 'person':
            return Object.assign({}, CreatePersonResponseFromJSONTyped(json, true), { userType: 'person' } as const);
        default:
            throw new Error(`No variant of CreateUserResponse exists with 'userType=${json['userType']}'`);
    }
}

export function CreateUserResponseToJSON(json: any): any {
    return CreateUserResponseToJSONTyped(json, false);
}

export function CreateUserResponseToJSONTyped(value?: CreateUserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['userType']) {
        case 'api_signer':
            return Object.assign({}, ApiSignerToJSON(value), { userType: 'api_signer' } as const);
        case 'api_user':
            return Object.assign({}, ApiUserResponseToJSON(value), { userType: 'api_user' } as const);
        case 'person':
            return Object.assign({}, CreatePersonResponseToJSON(value), { userType: 'person' } as const);
        default:
            throw new Error(`No variant of CreateUserResponse exists with 'userType=${value['userType']}'`);
    }

}

