/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AddApiSignerAction,
    instanceOfAddApiSignerAction,
    AddApiSignerActionFromJSON,
    AddApiSignerActionFromJSONTyped,
    AddApiSignerActionToJSON,
} from './AddApiSignerAction';
import {
    AddDeviceAction,
    instanceOfAddDeviceAction,
    AddDeviceActionFromJSON,
    AddDeviceActionFromJSONTyped,
    AddDeviceActionToJSON,
} from './AddDeviceAction';
import {
    AddPersonMembershipAction,
    instanceOfAddPersonMembershipAction,
    AddPersonMembershipActionFromJSON,
    AddPersonMembershipActionFromJSONTyped,
    AddPersonMembershipActionToJSON,
} from './AddPersonMembershipAction';
import {
    AddressGroupChangeAction,
    instanceOfAddressGroupChangeAction,
    AddressGroupChangeActionFromJSON,
    AddressGroupChangeActionFromJSONTyped,
    AddressGroupChangeActionToJSON,
} from './AddressGroupChangeAction';
import {
    AdminQuorumChangeAction,
    instanceOfAdminQuorumChangeAction,
    AdminQuorumChangeActionFromJSON,
    AdminQuorumChangeActionFromJSONTyped,
    AdminQuorumChangeActionToJSON,
} from './AdminQuorumChangeAction';
import {
    BackupEmailChangeAction,
    instanceOfBackupEmailChangeAction,
    BackupEmailChangeActionFromJSON,
    BackupEmailChangeActionFromJSONTyped,
    BackupEmailChangeActionToJSON,
} from './BackupEmailChangeAction';
import {
    ContactChangeAction,
    instanceOfContactChangeAction,
    ContactChangeActionFromJSON,
    ContactChangeActionFromJSONTyped,
    ContactChangeActionToJSON,
} from './ContactChangeAction';
import {
    CreateBackupAction,
    instanceOfCreateBackupAction,
    CreateBackupActionFromJSON,
    CreateBackupActionFromJSONTyped,
    CreateBackupActionToJSON,
} from './CreateBackupAction';
import {
    TransactionAction,
    instanceOfTransactionAction,
    TransactionActionFromJSON,
    TransactionActionFromJSONTyped,
    TransactionActionToJSON,
} from './TransactionAction';
import {
    TransactionsPolicyAction,
    instanceOfTransactionsPolicyAction,
    TransactionsPolicyActionFromJSON,
    TransactionsPolicyActionFromJSONTyped,
    TransactionsPolicyActionToJSON,
} from './TransactionsPolicyAction';
import {
    UserChangeAction,
    instanceOfUserChangeAction,
    UserChangeActionFromJSON,
    UserChangeActionFromJSONTyped,
    UserChangeActionToJSON,
} from './UserChangeAction';
import {
    UserGroupChangeAction,
    instanceOfUserGroupChangeAction,
    UserGroupChangeActionFromJSON,
    UserGroupChangeActionFromJSONTyped,
    UserGroupChangeActionToJSON,
} from './UserGroupChangeAction';
import {
    VaultGroupChangeAction,
    instanceOfVaultGroupChangeAction,
    VaultGroupChangeActionFromJSON,
    VaultGroupChangeActionFromJSONTyped,
    VaultGroupChangeActionToJSON,
} from './VaultGroupChangeAction';

/**
 * @type UserAction
 * 
 * @export
 */
export type UserAction = { type: 'add_api_signer' } & AddApiSignerAction | { type: 'add_device' } & AddDeviceAction | { type: 'add_person_membership' } & AddPersonMembershipAction | { type: 'addressbook_contact_change' } & ContactChangeAction | { type: 'addressbook_group_change' } & AddressGroupChangeAction | { type: 'admin_quorum_change' } & AdminQuorumChangeAction | { type: 'backup_email_change' } & BackupEmailChangeAction | { type: 'create_backup' } & CreateBackupAction | { type: 'transaction' } & TransactionAction | { type: 'transactions_policy' } & TransactionsPolicyAction | { type: 'user_change' } & UserChangeAction | { type: 'user_group_change' } & UserGroupChangeAction | { type: 'vault_group_change' } & VaultGroupChangeAction;

export function UserActionFromJSON(json: any): UserAction {
    return UserActionFromJSONTyped(json, false);
}

export function UserActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'add_api_signer':
            return {...AddApiSignerActionFromJSONTyped(json, true), type: 'add_api_signer'};
        case 'add_device':
            return {...AddDeviceActionFromJSONTyped(json, true), type: 'add_device'};
        case 'add_person_membership':
            return {...AddPersonMembershipActionFromJSONTyped(json, true), type: 'add_person_membership'};
        case 'addressbook_contact_change':
            return {...ContactChangeActionFromJSONTyped(json, true), type: 'addressbook_contact_change'};
        case 'addressbook_group_change':
            return {...AddressGroupChangeActionFromJSONTyped(json, true), type: 'addressbook_group_change'};
        case 'admin_quorum_change':
            return {...AdminQuorumChangeActionFromJSONTyped(json, true), type: 'admin_quorum_change'};
        case 'backup_email_change':
            return {...BackupEmailChangeActionFromJSONTyped(json, true), type: 'backup_email_change'};
        case 'create_backup':
            return {...CreateBackupActionFromJSONTyped(json, true), type: 'create_backup'};
        case 'transaction':
            return {...TransactionActionFromJSONTyped(json, true), type: 'transaction'};
        case 'transactions_policy':
            return {...TransactionsPolicyActionFromJSONTyped(json, true), type: 'transactions_policy'};
        case 'user_change':
            return {...UserChangeActionFromJSONTyped(json, true), type: 'user_change'};
        case 'user_group_change':
            return {...UserGroupChangeActionFromJSONTyped(json, true), type: 'user_group_change'};
        case 'vault_group_change':
            return {...VaultGroupChangeActionFromJSONTyped(json, true), type: 'vault_group_change'};
        default:
            throw new Error(`No variant of UserAction exists with 'type=${json['type']}'`);
    }
}

export function UserActionToJSON(value?: UserAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'add_api_signer':
            return AddApiSignerActionToJSON(value);
        case 'add_device':
            return AddDeviceActionToJSON(value);
        case 'add_person_membership':
            return AddPersonMembershipActionToJSON(value);
        case 'addressbook_contact_change':
            return ContactChangeActionToJSON(value);
        case 'addressbook_group_change':
            return AddressGroupChangeActionToJSON(value);
        case 'admin_quorum_change':
            return AdminQuorumChangeActionToJSON(value);
        case 'backup_email_change':
            return BackupEmailChangeActionToJSON(value);
        case 'create_backup':
            return CreateBackupActionToJSON(value);
        case 'transaction':
            return TransactionActionToJSON(value);
        case 'transactions_policy':
            return TransactionsPolicyActionToJSON(value);
        case 'user_change':
            return UserChangeActionToJSON(value);
        case 'user_group_change':
            return UserGroupChangeActionToJSON(value);
        case 'vault_group_change':
            return VaultGroupChangeActionToJSON(value);
        default:
            throw new Error(`No variant of UserAction exists with 'type=${value['type']}'`);
    }

}

