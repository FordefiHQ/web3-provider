/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
    PricedAssetToJSONTyped,
} from './PricedAsset';
import type { Erc721Contract } from './Erc721Contract';
import {
    Erc721ContractFromJSON,
    Erc721ContractFromJSONTyped,
    Erc721ContractToJSON,
    Erc721ContractToJSONTyped,
} from './Erc721Contract';
import type { Price } from './Price';
import {
    PriceFromJSON,
    PriceFromJSONTyped,
    PriceToJSON,
    PriceToJSONTyped,
} from './Price';
import type { EnrichedEvmAddress } from './EnrichedEvmAddress';
import {
    EnrichedEvmAddressFromJSON,
    EnrichedEvmAddressFromJSONTyped,
    EnrichedEvmAddressToJSON,
    EnrichedEvmAddressToJSONTyped,
} from './EnrichedEvmAddress';

/**
 * 
 * @export
 * @interface Erc721AllowanceChange
 */
export interface Erc721AllowanceChange {
    /**
     * 
     * @type {PricedAsset}
     * @memberof Erc721AllowanceChange
     */
    pricedAsset: PricedAsset;
    /**
     * 
     * @type {string}
     * @memberof Erc721AllowanceChange
     */
    type: Erc721AllowanceChangeTypeEnum;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof Erc721AllowanceChange
     */
    owner: EnrichedEvmAddress;
    /**
     * 
     * @type {EnrichedEvmAddress}
     * @memberof Erc721AllowanceChange
     */
    operator: EnrichedEvmAddress;
    /**
     * 
     * @type {string}
     * @memberof Erc721AllowanceChange
     * @deprecated
     */
    tokenId: string;
    /**
     * 
     * @type {Erc721Contract}
     * @memberof Erc721AllowanceChange
     */
    tokenContract: Erc721Contract;
    /**
     * 
     * @type {Price}
     * @memberof Erc721AllowanceChange
     */
    price?: Price;
}


/**
 * @export
 */
export const Erc721AllowanceChangeTypeEnum = {
    erc721: 'erc721'
} as const;
export type Erc721AllowanceChangeTypeEnum = typeof Erc721AllowanceChangeTypeEnum[keyof typeof Erc721AllowanceChangeTypeEnum];


/**
 * Check if a given object implements the Erc721AllowanceChange interface.
 */
export function instanceOfErc721AllowanceChange(value: object): value is Erc721AllowanceChange {
    if (!('pricedAsset' in value) || value['pricedAsset'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('tokenId' in value) || value['tokenId'] === undefined) return false;
    if (!('tokenContract' in value) || value['tokenContract'] === undefined) return false;
    return true;
}

export function Erc721AllowanceChangeFromJSON(json: any): Erc721AllowanceChange {
    return Erc721AllowanceChangeFromJSONTyped(json, false);
}

export function Erc721AllowanceChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Erc721AllowanceChange {
    if (json == null) {
        return json;
    }
    return {
        
        'pricedAsset': PricedAssetFromJSON(json['priced_asset']),
        'type': json['type'],
        'owner': EnrichedEvmAddressFromJSON(json['owner']),
        'operator': EnrichedEvmAddressFromJSON(json['operator']),
        'tokenId': json['token_id'],
        'tokenContract': Erc721ContractFromJSON(json['token_contract']),
        'price': json['price'] == null ? undefined : PriceFromJSON(json['price']),
    };
}

export function Erc721AllowanceChangeToJSON(json: any): Erc721AllowanceChange {
    return Erc721AllowanceChangeToJSONTyped(json, false);
}

export function Erc721AllowanceChangeToJSONTyped(value?: Erc721AllowanceChange | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'priced_asset': PricedAssetToJSON(value['pricedAsset']),
        'type': value['type'],
        'owner': EnrichedEvmAddressToJSON(value['owner']),
        'operator': EnrichedEvmAddressToJSON(value['operator']),
        'token_id': value['tokenId'],
        'token_contract': Erc721ContractToJSON(value['tokenContract']),
        'price': PriceToJSON(value['price']),
    };
}

