/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ImportVaultDefaultOptions } from './ImportVaultDefaultOptions';
import {
    ImportVaultDefaultOptionsFromJSON,
    ImportVaultDefaultOptionsFromJSONTyped,
    ImportVaultDefaultOptionsToJSON,
    ImportVaultDefaultOptionsToJSONTyped,
} from './ImportVaultDefaultOptions';

/**
 * 
 * @export
 * @interface CreateCosmosVaultRequest
 */
export interface CreateCosmosVaultRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCosmosVaultRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCosmosVaultRequest
     * @deprecated
     */
    keysetId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCosmosVaultRequest
     */
    endUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCosmosVaultRequest
     */
    vaultGroupId?: string;
    /**
     * 
     * @type {ImportVaultDefaultOptions}
     * @memberof CreateCosmosVaultRequest
     */
    importVault?: ImportVaultDefaultOptions;
    /**
     * 
     * @type {string}
     * @memberof CreateCosmosVaultRequest
     */
    type: CreateCosmosVaultRequestTypeEnum;
}


/**
 * @export
 */
export const CreateCosmosVaultRequestTypeEnum = {
    cosmos: 'cosmos'
} as const;
export type CreateCosmosVaultRequestTypeEnum = typeof CreateCosmosVaultRequestTypeEnum[keyof typeof CreateCosmosVaultRequestTypeEnum];


/**
 * Check if a given object implements the CreateCosmosVaultRequest interface.
 */
export function instanceOfCreateCosmosVaultRequest(value: object): value is CreateCosmosVaultRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function CreateCosmosVaultRequestFromJSON(json: any): CreateCosmosVaultRequest {
    return CreateCosmosVaultRequestFromJSONTyped(json, false);
}

export function CreateCosmosVaultRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCosmosVaultRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'keysetId': json['keyset_id'] == null ? undefined : json['keyset_id'],
        'endUserId': json['end_user_id'] == null ? undefined : json['end_user_id'],
        'vaultGroupId': json['vault_group_id'] == null ? undefined : json['vault_group_id'],
        'importVault': json['import_vault'] == null ? undefined : ImportVaultDefaultOptionsFromJSON(json['import_vault']),
        'type': json['type'],
    };
}

export function CreateCosmosVaultRequestToJSON(json: any): CreateCosmosVaultRequest {
    return CreateCosmosVaultRequestToJSONTyped(json, false);
}

export function CreateCosmosVaultRequestToJSONTyped(value?: CreateCosmosVaultRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'keyset_id': value['keysetId'],
        'end_user_id': value['endUserId'],
        'vault_group_id': value['vaultGroupId'],
        'import_vault': ImportVaultDefaultOptionsToJSON(value['importVault']),
        'type': value['type'],
    };
}

