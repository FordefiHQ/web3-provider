/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CosmosTransactionResult } from './CosmosTransactionResult';
import {
    CosmosTransactionResultFromJSON,
    CosmosTransactionResultFromJSONTyped,
    CosmosTransactionResultToJSON,
} from './CosmosTransactionResult';
import type { CosmosTransactionState } from './CosmosTransactionState';
import {
    CosmosTransactionStateFromJSON,
    CosmosTransactionStateFromJSONTyped,
    CosmosTransactionStateToJSON,
} from './CosmosTransactionState';
import type { CosmosTransactionStateChange } from './CosmosTransactionStateChange';
import {
    CosmosTransactionStateChangeFromJSON,
    CosmosTransactionStateChangeFromJSONTyped,
    CosmosTransactionStateChangeToJSON,
} from './CosmosTransactionStateChange';
import type { CosmosTransactionTypeDetails } from './CosmosTransactionTypeDetails';
import {
    CosmosTransactionTypeDetailsFromJSON,
    CosmosTransactionTypeDetailsFromJSONTyped,
    CosmosTransactionTypeDetailsToJSON,
} from './CosmosTransactionTypeDetails';
import type { EnrichedCosmosBechAddress } from './EnrichedCosmosBechAddress';
import {
    EnrichedCosmosBechAddressFromJSON,
    EnrichedCosmosBechAddressFromJSONTyped,
    EnrichedCosmosBechAddressToJSON,
} from './EnrichedCosmosBechAddress';
import type { EnrichedCosmosChain } from './EnrichedCosmosChain';
import {
    EnrichedCosmosChainFromJSON,
    EnrichedCosmosChainFromJSONTyped,
    EnrichedCosmosChainToJSON,
} from './EnrichedCosmosChain';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
} from './ManagedTransactionData';
import type { SignDoc } from './SignDoc';
import {
    SignDocFromJSON,
    SignDocFromJSONTyped,
    SignDocToJSON,
} from './SignDoc';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { SignerInfo } from './SignerInfo';
import {
    SignerInfoFromJSON,
    SignerInfoFromJSONTyped,
    SignerInfoToJSON,
} from './SignerInfo';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
} from './TransactionDirection';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
} from './TransactionSpamState';

/**
 * 
 * @export
 * @interface CosmosTransaction
 */
export interface CosmosTransaction {
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CosmosTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CosmosTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof CosmosTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof CosmosTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof CosmosTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof CosmosTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {CosmosTransactionTypeDetails}
     * @memberof CosmosTransaction
     */
    cosmosTransactionTypeDetails: CosmosTransactionTypeDetails;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    memo?: string;
    /**
     * 
     * @type {EnrichedCosmosChain}
     * @memberof CosmosTransaction
     */
    chain: EnrichedCosmosChain;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof CosmosTransaction
     */
    from: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof CosmosTransaction
     */
    sender: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    type: CosmosTransactionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    explorerUrl?: string;
    /**
     * 
     * @type {CosmosTransactionState}
     * @memberof CosmosTransaction
     */
    state: CosmosTransactionState;
    /**
     * 
     * @type {Array<CosmosTransactionStateChange>}
     * @memberof CosmosTransaction
     */
    stateChanges: Array<CosmosTransactionStateChange>;
    /**
     * 
     * @type {Array<SignerInfo>}
     * @memberof CosmosTransaction
     */
    signersInfo: Array<SignerInfo>;
    /**
     * 
     * @type {CosmosTransactionResult}
     * @memberof CosmosTransaction
     */
    expectedResult?: CosmosTransactionResult;
    /**
     * 
     * @type {CosmosTransactionResult}
     * @memberof CosmosTransaction
     */
    minedResult?: CosmosTransactionResult;
    /**
     * 
     * @type {SignDoc}
     * @memberof CosmosTransaction
     */
    signDoc?: SignDoc;
}


/**
 * @export
 */
export const CosmosTransactionTypeEnum = {
    cosmosTransaction: 'cosmos_transaction'
} as const;
export type CosmosTransactionTypeEnum = typeof CosmosTransactionTypeEnum[keyof typeof CosmosTransactionTypeEnum];


/**
 * Check if a given object implements the CosmosTransaction interface.
 */
export function instanceOfCosmosTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "cosmosTransactionTypeDetails" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChanges" in value;
    isInstance = isInstance && "signersInfo" in value;

    return isInstance;
}

export function CosmosTransactionFromJSON(json: any): CosmosTransaction {
    return CosmosTransactionFromJSONTyped(json, false);
}

export function CosmosTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': !exists(json, 'managed_transaction_data') ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'spamState': !exists(json, 'spam_state') ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'cosmosTransactionTypeDetails': CosmosTransactionTypeDetailsFromJSON(json['cosmos_transaction_type_details']),
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'chain': EnrichedCosmosChainFromJSON(json['chain']),
        'from': EnrichedCosmosBechAddressFromJSON(json['from']),
        'sender': EnrichedCosmosBechAddressFromJSON(json['sender']),
        'type': json['type'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'explorerUrl': !exists(json, 'explorer_url') ? undefined : json['explorer_url'],
        'state': CosmosTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(CosmosTransactionStateChangeFromJSON)),
        'signersInfo': ((json['signers_info'] as Array<any>).map(SignerInfoFromJSON)),
        'expectedResult': !exists(json, 'expected_result') ? undefined : CosmosTransactionResultFromJSON(json['expected_result']),
        'minedResult': !exists(json, 'mined_result') ? undefined : CosmosTransactionResultFromJSON(json['mined_result']),
        'signDoc': !exists(json, 'sign_doc') ? undefined : SignDocFromJSON(json['sign_doc']),
    };
}

export function CosmosTransactionToJSON(value?: CosmosTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value.managedTransactionData),
        'signatures': ((value.signatures as Array<any>).map(SignatureToJSON)),
        'note': value.note,
        'spam_state': TransactionSpamStateToJSON(value.spamState),
        'direction': TransactionDirectionToJSON(value.direction),
        'cosmos_transaction_type_details': CosmosTransactionTypeDetailsToJSON(value.cosmosTransactionTypeDetails),
        'memo': value.memo,
        'chain': EnrichedCosmosChainToJSON(value.chain),
        'from': EnrichedCosmosBechAddressToJSON(value.from),
        'sender': EnrichedCosmosBechAddressToJSON(value.sender),
        'type': value.type,
        'hash': value.hash,
        'explorer_url': value.explorerUrl,
        'state': CosmosTransactionStateToJSON(value.state),
        'state_changes': ((value.stateChanges as Array<any>).map(CosmosTransactionStateChangeToJSON)),
        'signers_info': ((value.signersInfo as Array<any>).map(SignerInfoToJSON)),
        'expected_result': CosmosTransactionResultToJSON(value.expectedResult),
        'mined_result': CosmosTransactionResultToJSON(value.minedResult),
        'sign_doc': SignDocToJSON(value.signDoc),
    };
}

