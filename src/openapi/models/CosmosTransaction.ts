/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedCosmosBechAddress } from './EnrichedCosmosBechAddress';
import {
    EnrichedCosmosBechAddressFromJSON,
    EnrichedCosmosBechAddressFromJSONTyped,
    EnrichedCosmosBechAddressToJSON,
    EnrichedCosmosBechAddressToJSONTyped,
} from './EnrichedCosmosBechAddress';
import type { ManagedTransactionData } from './ManagedTransactionData';
import {
    ManagedTransactionDataFromJSON,
    ManagedTransactionDataFromJSONTyped,
    ManagedTransactionDataToJSON,
    ManagedTransactionDataToJSONTyped,
} from './ManagedTransactionData';
import type { PushableTransactionStateChange } from './PushableTransactionStateChange';
import {
    PushableTransactionStateChangeFromJSON,
    PushableTransactionStateChangeFromJSONTyped,
    PushableTransactionStateChangeToJSON,
    PushableTransactionStateChangeToJSONTyped,
} from './PushableTransactionStateChange';
import type { CosmosTransactionResult } from './CosmosTransactionResult';
import {
    CosmosTransactionResultFromJSON,
    CosmosTransactionResultFromJSONTyped,
    CosmosTransactionResultToJSON,
    CosmosTransactionResultToJSONTyped,
} from './CosmosTransactionResult';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
    PushableTransactionStateFromJSONTyped,
    PushableTransactionStateToJSON,
    PushableTransactionStateToJSONTyped,
} from './PushableTransactionState';
import type { SignDoc } from './SignDoc';
import {
    SignDocFromJSON,
    SignDocFromJSONTyped,
    SignDocToJSON,
    SignDocToJSONTyped,
} from './SignDoc';
import type { CosmosTransactionTypeDetails } from './CosmosTransactionTypeDetails';
import {
    CosmosTransactionTypeDetailsFromJSON,
    CosmosTransactionTypeDetailsFromJSONTyped,
    CosmosTransactionTypeDetailsToJSON,
    CosmosTransactionTypeDetailsToJSONTyped,
} from './CosmosTransactionTypeDetails';
import type { AmlPolicyMatchIncoming } from './AmlPolicyMatchIncoming';
import {
    AmlPolicyMatchIncomingFromJSON,
    AmlPolicyMatchIncomingFromJSONTyped,
    AmlPolicyMatchIncomingToJSON,
    AmlPolicyMatchIncomingToJSONTyped,
} from './AmlPolicyMatchIncoming';
import type { EnrichedCosmosChain } from './EnrichedCosmosChain';
import {
    EnrichedCosmosChainFromJSON,
    EnrichedCosmosChainFromJSONTyped,
    EnrichedCosmosChainToJSON,
    EnrichedCosmosChainToJSONTyped,
} from './EnrichedCosmosChain';
import type { SignerInfo } from './SignerInfo';
import {
    SignerInfoFromJSON,
    SignerInfoFromJSONTyped,
    SignerInfoToJSON,
    SignerInfoToJSONTyped,
} from './SignerInfo';
import type { TransactionSpamState } from './TransactionSpamState';
import {
    TransactionSpamStateFromJSON,
    TransactionSpamStateFromJSONTyped,
    TransactionSpamStateToJSON,
    TransactionSpamStateToJSONTyped,
} from './TransactionSpamState';
import type { TransactionDirection } from './TransactionDirection';
import {
    TransactionDirectionFromJSON,
    TransactionDirectionFromJSONTyped,
    TransactionDirectionToJSON,
    TransactionDirectionToJSONTyped,
} from './TransactionDirection';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
    SignatureToJSONTyped,
} from './Signature';
import type { AmlResults } from './AmlResults';
import {
    AmlResultsFromJSON,
    AmlResultsFromJSONTyped,
    AmlResultsToJSON,
    AmlResultsToJSONTyped,
} from './AmlResults';

/**
 * 
 * @export
 * @interface CosmosTransaction
 */
export interface CosmosTransaction {
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CosmosTransaction
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CosmosTransaction
     */
    modifiedAt: Date;
    /**
     * 
     * @type {ManagedTransactionData}
     * @memberof CosmosTransaction
     */
    managedTransactionData?: ManagedTransactionData;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof CosmosTransaction
     */
    signatures: Array<Signature>;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    note?: string;
    /**
     * 
     * @type {TransactionSpamState}
     * @memberof CosmosTransaction
     */
    spamState?: TransactionSpamState;
    /**
     * 
     * @type {TransactionDirection}
     * @memberof CosmosTransaction
     */
    direction: TransactionDirection;
    /**
     * 
     * @type {boolean}
     * @memberof CosmosTransaction
     */
    signedExternally?: boolean;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof CosmosTransaction
     */
    state: PushableTransactionState;
    /**
     * 
     * @type {Array<PushableTransactionStateChange>}
     * @memberof CosmosTransaction
     */
    stateChanges: Array<PushableTransactionStateChange>;
    /**
     * 
     * @type {AmlResults}
     * @memberof CosmosTransaction
     */
    amlResults?: AmlResults;
    /**
     * 
     * @type {AmlPolicyMatchIncoming}
     * @memberof CosmosTransaction
     */
    incomingAmlPolicyMatch?: AmlPolicyMatchIncoming;
    /**
     * 
     * @type {CosmosTransactionTypeDetails}
     * @memberof CosmosTransaction
     */
    cosmosTransactionTypeDetails: CosmosTransactionTypeDetails;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    memo?: string;
    /**
     * 
     * @type {EnrichedCosmosChain}
     * @memberof CosmosTransaction
     */
    chain: EnrichedCosmosChain;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof CosmosTransaction
     */
    from: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof CosmosTransaction
     */
    sender: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    type: CosmosTransactionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosTransaction
     */
    explorerUrl?: string;
    /**
     * 
     * @type {Array<SignerInfo>}
     * @memberof CosmosTransaction
     */
    signersInfo: Array<SignerInfo>;
    /**
     * 
     * @type {CosmosTransactionResult}
     * @memberof CosmosTransaction
     */
    expectedResult?: CosmosTransactionResult;
    /**
     * 
     * @type {CosmosTransactionResult}
     * @memberof CosmosTransaction
     */
    minedResult?: CosmosTransactionResult;
    /**
     * 
     * @type {SignDoc}
     * @memberof CosmosTransaction
     */
    signDoc?: SignDoc;
}


/**
 * @export
 */
export const CosmosTransactionTypeEnum = {
    cosmosTransaction: 'cosmos_transaction'
} as const;
export type CosmosTransactionTypeEnum = typeof CosmosTransactionTypeEnum[keyof typeof CosmosTransactionTypeEnum];


/**
 * Check if a given object implements the CosmosTransaction interface.
 */
export function instanceOfCosmosTransaction(value: object): value is CosmosTransaction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    if (!('signatures' in value) || value['signatures'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChanges' in value) || value['stateChanges'] === undefined) return false;
    if (!('cosmosTransactionTypeDetails' in value) || value['cosmosTransactionTypeDetails'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('from' in value) || value['from'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('signersInfo' in value) || value['signersInfo'] === undefined) return false;
    return true;
}

export function CosmosTransactionFromJSON(json: any): CosmosTransaction {
    return CosmosTransactionFromJSONTyped(json, false);
}

export function CosmosTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'managedTransactionData': json['managed_transaction_data'] == null ? undefined : ManagedTransactionDataFromJSON(json['managed_transaction_data']),
        'signatures': ((json['signatures'] as Array<any>).map(SignatureFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'spamState': json['spam_state'] == null ? undefined : TransactionSpamStateFromJSON(json['spam_state']),
        'direction': TransactionDirectionFromJSON(json['direction']),
        'signedExternally': json['signed_externally'] == null ? undefined : json['signed_externally'],
        'state': PushableTransactionStateFromJSON(json['state']),
        'stateChanges': ((json['state_changes'] as Array<any>).map(PushableTransactionStateChangeFromJSON)),
        'amlResults': json['aml_results'] == null ? undefined : AmlResultsFromJSON(json['aml_results']),
        'incomingAmlPolicyMatch': json['incoming_aml_policy_match'] == null ? undefined : AmlPolicyMatchIncomingFromJSON(json['incoming_aml_policy_match']),
        'cosmosTransactionTypeDetails': CosmosTransactionTypeDetailsFromJSON(json['cosmos_transaction_type_details']),
        'memo': json['memo'] == null ? undefined : json['memo'],
        'chain': EnrichedCosmosChainFromJSON(json['chain']),
        'from': EnrichedCosmosBechAddressFromJSON(json['from']),
        'sender': EnrichedCosmosBechAddressFromJSON(json['sender']),
        'type': json['type'],
        'hash': json['hash'] == null ? undefined : json['hash'],
        'explorerUrl': json['explorer_url'] == null ? undefined : json['explorer_url'],
        'signersInfo': ((json['signers_info'] as Array<any>).map(SignerInfoFromJSON)),
        'expectedResult': json['expected_result'] == null ? undefined : CosmosTransactionResultFromJSON(json['expected_result']),
        'minedResult': json['mined_result'] == null ? undefined : CosmosTransactionResultFromJSON(json['mined_result']),
        'signDoc': json['sign_doc'] == null ? undefined : SignDocFromJSON(json['sign_doc']),
    };
}

export function CosmosTransactionToJSON(json: any): CosmosTransaction {
    return CosmosTransactionToJSONTyped(json, false);
}

export function CosmosTransactionToJSONTyped(value?: CosmosTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'modified_at': ((value['modifiedAt']).toISOString()),
        'managed_transaction_data': ManagedTransactionDataToJSON(value['managedTransactionData']),
        'signatures': ((value['signatures'] as Array<any>).map(SignatureToJSON)),
        'note': value['note'],
        'spam_state': TransactionSpamStateToJSON(value['spamState']),
        'direction': TransactionDirectionToJSON(value['direction']),
        'signed_externally': value['signedExternally'],
        'state': PushableTransactionStateToJSON(value['state']),
        'state_changes': ((value['stateChanges'] as Array<any>).map(PushableTransactionStateChangeToJSON)),
        'aml_results': AmlResultsToJSON(value['amlResults']),
        'incoming_aml_policy_match': AmlPolicyMatchIncomingToJSON(value['incomingAmlPolicyMatch']),
        'cosmos_transaction_type_details': CosmosTransactionTypeDetailsToJSON(value['cosmosTransactionTypeDetails']),
        'memo': value['memo'],
        'chain': EnrichedCosmosChainToJSON(value['chain']),
        'from': EnrichedCosmosBechAddressToJSON(value['from']),
        'sender': EnrichedCosmosBechAddressToJSON(value['sender']),
        'type': value['type'],
        'hash': value['hash'],
        'explorer_url': value['explorerUrl'],
        'signers_info': ((value['signersInfo'] as Array<any>).map(SignerInfoToJSON)),
        'expected_result': CosmosTransactionResultToJSON(value['expectedResult']),
        'mined_result': CosmosTransactionResultToJSON(value['minedResult']),
        'sign_doc': SignDocToJSON(value['signDoc']),
    };
}

