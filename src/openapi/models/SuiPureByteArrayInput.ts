/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SuiPureByteArrayInput
 */
export interface SuiPureByteArrayInput {
    /**
     * 
     * @type {string}
     * @memberof SuiPureByteArrayInput
     */
    type: SuiPureByteArrayInputTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SuiPureByteArrayInput
     */
    value: string;
}


/**
 * @export
 */
export const SuiPureByteArrayInputTypeEnum = {
    byteArrayPureInput: 'byte_array_pure_input'
} as const;
export type SuiPureByteArrayInputTypeEnum = typeof SuiPureByteArrayInputTypeEnum[keyof typeof SuiPureByteArrayInputTypeEnum];


/**
 * Check if a given object implements the SuiPureByteArrayInput interface.
 */
export function instanceOfSuiPureByteArrayInput(value: object): value is SuiPureByteArrayInput {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function SuiPureByteArrayInputFromJSON(json: any): SuiPureByteArrayInput {
    return SuiPureByteArrayInputFromJSONTyped(json, false);
}

export function SuiPureByteArrayInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuiPureByteArrayInput {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'value': json['value'],
    };
}

export function SuiPureByteArrayInputToJSON(json: any): SuiPureByteArrayInput {
    return SuiPureByteArrayInputToJSONTyped(json, false);
}

export function SuiPureByteArrayInputToJSONTyped(value?: SuiPureByteArrayInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'value': value['value'],
    };
}

