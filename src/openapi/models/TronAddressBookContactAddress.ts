/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedTronChain } from './EnrichedTronChain';
import {
    EnrichedTronChainFromJSON,
    EnrichedTronChainFromJSONTyped,
    EnrichedTronChainToJSON,
    EnrichedTronChainToJSONTyped,
} from './EnrichedTronChain';

/**
 * 
 * @export
 * @interface TronAddressBookContactAddress
 */
export interface TronAddressBookContactAddress {
    /**
     * 
     * @type {string}
     * @memberof TronAddressBookContactAddress
     */
    chainType: TronAddressBookContactAddressChainTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TronAddressBookContactAddress
     */
    address: string;
    /**
     * 
     * @type {Array<EnrichedTronChain>}
     * @memberof TronAddressBookContactAddress
     */
    chains: Array<EnrichedTronChain>;
    /**
     * 
     * @type {string}
     * @memberof TronAddressBookContactAddress
     */
    memo?: string;
}


/**
 * @export
 */
export const TronAddressBookContactAddressChainTypeEnum = {
    tron: 'tron'
} as const;
export type TronAddressBookContactAddressChainTypeEnum = typeof TronAddressBookContactAddressChainTypeEnum[keyof typeof TronAddressBookContactAddressChainTypeEnum];


/**
 * Check if a given object implements the TronAddressBookContactAddress interface.
 */
export function instanceOfTronAddressBookContactAddress(value: object): value is TronAddressBookContactAddress {
    if (!('chainType' in value) || value['chainType'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('chains' in value) || value['chains'] === undefined) return false;
    return true;
}

export function TronAddressBookContactAddressFromJSON(json: any): TronAddressBookContactAddress {
    return TronAddressBookContactAddressFromJSONTyped(json, false);
}

export function TronAddressBookContactAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronAddressBookContactAddress {
    if (json == null) {
        return json;
    }
    return {
        
        'chainType': json['chain_type'],
        'address': json['address'],
        'chains': ((json['chains'] as Array<any>).map(EnrichedTronChainFromJSON)),
        'memo': json['memo'] == null ? undefined : json['memo'],
    };
}

export function TronAddressBookContactAddressToJSON(json: any): TronAddressBookContactAddress {
    return TronAddressBookContactAddressToJSONTyped(json, false);
}

export function TronAddressBookContactAddressToJSONTyped(value?: TronAddressBookContactAddress | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chain_type': value['chainType'],
        'address': value['address'],
        'chains': ((value['chains'] as Array<any>).map(EnrichedTronChainToJSON)),
        'memo': value['memo'],
    };
}

