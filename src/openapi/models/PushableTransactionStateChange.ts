/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
    PricedAssetToJSONTyped,
} from './PricedAsset';
import type { EvmPrices } from './EvmPrices';
import {
    EvmPricesFromJSON,
    EvmPricesFromJSONTyped,
    EvmPricesToJSON,
    EvmPricesToJSONTyped,
} from './EvmPrices';
import type { PushableTransactionState } from './PushableTransactionState';
import {
    PushableTransactionStateFromJSON,
    PushableTransactionStateFromJSONTyped,
    PushableTransactionStateToJSON,
    PushableTransactionStateToJSONTyped,
} from './PushableTransactionState';
import type { StateChangeReason } from './StateChangeReason';
import {
    StateChangeReasonFromJSON,
    StateChangeReasonFromJSONTyped,
    StateChangeReasonToJSON,
    StateChangeReasonToJSONTyped,
} from './StateChangeReason';

/**
 * 
 * @export
 * @interface PushableTransactionStateChange
 */
export interface PushableTransactionStateChange {
    /**
     * 
     * @type {Date}
     * @memberof PushableTransactionStateChange
     */
    changedAt: Date;
    /**
     * 
     * @type {StateChangeReason}
     * @memberof PushableTransactionStateChange
     */
    reason?: StateChangeReason;
    /**
     * 
     * @type {Array<PricedAsset>}
     * @memberof PushableTransactionStateChange
     * @deprecated
     */
    assetPrices?: Array<PricedAsset>;
    /**
     * 
     * @type {EvmPrices}
     * @memberof PushableTransactionStateChange
     */
    prices?: EvmPrices;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof PushableTransactionStateChange
     */
    previousState?: PushableTransactionState;
    /**
     * 
     * @type {PushableTransactionState}
     * @memberof PushableTransactionStateChange
     */
    newState: PushableTransactionState;
}



/**
 * Check if a given object implements the PushableTransactionStateChange interface.
 */
export function instanceOfPushableTransactionStateChange(value: object): value is PushableTransactionStateChange {
    if (!('changedAt' in value) || value['changedAt'] === undefined) return false;
    if (!('newState' in value) || value['newState'] === undefined) return false;
    return true;
}

export function PushableTransactionStateChangeFromJSON(json: any): PushableTransactionStateChange {
    return PushableTransactionStateChangeFromJSONTyped(json, false);
}

export function PushableTransactionStateChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PushableTransactionStateChange {
    if (json == null) {
        return json;
    }
    return {
        
        'changedAt': (new Date(json['changed_at'])),
        'reason': json['reason'] == null ? undefined : StateChangeReasonFromJSON(json['reason']),
        'assetPrices': json['asset_prices'] == null ? undefined : ((json['asset_prices'] as Array<any>).map(PricedAssetFromJSON)),
        'prices': json['prices'] == null ? undefined : EvmPricesFromJSON(json['prices']),
        'previousState': json['previous_state'] == null ? undefined : PushableTransactionStateFromJSON(json['previous_state']),
        'newState': PushableTransactionStateFromJSON(json['new_state']),
    };
}

export function PushableTransactionStateChangeToJSON(json: any): PushableTransactionStateChange {
    return PushableTransactionStateChangeToJSONTyped(json, false);
}

export function PushableTransactionStateChangeToJSONTyped(value?: PushableTransactionStateChange | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'changed_at': ((value['changedAt']).toISOString()),
        'reason': StateChangeReasonToJSON(value['reason']),
        'asset_prices': value['assetPrices'] == null ? undefined : ((value['assetPrices'] as Array<any>).map(PricedAssetToJSON)),
        'prices': EvmPricesToJSON(value['prices']),
        'previous_state': PushableTransactionStateToJSON(value['previousState']),
        'new_state': PushableTransactionStateToJSON(value['newState']),
    };
}

