/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateCosmosTransferRequestMaxValue
 */
export interface CreateCosmosTransferRequestMaxValue {
    /**
     * 
     * @type {string}
     * @memberof CreateCosmosTransferRequestMaxValue
     */
    type: CreateCosmosTransferRequestMaxValueTypeEnum;
}


/**
 * @export
 */
export const CreateCosmosTransferRequestMaxValueTypeEnum = {
    max: 'max'
} as const;
export type CreateCosmosTransferRequestMaxValueTypeEnum = typeof CreateCosmosTransferRequestMaxValueTypeEnum[keyof typeof CreateCosmosTransferRequestMaxValueTypeEnum];


/**
 * Check if a given object implements the CreateCosmosTransferRequestMaxValue interface.
 */
export function instanceOfCreateCosmosTransferRequestMaxValue(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CreateCosmosTransferRequestMaxValueFromJSON(json: any): CreateCosmosTransferRequestMaxValue {
    return CreateCosmosTransferRequestMaxValueFromJSONTyped(json, false);
}

export function CreateCosmosTransferRequestMaxValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCosmosTransferRequestMaxValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
    };
}

export function CreateCosmosTransferRequestMaxValueToJSON(value?: CreateCosmosTransferRequestMaxValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

