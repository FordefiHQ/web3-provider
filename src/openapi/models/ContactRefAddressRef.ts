/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AptosAddressBookContactAddressRef } from './AptosAddressBookContactAddressRef';
import {
    AptosAddressBookContactAddressRefFromJSONTyped,
} from './AptosAddressBookContactAddressRef';
import type { CosmosAddressBookContactAddressRef } from './CosmosAddressBookContactAddressRef';
import {
    CosmosAddressBookContactAddressRefFromJSONTyped,
} from './CosmosAddressBookContactAddressRef';
import type { EVMAddressBookContactAddressRef } from './EVMAddressBookContactAddressRef';
import {
    EVMAddressBookContactAddressRefFromJSONTyped,
} from './EVMAddressBookContactAddressRef';
import type { SolanaAddressBookContactAddressRef } from './SolanaAddressBookContactAddressRef';
import {
    SolanaAddressBookContactAddressRefFromJSONTyped,
} from './SolanaAddressBookContactAddressRef';
import type { StacksAddressBookContactAddressRef } from './StacksAddressBookContactAddressRef';
import {
    StacksAddressBookContactAddressRefFromJSONTyped,
} from './StacksAddressBookContactAddressRef';
import type { StarknetAddressBookContactAddressRef } from './StarknetAddressBookContactAddressRef';
import {
    StarknetAddressBookContactAddressRefFromJSONTyped,
} from './StarknetAddressBookContactAddressRef';
import type { SuiAddressBookContactAddressRef } from './SuiAddressBookContactAddressRef';
import {
    SuiAddressBookContactAddressRefFromJSONTyped,
} from './SuiAddressBookContactAddressRef';
import type { TonAddressBookContactAddressRef } from './TonAddressBookContactAddressRef';
import {
    TonAddressBookContactAddressRefFromJSONTyped,
} from './TonAddressBookContactAddressRef';
import type { TronAddressBookContactAddressRef } from './TronAddressBookContactAddressRef';
import {
    TronAddressBookContactAddressRefFromJSONTyped,
} from './TronAddressBookContactAddressRef';
import type { UtxoAddressBookContactAddressRef } from './UtxoAddressBookContactAddressRef';
import {
    UtxoAddressBookContactAddressRefFromJSONTyped,
} from './UtxoAddressBookContactAddressRef';

/**
 * 
 * @export
 * @type ContactRefAddressRef
 */
export type ContactRefAddressRef = { chainType: 'aptos' } & AptosAddressBookContactAddressRef | { chainType: 'cosmos' } & CosmosAddressBookContactAddressRef | { chainType: 'evm' } & EVMAddressBookContactAddressRef | { chainType: 'solana' } & SolanaAddressBookContactAddressRef | { chainType: 'stacks' } & StacksAddressBookContactAddressRef | { chainType: 'starknet' } & StarknetAddressBookContactAddressRef | { chainType: 'sui' } & SuiAddressBookContactAddressRef | { chainType: 'ton' } & TonAddressBookContactAddressRef | { chainType: 'tron' } & TronAddressBookContactAddressRef | { chainType: 'utxo' } & UtxoAddressBookContactAddressRef;

export function ContactRefAddressRefFromJSON(json: any): ContactRefAddressRef {
    return ContactRefAddressRefFromJSONTyped(json, false);
}

function ContactRefAddressRefFromJSONTyped(json: any, _ignoreDiscriminator: boolean): ContactRefAddressRef {
    if (json == null) {
        return json;
    }
    switch (json['chain_type']) {
        case 'aptos':
            return Object.assign({}, AptosAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'aptos' } as const);
        case 'cosmos':
            return Object.assign({}, CosmosAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'cosmos' } as const);
        case 'evm':
            return Object.assign({}, EVMAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'evm' } as const);
        case 'solana':
            return Object.assign({}, SolanaAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'solana' } as const);
        case 'stacks':
            return Object.assign({}, StacksAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'stacks' } as const);
        case 'starknet':
            return Object.assign({}, StarknetAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'starknet' } as const);
        case 'sui':
            return Object.assign({}, SuiAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'sui' } as const);
        case 'ton':
            return Object.assign({}, TonAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'ton' } as const);
        case 'tron':
            return Object.assign({}, TronAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'tron' } as const);
        case 'utxo':
            return Object.assign({}, UtxoAddressBookContactAddressRefFromJSONTyped(json, true), { chainType: 'utxo' } as const);
        default:
            throw new Error(`No variant of ContactRefAddressRef exists with 'chainType=${json['chainType']}'`);
    }
}

