/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateTransactionWithWaitResponseState } from './CreateTransactionWithWaitResponseState';
import {
    CreateTransactionWithWaitResponseStateFromJSON,
    CreateTransactionWithWaitResponseStateFromJSONTyped,
    CreateTransactionWithWaitResponseStateToJSON,
} from './CreateTransactionWithWaitResponseState';

/**
 * 
 * @export
 * @interface CreateTransactionWithWaitResponse
 */
export interface CreateTransactionWithWaitResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateTransactionWithWaitResponse
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CreateTransactionWithWaitResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreateTransactionWithWaitResponse
     */
    modifiedAt: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateTransactionWithWaitResponse
     */
    signatures: Array<string>;
    /**
     * 
     * @type {CreateTransactionWithWaitResponseState}
     * @memberof CreateTransactionWithWaitResponse
     */
    state: CreateTransactionWithWaitResponseState;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTransactionWithWaitResponse
     */
    hasTimedOut: boolean;
}

/**
 * Check if a given object implements the CreateTransactionWithWaitResponse interface.
 */
export function instanceOfCreateTransactionWithWaitResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "signatures" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "hasTimedOut" in value;

    return isInstance;
}

export function CreateTransactionWithWaitResponseFromJSON(json: any): CreateTransactionWithWaitResponse {
    return CreateTransactionWithWaitResponseFromJSONTyped(json, false);
}

export function CreateTransactionWithWaitResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTransactionWithWaitResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'modifiedAt': (new Date(json['modified_at'])),
        'signatures': json['signatures'],
        'state': CreateTransactionWithWaitResponseStateFromJSON(json['state']),
        'hasTimedOut': json['has_timed_out'],
    };
}

export function CreateTransactionWithWaitResponseToJSON(value?: CreateTransactionWithWaitResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'modified_at': (value.modifiedAt.toISOString()),
        'signatures': value.signatures,
        'state': CreateTransactionWithWaitResponseStateToJSON(value.state),
        'has_timed_out': value.hasTimedOut,
    };
}

