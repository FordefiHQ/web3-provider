/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApiKey } from './ApiKey';
import {
    ApiKeyFromJSON,
    ApiKeyFromJSONTyped,
    ApiKeyToJSON,
} from './ApiKey';
import type { ApiKeyType } from './ApiKeyType';
import {
    ApiKeyTypeFromJSON,
    ApiKeyTypeFromJSONTyped,
    ApiKeyTypeToJSON,
} from './ApiKeyType';
import type { ExchangeType } from './ExchangeType';
import {
    ExchangeTypeFromJSON,
    ExchangeTypeFromJSONTyped,
    ExchangeTypeToJSON,
} from './ExchangeType';

/**
 * 
 * @export
 * @interface CreateExchangeVaultRequest
 */
export interface CreateExchangeVaultRequest {
    /**
     * 
     * @type {ExchangeType}
     * @memberof CreateExchangeVaultRequest
     */
    exchangeType: ExchangeType;
    /**
     * 
     * @type {string}
     * @memberof CreateExchangeVaultRequest
     */
    name: string;
    /**
     * 
     * @type {ApiKey}
     * @memberof CreateExchangeVaultRequest
     */
    apiKey: ApiKey;
    /**
     * 
     * @type {ApiKeyType}
     * @memberof CreateExchangeVaultRequest
     */
    apiKeyType?: ApiKeyType;
    /**
     * 
     * @type {string}
     * @memberof CreateExchangeVaultRequest
     */
    vaultGroupId?: string;
}

/**
 * Check if a given object implements the CreateExchangeVaultRequest interface.
 */
export function instanceOfCreateExchangeVaultRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "exchangeType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "apiKey" in value;

    return isInstance;
}

export function CreateExchangeVaultRequestFromJSON(json: any): CreateExchangeVaultRequest {
    return CreateExchangeVaultRequestFromJSONTyped(json, false);
}

export function CreateExchangeVaultRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateExchangeVaultRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exchangeType': ExchangeTypeFromJSON(json['exchange_type']),
        'name': json['name'],
        'apiKey': ApiKeyFromJSON(json['api_key']),
        'apiKeyType': !exists(json, 'api_key_type') ? undefined : ApiKeyTypeFromJSON(json['api_key_type']),
        'vaultGroupId': !exists(json, 'vault_group_id') ? undefined : json['vault_group_id'],
    };
}

export function CreateExchangeVaultRequestToJSON(value?: CreateExchangeVaultRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exchange_type': ExchangeTypeToJSON(value.exchangeType),
        'name': value.name,
        'api_key': ApiKeyToJSON(value.apiKey),
        'api_key_type': ApiKeyTypeToJSON(value.apiKeyType),
        'vault_group_id': value.vaultGroupId,
    };
}

