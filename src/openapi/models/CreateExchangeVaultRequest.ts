/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApiKeyType } from './ApiKeyType';
import {
    ApiKeyTypeFromJSON,
    ApiKeyTypeFromJSONTyped,
    ApiKeyTypeToJSON,
    ApiKeyTypeToJSONTyped,
} from './ApiKeyType';
import type { ApiKey } from './ApiKey';
import {
    ApiKeyFromJSON,
    ApiKeyFromJSONTyped,
    ApiKeyToJSON,
    ApiKeyToJSONTyped,
} from './ApiKey';
import type { ExchangeType } from './ExchangeType';
import {
    ExchangeTypeFromJSON,
    ExchangeTypeFromJSONTyped,
    ExchangeTypeToJSON,
    ExchangeTypeToJSONTyped,
} from './ExchangeType';

/**
 * 
 * @export
 * @interface CreateExchangeVaultRequest
 */
export interface CreateExchangeVaultRequest {
    /**
     * 
     * @type {ExchangeType}
     * @memberof CreateExchangeVaultRequest
     */
    exchangeType: ExchangeType;
    /**
     * 
     * @type {string}
     * @memberof CreateExchangeVaultRequest
     */
    name: string;
    /**
     * 
     * @type {ApiKey}
     * @memberof CreateExchangeVaultRequest
     */
    apiKey: ApiKey;
    /**
     * 
     * @type {ApiKeyType}
     * @memberof CreateExchangeVaultRequest
     */
    apiKeyType?: ApiKeyType;
    /**
     * 
     * @type {string}
     * @memberof CreateExchangeVaultRequest
     */
    vaultGroupId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExchangeVaultRequest
     */
    accountId?: string;
}



/**
 * Check if a given object implements the CreateExchangeVaultRequest interface.
 */
export function instanceOfCreateExchangeVaultRequest(value: object): value is CreateExchangeVaultRequest {
    if (!('exchangeType' in value) || value['exchangeType'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('apiKey' in value) || value['apiKey'] === undefined) return false;
    return true;
}

export function CreateExchangeVaultRequestFromJSON(json: any): CreateExchangeVaultRequest {
    return CreateExchangeVaultRequestFromJSONTyped(json, false);
}

export function CreateExchangeVaultRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateExchangeVaultRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'exchangeType': ExchangeTypeFromJSON(json['exchange_type']),
        'name': json['name'],
        'apiKey': ApiKeyFromJSON(json['api_key']),
        'apiKeyType': json['api_key_type'] == null ? undefined : ApiKeyTypeFromJSON(json['api_key_type']),
        'vaultGroupId': json['vault_group_id'] == null ? undefined : json['vault_group_id'],
        'accountId': json['account_id'] == null ? undefined : json['account_id'],
    };
}

export function CreateExchangeVaultRequestToJSON(json: any): CreateExchangeVaultRequest {
    return CreateExchangeVaultRequestToJSONTyped(json, false);
}

export function CreateExchangeVaultRequestToJSONTyped(value?: CreateExchangeVaultRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'exchange_type': ExchangeTypeToJSON(value['exchangeType']),
        'name': value['name'],
        'api_key': ApiKeyToJSON(value['apiKey']),
        'api_key_type': ApiKeyTypeToJSON(value['apiKeyType']),
        'vault_group_id': value['vaultGroupId'],
        'account_id': value['accountId'],
    };
}

