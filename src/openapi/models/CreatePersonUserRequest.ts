/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
} from './UserRole';

/**
 * 
 * @export
 * @interface CreatePersonUserRequest
 */
export interface CreatePersonUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonUserRequest
     */
    userType: CreatePersonUserRequestUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonUserRequest
     */
    userEmail: string;
    /**
     * 
     * @type {UserRole}
     * @memberof CreatePersonUserRequest
     */
    userRole: UserRole;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreatePersonUserRequest
     */
    userGroupIds?: Array<string>;
}


/**
 * @export
 */
export const CreatePersonUserRequestUserTypeEnum = {
    person: 'person'
} as const;
export type CreatePersonUserRequestUserTypeEnum = typeof CreatePersonUserRequestUserTypeEnum[keyof typeof CreatePersonUserRequestUserTypeEnum];


/**
 * Check if a given object implements the CreatePersonUserRequest interface.
 */
export function instanceOfCreatePersonUserRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userType" in value;
    isInstance = isInstance && "userEmail" in value;
    isInstance = isInstance && "userRole" in value;

    return isInstance;
}

export function CreatePersonUserRequestFromJSON(json: any): CreatePersonUserRequest {
    return CreatePersonUserRequestFromJSONTyped(json, false);
}

export function CreatePersonUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePersonUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userType': json['user_type'],
        'userEmail': json['user_email'],
        'userRole': UserRoleFromJSON(json['user_role']),
        'userGroupIds': !exists(json, 'user_group_ids') ? undefined : json['user_group_ids'],
    };
}

export function CreatePersonUserRequestToJSON(value?: CreatePersonUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user_type': value.userType,
        'user_email': value.userEmail,
        'user_role': UserRoleToJSON(value.userRole),
        'user_group_ids': value.userGroupIds,
    };
}

