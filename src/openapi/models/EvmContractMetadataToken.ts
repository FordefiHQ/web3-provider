/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    Erc1155,
    instanceOfErc1155,
    Erc1155FromJSON,
    Erc1155FromJSONTyped,
    Erc1155ToJSON,
} from './Erc1155';
import {
    Erc20,
    instanceOfErc20,
    Erc20FromJSON,
    Erc20FromJSONTyped,
    Erc20ToJSON,
} from './Erc20';
import {
    Erc721,
    instanceOfErc721,
    Erc721FromJSON,
    Erc721FromJSONTyped,
    Erc721ToJSON,
} from './Erc721';

/**
 * @type EvmContractMetadataToken
 * 
 * @export
 */
export type EvmContractMetadataToken = { type: 'erc1155' } & Erc1155 | { type: 'erc20' } & Erc20 | { type: 'erc721' } & Erc721;

export function EvmContractMetadataTokenFromJSON(json: any): EvmContractMetadataToken {
    return EvmContractMetadataTokenFromJSONTyped(json, false);
}

export function EvmContractMetadataTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvmContractMetadataToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'erc1155':
            return {...Erc1155FromJSONTyped(json, true), type: 'erc1155'};
        case 'erc20':
            return {...Erc20FromJSONTyped(json, true), type: 'erc20'};
        case 'erc721':
            return {...Erc721FromJSONTyped(json, true), type: 'erc721'};
        default:
            throw new Error(`No variant of EvmContractMetadataToken exists with 'type=${json['type']}'`);
    }
}

export function EvmContractMetadataTokenToJSON(value?: EvmContractMetadataToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'erc1155':
            return Erc1155ToJSON(value);
        case 'erc20':
            return Erc20ToJSON(value);
        case 'erc721':
            return Erc721ToJSON(value);
        default:
            throw new Error(`No variant of EvmContractMetadataToken exists with 'type=${value['type']}'`);
    }

}

