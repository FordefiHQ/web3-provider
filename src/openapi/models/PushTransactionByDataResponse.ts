/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AptosMessage } from './AptosMessage';
import {
    instanceOfAptosMessage,
    AptosMessageFromJSON,
    AptosMessageFromJSONTyped,
    AptosMessageToJSON,
} from './AptosMessage';
import type { AptosTransaction } from './AptosTransaction';
import {
    instanceOfAptosTransaction,
    AptosTransactionFromJSON,
    AptosTransactionFromJSONTyped,
    AptosTransactionToJSON,
} from './AptosTransaction';
import type { BlackBoxSignature } from './BlackBoxSignature';
import {
    instanceOfBlackBoxSignature,
    BlackBoxSignatureFromJSON,
    BlackBoxSignatureFromJSONTyped,
    BlackBoxSignatureToJSON,
} from './BlackBoxSignature';
import type { CosmosMessage } from './CosmosMessage';
import {
    instanceOfCosmosMessage,
    CosmosMessageFromJSON,
    CosmosMessageFromJSONTyped,
    CosmosMessageToJSON,
} from './CosmosMessage';
import type { CosmosTransaction } from './CosmosTransaction';
import {
    instanceOfCosmosTransaction,
    CosmosTransactionFromJSON,
    CosmosTransactionFromJSONTyped,
    CosmosTransactionToJSON,
} from './CosmosTransaction';
import type { EvmMessage } from './EvmMessage';
import {
    instanceOfEvmMessage,
    EvmMessageFromJSON,
    EvmMessageFromJSONTyped,
    EvmMessageToJSON,
} from './EvmMessage';
import type { EvmTransaction } from './EvmTransaction';
import {
    instanceOfEvmTransaction,
    EvmTransactionFromJSON,
    EvmTransactionFromJSONTyped,
    EvmTransactionToJSON,
} from './EvmTransaction';
import type { ExchangeTransaction } from './ExchangeTransaction';
import {
    instanceOfExchangeTransaction,
    ExchangeTransactionFromJSON,
    ExchangeTransactionFromJSONTyped,
    ExchangeTransactionToJSON,
} from './ExchangeTransaction';
import type { SolanaMessage } from './SolanaMessage';
import {
    instanceOfSolanaMessage,
    SolanaMessageFromJSON,
    SolanaMessageFromJSONTyped,
    SolanaMessageToJSON,
} from './SolanaMessage';
import type { SolanaTransaction } from './SolanaTransaction';
import {
    instanceOfSolanaTransaction,
    SolanaTransactionFromJSON,
    SolanaTransactionFromJSONTyped,
    SolanaTransactionToJSON,
} from './SolanaTransaction';
import type { StacksTransaction } from './StacksTransaction';
import {
    instanceOfStacksTransaction,
    StacksTransactionFromJSON,
    StacksTransactionFromJSONTyped,
    StacksTransactionToJSON,
} from './StacksTransaction';
import type { StarknetMessage } from './StarknetMessage';
import {
    instanceOfStarknetMessage,
    StarknetMessageFromJSON,
    StarknetMessageFromJSONTyped,
    StarknetMessageToJSON,
} from './StarknetMessage';
import type { StarknetTransaction } from './StarknetTransaction';
import {
    instanceOfStarknetTransaction,
    StarknetTransactionFromJSON,
    StarknetTransactionFromJSONTyped,
    StarknetTransactionToJSON,
} from './StarknetTransaction';
import type { SuiMessage } from './SuiMessage';
import {
    instanceOfSuiMessage,
    SuiMessageFromJSON,
    SuiMessageFromJSONTyped,
    SuiMessageToJSON,
} from './SuiMessage';
import type { SuiTransaction } from './SuiTransaction';
import {
    instanceOfSuiTransaction,
    SuiTransactionFromJSON,
    SuiTransactionFromJSONTyped,
    SuiTransactionToJSON,
} from './SuiTransaction';
import type { TonMessage } from './TonMessage';
import {
    instanceOfTonMessage,
    TonMessageFromJSON,
    TonMessageFromJSONTyped,
    TonMessageToJSON,
} from './TonMessage';
import type { TonTransaction } from './TonTransaction';
import {
    instanceOfTonTransaction,
    TonTransactionFromJSON,
    TonTransactionFromJSONTyped,
    TonTransactionToJSON,
} from './TonTransaction';
import type { TronTransaction } from './TronTransaction';
import {
    instanceOfTronTransaction,
    TronTransactionFromJSON,
    TronTransactionFromJSONTyped,
    TronTransactionToJSON,
} from './TronTransaction';
import type { UtxoMessage } from './UtxoMessage';
import {
    instanceOfUtxoMessage,
    UtxoMessageFromJSON,
    UtxoMessageFromJSONTyped,
    UtxoMessageToJSON,
} from './UtxoMessage';
import type { UtxoTransaction } from './UtxoTransaction';
import {
    instanceOfUtxoTransaction,
    UtxoTransactionFromJSON,
    UtxoTransactionFromJSONTyped,
    UtxoTransactionToJSON,
} from './UtxoTransaction';

/**
 * @type PushTransactionByDataResponse
 * 
 * @export
 */
export type PushTransactionByDataResponse = { type: 'aptos_message' } & AptosMessage | { type: 'aptos_transaction' } & AptosTransaction | { type: 'black_box_signature' } & BlackBoxSignature | { type: 'cosmos_message' } & CosmosMessage | { type: 'cosmos_transaction' } & CosmosTransaction | { type: 'evm_message' } & EvmMessage | { type: 'evm_transaction' } & EvmTransaction | { type: 'exchange_transaction' } & ExchangeTransaction | { type: 'solana_message' } & SolanaMessage | { type: 'solana_transaction' } & SolanaTransaction | { type: 'stacks_transaction' } & StacksTransaction | { type: 'starknet_message' } & StarknetMessage | { type: 'starknet_transaction' } & StarknetTransaction | { type: 'sui_message' } & SuiMessage | { type: 'sui_transaction' } & SuiTransaction | { type: 'ton_message' } & TonMessage | { type: 'ton_transaction' } & TonTransaction | { type: 'tron_transaction' } & TronTransaction | { type: 'utxo_message' } & UtxoMessage | { type: 'utxo_transaction' } & UtxoTransaction;

export function PushTransactionByDataResponseFromJSON(json: any): PushTransactionByDataResponse {
    return PushTransactionByDataResponseFromJSONTyped(json, false);
}

export function PushTransactionByDataResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PushTransactionByDataResponse {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'aptos_message':
            return Object.assign({}, AptosMessageFromJSONTyped(json, true), { type: 'aptos_message' } as const);
        case 'aptos_transaction':
            return Object.assign({}, AptosTransactionFromJSONTyped(json, true), { type: 'aptos_transaction' } as const);
        case 'black_box_signature':
            return Object.assign({}, BlackBoxSignatureFromJSONTyped(json, true), { type: 'black_box_signature' } as const);
        case 'cosmos_message':
            return Object.assign({}, CosmosMessageFromJSONTyped(json, true), { type: 'cosmos_message' } as const);
        case 'cosmos_transaction':
            return Object.assign({}, CosmosTransactionFromJSONTyped(json, true), { type: 'cosmos_transaction' } as const);
        case 'evm_message':
            return Object.assign({}, EvmMessageFromJSONTyped(json, true), { type: 'evm_message' } as const);
        case 'evm_transaction':
            return Object.assign({}, EvmTransactionFromJSONTyped(json, true), { type: 'evm_transaction' } as const);
        case 'exchange_transaction':
            return Object.assign({}, ExchangeTransactionFromJSONTyped(json, true), { type: 'exchange_transaction' } as const);
        case 'solana_message':
            return Object.assign({}, SolanaMessageFromJSONTyped(json, true), { type: 'solana_message' } as const);
        case 'solana_transaction':
            return Object.assign({}, SolanaTransactionFromJSONTyped(json, true), { type: 'solana_transaction' } as const);
        case 'stacks_transaction':
            return Object.assign({}, StacksTransactionFromJSONTyped(json, true), { type: 'stacks_transaction' } as const);
        case 'starknet_message':
            return Object.assign({}, StarknetMessageFromJSONTyped(json, true), { type: 'starknet_message' } as const);
        case 'starknet_transaction':
            return Object.assign({}, StarknetTransactionFromJSONTyped(json, true), { type: 'starknet_transaction' } as const);
        case 'sui_message':
            return Object.assign({}, SuiMessageFromJSONTyped(json, true), { type: 'sui_message' } as const);
        case 'sui_transaction':
            return Object.assign({}, SuiTransactionFromJSONTyped(json, true), { type: 'sui_transaction' } as const);
        case 'ton_message':
            return Object.assign({}, TonMessageFromJSONTyped(json, true), { type: 'ton_message' } as const);
        case 'ton_transaction':
            return Object.assign({}, TonTransactionFromJSONTyped(json, true), { type: 'ton_transaction' } as const);
        case 'tron_transaction':
            return Object.assign({}, TronTransactionFromJSONTyped(json, true), { type: 'tron_transaction' } as const);
        case 'utxo_message':
            return Object.assign({}, UtxoMessageFromJSONTyped(json, true), { type: 'utxo_message' } as const);
        case 'utxo_transaction':
            return Object.assign({}, UtxoTransactionFromJSONTyped(json, true), { type: 'utxo_transaction' } as const);
        default:
            throw new Error(`No variant of PushTransactionByDataResponse exists with 'type=${json['type']}'`);
    }
}

export function PushTransactionByDataResponseToJSON(json: any): any {
    return PushTransactionByDataResponseToJSONTyped(json, false);
}

export function PushTransactionByDataResponseToJSONTyped(value?: PushTransactionByDataResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'aptos_message':
            return Object.assign({}, AptosMessageToJSON(value), { type: 'aptos_message' } as const);
        case 'aptos_transaction':
            return Object.assign({}, AptosTransactionToJSON(value), { type: 'aptos_transaction' } as const);
        case 'black_box_signature':
            return Object.assign({}, BlackBoxSignatureToJSON(value), { type: 'black_box_signature' } as const);
        case 'cosmos_message':
            return Object.assign({}, CosmosMessageToJSON(value), { type: 'cosmos_message' } as const);
        case 'cosmos_transaction':
            return Object.assign({}, CosmosTransactionToJSON(value), { type: 'cosmos_transaction' } as const);
        case 'evm_message':
            return Object.assign({}, EvmMessageToJSON(value), { type: 'evm_message' } as const);
        case 'evm_transaction':
            return Object.assign({}, EvmTransactionToJSON(value), { type: 'evm_transaction' } as const);
        case 'exchange_transaction':
            return Object.assign({}, ExchangeTransactionToJSON(value), { type: 'exchange_transaction' } as const);
        case 'solana_message':
            return Object.assign({}, SolanaMessageToJSON(value), { type: 'solana_message' } as const);
        case 'solana_transaction':
            return Object.assign({}, SolanaTransactionToJSON(value), { type: 'solana_transaction' } as const);
        case 'stacks_transaction':
            return Object.assign({}, StacksTransactionToJSON(value), { type: 'stacks_transaction' } as const);
        case 'starknet_message':
            return Object.assign({}, StarknetMessageToJSON(value), { type: 'starknet_message' } as const);
        case 'starknet_transaction':
            return Object.assign({}, StarknetTransactionToJSON(value), { type: 'starknet_transaction' } as const);
        case 'sui_message':
            return Object.assign({}, SuiMessageToJSON(value), { type: 'sui_message' } as const);
        case 'sui_transaction':
            return Object.assign({}, SuiTransactionToJSON(value), { type: 'sui_transaction' } as const);
        case 'ton_message':
            return Object.assign({}, TonMessageToJSON(value), { type: 'ton_message' } as const);
        case 'ton_transaction':
            return Object.assign({}, TonTransactionToJSON(value), { type: 'ton_transaction' } as const);
        case 'tron_transaction':
            return Object.assign({}, TronTransactionToJSON(value), { type: 'tron_transaction' } as const);
        case 'utxo_message':
            return Object.assign({}, UtxoMessageToJSON(value), { type: 'utxo_message' } as const);
        case 'utxo_transaction':
            return Object.assign({}, UtxoTransactionToJSON(value), { type: 'utxo_transaction' } as const);
        default:
            throw new Error(`No variant of PushTransactionByDataResponse exists with 'type=${value['type']}'`);
    }

}

