/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SuiCommandArgument } from './SuiCommandArgument';
import {
    SuiCommandArgumentFromJSON,
    SuiCommandArgumentFromJSONTyped,
    SuiCommandArgumentToJSON,
} from './SuiCommandArgument';

/**
 * 
 * @export
 * @interface SuiSplitCoinsCommand
 */
export interface SuiSplitCoinsCommand {
    /**
     * 
     * @type {string}
     * @memberof SuiSplitCoinsCommand
     */
    type: SuiSplitCoinsCommandTypeEnum;
    /**
     * 
     * @type {SuiCommandArgument}
     * @memberof SuiSplitCoinsCommand
     */
    coinObject: SuiCommandArgument;
    /**
     * 
     * @type {Array<SuiCommandArgument>}
     * @memberof SuiSplitCoinsCommand
     */
    amounts: Array<SuiCommandArgument>;
}


/**
 * @export
 */
export const SuiSplitCoinsCommandTypeEnum = {
    splitCoins: 'split_coins'
} as const;
export type SuiSplitCoinsCommandTypeEnum = typeof SuiSplitCoinsCommandTypeEnum[keyof typeof SuiSplitCoinsCommandTypeEnum];


/**
 * Check if a given object implements the SuiSplitCoinsCommand interface.
 */
export function instanceOfSuiSplitCoinsCommand(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "coinObject" in value;
    isInstance = isInstance && "amounts" in value;

    return isInstance;
}

export function SuiSplitCoinsCommandFromJSON(json: any): SuiSplitCoinsCommand {
    return SuiSplitCoinsCommandFromJSONTyped(json, false);
}

export function SuiSplitCoinsCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuiSplitCoinsCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'coinObject': SuiCommandArgumentFromJSON(json['coin_object']),
        'amounts': ((json['amounts'] as Array<any>).map(SuiCommandArgumentFromJSON)),
    };
}

export function SuiSplitCoinsCommandToJSON(value?: SuiSplitCoinsCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'coin_object': SuiCommandArgumentToJSON(value.coinObject),
        'amounts': ((value.amounts as Array<any>).map(SuiCommandArgumentToJSON)),
    };
}

