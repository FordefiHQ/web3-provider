/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExchangeChainUniqueId } from './ExchangeChainUniqueId';
import {
    ExchangeChainUniqueIdFromJSON,
    ExchangeChainUniqueIdFromJSONTyped,
    ExchangeChainUniqueIdToJSON,
    ExchangeChainUniqueIdToJSONTyped,
} from './ExchangeChainUniqueId';
import type { BlockchainExplorer } from './BlockchainExplorer';
import {
    BlockchainExplorerFromJSON,
    BlockchainExplorerFromJSONTyped,
    BlockchainExplorerToJSON,
    BlockchainExplorerToJSONTyped,
} from './BlockchainExplorer';

/**
 * 
 * @export
 * @interface EnrichedExchangeChain
 */
export interface EnrichedExchangeChain {
    /**
     * 
     * @type {string}
     * @memberof EnrichedExchangeChain
     */
    chainType: EnrichedExchangeChainChainTypeEnum;
    /**
     * 
     * @type {ExchangeChainUniqueId}
     * @memberof EnrichedExchangeChain
     */
    uniqueId: ExchangeChainUniqueId;
    /**
     * 
     * @type {string}
     * @memberof EnrichedExchangeChain
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedExchangeChain
     */
    nativeCurrencySymbol: string;
    /**
     * 
     * @type {string}
     * @memberof EnrichedExchangeChain
     */
    nativeCurrencyName: string;
    /**
     * 
     * @type {BlockchainExplorer}
     * @memberof EnrichedExchangeChain
     */
    blockchainExplorer?: BlockchainExplorer;
    /**
     * 
     * @type {string}
     * @memberof EnrichedExchangeChain
     */
    logoUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnrichedExchangeChain
     */
    isTestnet: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EnrichedExchangeChain
     */
    isEnabled: boolean;
}


/**
 * @export
 */
export const EnrichedExchangeChainChainTypeEnum = {
    exchange: 'exchange'
} as const;
export type EnrichedExchangeChainChainTypeEnum = typeof EnrichedExchangeChainChainTypeEnum[keyof typeof EnrichedExchangeChainChainTypeEnum];


/**
 * Check if a given object implements the EnrichedExchangeChain interface.
 */
export function instanceOfEnrichedExchangeChain(value: object): value is EnrichedExchangeChain {
    if (!('chainType' in value) || value['chainType'] === undefined) return false;
    if (!('uniqueId' in value) || value['uniqueId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nativeCurrencySymbol' in value) || value['nativeCurrencySymbol'] === undefined) return false;
    if (!('nativeCurrencyName' in value) || value['nativeCurrencyName'] === undefined) return false;
    if (!('logoUrl' in value) || value['logoUrl'] === undefined) return false;
    if (!('isTestnet' in value) || value['isTestnet'] === undefined) return false;
    if (!('isEnabled' in value) || value['isEnabled'] === undefined) return false;
    return true;
}

export function EnrichedExchangeChainFromJSON(json: any): EnrichedExchangeChain {
    return EnrichedExchangeChainFromJSONTyped(json, false);
}

export function EnrichedExchangeChainFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnrichedExchangeChain {
    if (json == null) {
        return json;
    }
    return {
        
        'chainType': json['chain_type'],
        'uniqueId': ExchangeChainUniqueIdFromJSON(json['unique_id']),
        'name': json['name'],
        'nativeCurrencySymbol': json['native_currency_symbol'],
        'nativeCurrencyName': json['native_currency_name'],
        'blockchainExplorer': json['blockchain_explorer'] == null ? undefined : BlockchainExplorerFromJSON(json['blockchain_explorer']),
        'logoUrl': json['logo_url'],
        'isTestnet': json['is_testnet'],
        'isEnabled': json['is_enabled'],
    };
}

export function EnrichedExchangeChainToJSON(json: any): EnrichedExchangeChain {
    return EnrichedExchangeChainToJSONTyped(json, false);
}

export function EnrichedExchangeChainToJSONTyped(value?: EnrichedExchangeChain | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chain_type': value['chainType'],
        'unique_id': ExchangeChainUniqueIdToJSON(value['uniqueId']),
        'name': value['name'],
        'native_currency_symbol': value['nativeCurrencySymbol'],
        'native_currency_name': value['nativeCurrencyName'],
        'blockchain_explorer': BlockchainExplorerToJSON(value['blockchainExplorer']),
        'logo_url': value['logoUrl'],
        'is_testnet': value['isTestnet'],
        'is_enabled': value['isEnabled'],
    };
}

