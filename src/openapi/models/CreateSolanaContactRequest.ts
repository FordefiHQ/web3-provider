/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SolanaChainUniqueId } from './SolanaChainUniqueId';
import {
    SolanaChainUniqueIdFromJSON,
    SolanaChainUniqueIdFromJSONTyped,
    SolanaChainUniqueIdToJSON,
} from './SolanaChainUniqueId';

/**
 * 
 * @export
 * @interface CreateSolanaContactRequest
 */
export interface CreateSolanaContactRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSolanaContactRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSolanaContactRequest
     */
    type: CreateSolanaContactRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateSolanaContactRequest
     */
    address: string;
    /**
     * 
     * @type {Array<SolanaChainUniqueId>}
     * @memberof CreateSolanaContactRequest
     */
    chains: Array<SolanaChainUniqueId>;
}


/**
 * @export
 */
export const CreateSolanaContactRequestTypeEnum = {
    solana: 'solana'
} as const;
export type CreateSolanaContactRequestTypeEnum = typeof CreateSolanaContactRequestTypeEnum[keyof typeof CreateSolanaContactRequestTypeEnum];


/**
 * Check if a given object implements the CreateSolanaContactRequest interface.
 */
export function instanceOfCreateSolanaContactRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "chains" in value;

    return isInstance;
}

export function CreateSolanaContactRequestFromJSON(json: any): CreateSolanaContactRequest {
    return CreateSolanaContactRequestFromJSONTyped(json, false);
}

export function CreateSolanaContactRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSolanaContactRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'address': json['address'],
        'chains': ((json['chains'] as Array<any>).map(SolanaChainUniqueIdFromJSON)),
    };
}

export function CreateSolanaContactRequestToJSON(value?: CreateSolanaContactRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'address': value.address,
        'chains': ((value.chains as Array<any>).map(SolanaChainUniqueIdToJSON)),
    };
}

