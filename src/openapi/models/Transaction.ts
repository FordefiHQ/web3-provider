/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    BlackBoxSignature,
    instanceOfBlackBoxSignature,
    BlackBoxSignatureFromJSON,
    BlackBoxSignatureFromJSONTyped,
    BlackBoxSignatureToJSON,
} from './BlackBoxSignature';
import {
    CosmosTransaction,
    instanceOfCosmosTransaction,
    CosmosTransactionFromJSON,
    CosmosTransactionFromJSONTyped,
    CosmosTransactionToJSON,
} from './CosmosTransaction';
import {
    EvmMessage,
    instanceOfEvmMessage,
    EvmMessageFromJSON,
    EvmMessageFromJSONTyped,
    EvmMessageToJSON,
} from './EvmMessage';
import {
    EvmTransaction,
    instanceOfEvmTransaction,
    EvmTransactionFromJSON,
    EvmTransactionFromJSONTyped,
    EvmTransactionToJSON,
} from './EvmTransaction';
import {
    SolanaMessage,
    instanceOfSolanaMessage,
    SolanaMessageFromJSON,
    SolanaMessageFromJSONTyped,
    SolanaMessageToJSON,
} from './SolanaMessage';
import {
    SolanaTransaction,
    instanceOfSolanaTransaction,
    SolanaTransactionFromJSON,
    SolanaTransactionFromJSONTyped,
    SolanaTransactionToJSON,
} from './SolanaTransaction';
import {
    UtxoTransaction,
    instanceOfUtxoTransaction,
    UtxoTransactionFromJSON,
    UtxoTransactionFromJSONTyped,
    UtxoTransactionToJSON,
} from './UtxoTransaction';

/**
 * @type Transaction
 * 
 * @export
 */
export type Transaction = { type: 'black_box_signature' } & BlackBoxSignature | { type: 'cosmos_transaction' } & CosmosTransaction | { type: 'evm_message' } & EvmMessage | { type: 'evm_transaction' } & EvmTransaction | { type: 'solana_message' } & SolanaMessage | { type: 'solana_transaction' } & SolanaTransaction | { type: 'utxo_transaction' } & UtxoTransaction;

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'black_box_signature':
            return {...BlackBoxSignatureFromJSONTyped(json, true), type: 'black_box_signature'};
        case 'cosmos_transaction':
            return {...CosmosTransactionFromJSONTyped(json, true), type: 'cosmos_transaction'};
        case 'evm_message':
            return {...EvmMessageFromJSONTyped(json, true), type: 'evm_message'};
        case 'evm_transaction':
            return {...EvmTransactionFromJSONTyped(json, true), type: 'evm_transaction'};
        case 'solana_message':
            return {...SolanaMessageFromJSONTyped(json, true), type: 'solana_message'};
        case 'solana_transaction':
            return {...SolanaTransactionFromJSONTyped(json, true), type: 'solana_transaction'};
        case 'utxo_transaction':
            return {...UtxoTransactionFromJSONTyped(json, true), type: 'utxo_transaction'};
        default:
            throw new Error(`No variant of Transaction exists with 'type=${json['type']}'`);
    }
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'black_box_signature':
            return BlackBoxSignatureToJSON(value);
        case 'cosmos_transaction':
            return CosmosTransactionToJSON(value);
        case 'evm_message':
            return EvmMessageToJSON(value);
        case 'evm_transaction':
            return EvmTransactionToJSON(value);
        case 'solana_message':
            return SolanaMessageToJSON(value);
        case 'solana_transaction':
            return SolanaTransactionToJSON(value);
        case 'utxo_transaction':
            return UtxoTransactionToJSON(value);
        default:
            throw new Error(`No variant of Transaction exists with 'type=${value['type']}'`);
    }

}

