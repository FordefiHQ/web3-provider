/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SolanaJitoFeeTypeRequest } from './SolanaJitoFeeTypeRequest';
import {
    instanceOfSolanaJitoFeeTypeRequest,
    SolanaJitoFeeTypeRequestFromJSON,
    SolanaJitoFeeTypeRequestFromJSONTyped,
    SolanaJitoFeeTypeRequestToJSON,
} from './SolanaJitoFeeTypeRequest';
import type { SolanaPriorityFeeTypeRequest } from './SolanaPriorityFeeTypeRequest';
import {
    instanceOfSolanaPriorityFeeTypeRequest,
    SolanaPriorityFeeTypeRequestFromJSON,
    SolanaPriorityFeeTypeRequestFromJSONTyped,
    SolanaPriorityFeeTypeRequestToJSON,
} from './SolanaPriorityFeeTypeRequest';

/**
 * @type CreateSolanaSpotSwapRequestFee
 * 
 * @export
 */
export type CreateSolanaSpotSwapRequestFee = { type: 'jito' } & SolanaJitoFeeTypeRequest | { type: 'priority_fee' } & SolanaPriorityFeeTypeRequest;

export function CreateSolanaSpotSwapRequestFeeFromJSON(json: any): CreateSolanaSpotSwapRequestFee {
    return CreateSolanaSpotSwapRequestFeeFromJSONTyped(json, false);
}

export function CreateSolanaSpotSwapRequestFeeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSolanaSpotSwapRequestFee {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'jito':
            return Object.assign({}, SolanaJitoFeeTypeRequestFromJSONTyped(json, true), { type: 'jito' } as const);
        case 'priority_fee':
            return Object.assign({}, SolanaPriorityFeeTypeRequestFromJSONTyped(json, true), { type: 'priority_fee' } as const);
        default:
            throw new Error(`No variant of CreateSolanaSpotSwapRequestFee exists with 'type=${json['type']}'`);
    }
}

export function CreateSolanaSpotSwapRequestFeeToJSON(json: any): any {
    return CreateSolanaSpotSwapRequestFeeToJSONTyped(json, false);
}

export function CreateSolanaSpotSwapRequestFeeToJSONTyped(value?: CreateSolanaSpotSwapRequestFee | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'jito':
            return Object.assign({}, SolanaJitoFeeTypeRequestToJSON(value), { type: 'jito' } as const);
        case 'priority_fee':
            return Object.assign({}, SolanaPriorityFeeTypeRequestToJSON(value), { type: 'priority_fee' } as const);
        default:
            throw new Error(`No variant of CreateSolanaSpotSwapRequestFee exists with 'type=${value['type']}'`);
    }

}

