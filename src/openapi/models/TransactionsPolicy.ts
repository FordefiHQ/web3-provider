/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionRule } from './TransactionRule';
import {
    TransactionRuleFromJSON,
    TransactionRuleFromJSONTyped,
    TransactionRuleToJSON,
    TransactionRuleToJSONTyped,
} from './TransactionRule';
import type { RuleAction } from './RuleAction';
import {
    RuleActionFromJSON,
    RuleActionFromJSONTyped,
    RuleActionToJSON,
    RuleActionToJSONTyped,
} from './RuleAction';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
    UserRefToJSONTyped,
} from './UserRef';

/**
 * 
 * @export
 * @interface TransactionsPolicy
 */
export interface TransactionsPolicy {
    /**
     * 
     * @type {Date}
     * @memberof TransactionsPolicy
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionsPolicy
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {UserRef}
     * @memberof TransactionsPolicy
     */
    modifiedBy?: UserRef;
    /**
     * 
     * @type {RuleAction}
     * @memberof TransactionsPolicy
     */
    defaultAction: RuleAction;
    /**
     * 
     * @type {Array<TransactionRule>}
     * @memberof TransactionsPolicy
     */
    rules: Array<TransactionRule>;
}

/**
 * Check if a given object implements the TransactionsPolicy interface.
 */
export function instanceOfTransactionsPolicy(value: object): value is TransactionsPolicy {
    if (!('defaultAction' in value) || value['defaultAction'] === undefined) return false;
    if (!('rules' in value) || value['rules'] === undefined) return false;
    return true;
}

export function TransactionsPolicyFromJSON(json: any): TransactionsPolicy {
    return TransactionsPolicyFromJSONTyped(json, false);
}

export function TransactionsPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionsPolicy {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'modifiedBy': json['modified_by'] == null ? undefined : UserRefFromJSON(json['modified_by']),
        'defaultAction': RuleActionFromJSON(json['default_action']),
        'rules': ((json['rules'] as Array<any>).map(TransactionRuleFromJSON)),
    };
}

export function TransactionsPolicyToJSON(json: any): TransactionsPolicy {
    return TransactionsPolicyToJSONTyped(json, false);
}

export function TransactionsPolicyToJSONTyped(value?: TransactionsPolicy | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modified_at': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'modified_by': UserRefToJSON(value['modifiedBy']),
        'default_action': RuleActionToJSON(value['defaultAction']),
        'rules': ((value['rules'] as Array<any>).map(TransactionRuleToJSON)),
    };
}

