/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RuleAction } from './RuleAction';
import {
    RuleActionFromJSON,
    RuleActionFromJSONTyped,
    RuleActionToJSON,
} from './RuleAction';
import type { TransactionRule } from './TransactionRule';
import {
    TransactionRuleFromJSON,
    TransactionRuleFromJSONTyped,
    TransactionRuleToJSON,
} from './TransactionRule';
import type { UserRef } from './UserRef';
import {
    UserRefFromJSON,
    UserRefFromJSONTyped,
    UserRefToJSON,
} from './UserRef';

/**
 * 
 * @export
 * @interface TransactionsPolicy
 */
export interface TransactionsPolicy {
    /**
     * 
     * @type {Date}
     * @memberof TransactionsPolicy
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionsPolicy
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {UserRef}
     * @memberof TransactionsPolicy
     */
    modifiedBy?: UserRef;
    /**
     * 
     * @type {RuleAction}
     * @memberof TransactionsPolicy
     */
    defaultAction: RuleAction;
    /**
     * 
     * @type {Array<TransactionRule>}
     * @memberof TransactionsPolicy
     */
    rules: Array<TransactionRule>;
}

/**
 * Check if a given object implements the TransactionsPolicy interface.
 */
export function instanceOfTransactionsPolicy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "defaultAction" in value;
    isInstance = isInstance && "rules" in value;

    return isInstance;
}

export function TransactionsPolicyFromJSON(json: any): TransactionsPolicy {
    return TransactionsPolicyFromJSONTyped(json, false);
}

export function TransactionsPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionsPolicy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'modifiedBy': !exists(json, 'modified_by') ? undefined : UserRefFromJSON(json['modified_by']),
        'defaultAction': RuleActionFromJSON(json['default_action']),
        'rules': ((json['rules'] as Array<any>).map(TransactionRuleFromJSON)),
    };
}

export function TransactionsPolicyToJSON(value?: TransactionsPolicy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'modified_at': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'modified_by': UserRefToJSON(value.modifiedBy),
        'default_action': RuleActionToJSON(value.defaultAction),
        'rules': ((value.rules as Array<any>).map(TransactionRuleToJSON)),
    };
}

