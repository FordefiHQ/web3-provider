/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LogClientType } from './LogClientType';
import {
    LogClientTypeFromJSON,
    LogClientTypeFromJSONTyped,
    LogClientTypeToJSON,
    LogClientTypeToJSONTyped,
} from './LogClientType';
import type { LogMessage } from './LogMessage';
import {
    LogMessageFromJSON,
    LogMessageFromJSONTyped,
    LogMessageToJSON,
    LogMessageToJSONTyped,
} from './LogMessage';

/**
 * 
 * @export
 * @interface CreateLogsRequest
 */
export interface CreateLogsRequest {
    /**
     * 
     * @type {Array<LogMessage>}
     * @memberof CreateLogsRequest
     */
    logs: Array<LogMessage>;
    /**
     * 
     * @type {LogClientType}
     * @memberof CreateLogsRequest
     */
    clientType: LogClientType;
    /**
     * 
     * @type {string}
     * @memberof CreateLogsRequest
     */
    clientGitrev: string;
}



/**
 * Check if a given object implements the CreateLogsRequest interface.
 */
export function instanceOfCreateLogsRequest(value: object): value is CreateLogsRequest {
    if (!('logs' in value) || value['logs'] === undefined) return false;
    if (!('clientType' in value) || value['clientType'] === undefined) return false;
    if (!('clientGitrev' in value) || value['clientGitrev'] === undefined) return false;
    return true;
}

export function CreateLogsRequestFromJSON(json: any): CreateLogsRequest {
    return CreateLogsRequestFromJSONTyped(json, false);
}

export function CreateLogsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateLogsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'logs': ((json['logs'] as Array<any>).map(LogMessageFromJSON)),
        'clientType': LogClientTypeFromJSON(json['client_type']),
        'clientGitrev': json['client_gitrev'],
    };
}

export function CreateLogsRequestToJSON(json: any): CreateLogsRequest {
    return CreateLogsRequestToJSONTyped(json, false);
}

export function CreateLogsRequestToJSONTyped(value?: CreateLogsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'logs': ((value['logs'] as Array<any>).map(LogMessageToJSON)),
        'client_type': LogClientTypeToJSON(value['clientType']),
        'client_gitrev': value['clientGitrev'],
    };
}

