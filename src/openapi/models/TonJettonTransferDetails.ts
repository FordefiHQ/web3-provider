/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnrichedTonAddress } from './EnrichedTonAddress';
import {
    EnrichedTonAddressFromJSON,
    EnrichedTonAddressFromJSONTyped,
    EnrichedTonAddressToJSON,
} from './EnrichedTonAddress';

/**
 * 
 * @export
 * @interface TonJettonTransferDetails
 */
export interface TonJettonTransferDetails {
    /**
     * 
     * @type {string}
     * @memberof TonJettonTransferDetails
     */
    type: TonJettonTransferDetailsTypeEnum;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonJettonTransferDetails
     */
    sender: EnrichedTonAddress;
    /**
     * 
     * @type {EnrichedTonAddress}
     * @memberof TonJettonTransferDetails
     */
    recipient: EnrichedTonAddress;
    /**
     * 
     * @type {boolean}
     * @memberof TonJettonTransferDetails
     */
    isInternal?: boolean;
}


/**
 * @export
 */
export const TonJettonTransferDetailsTypeEnum = {
    jettonTransfer: 'jetton_transfer'
} as const;
export type TonJettonTransferDetailsTypeEnum = typeof TonJettonTransferDetailsTypeEnum[keyof typeof TonJettonTransferDetailsTypeEnum];


/**
 * Check if a given object implements the TonJettonTransferDetails interface.
 */
export function instanceOfTonJettonTransferDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "recipient" in value;

    return isInstance;
}

export function TonJettonTransferDetailsFromJSON(json: any): TonJettonTransferDetails {
    return TonJettonTransferDetailsFromJSONTyped(json, false);
}

export function TonJettonTransferDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TonJettonTransferDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'sender': EnrichedTonAddressFromJSON(json['sender']),
        'recipient': EnrichedTonAddressFromJSON(json['recipient']),
        'isInternal': !exists(json, 'is_internal') ? undefined : json['is_internal'],
    };
}

export function TonJettonTransferDetailsToJSON(value?: TonJettonTransferDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'sender': EnrichedTonAddressToJSON(value.sender),
        'recipient': EnrichedTonAddressToJSON(value.recipient),
        'is_internal': value.isInternal,
    };
}

