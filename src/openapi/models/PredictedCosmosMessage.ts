/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnrichedCosmosBechAddress } from './EnrichedCosmosBechAddress';
import {
    EnrichedCosmosBechAddressFromJSON,
    EnrichedCosmosBechAddressFromJSONTyped,
    EnrichedCosmosBechAddressToJSON,
    EnrichedCosmosBechAddressToJSONTyped,
} from './EnrichedCosmosBechAddress';
import type { EnrichedCosmosChain } from './EnrichedCosmosChain';
import {
    EnrichedCosmosChainFromJSON,
    EnrichedCosmosChainFromJSONTyped,
    EnrichedCosmosChainToJSON,
    EnrichedCosmosChainToJSONTyped,
} from './EnrichedCosmosChain';
import type { AmlPolicyMatchOutgoing } from './AmlPolicyMatchOutgoing';
import {
    AmlPolicyMatchOutgoingFromJSON,
    AmlPolicyMatchOutgoingFromJSONTyped,
    AmlPolicyMatchOutgoingToJSON,
    AmlPolicyMatchOutgoingToJSONTyped,
} from './AmlPolicyMatchOutgoing';
import type { TransactionRisk } from './TransactionRisk';
import {
    TransactionRiskFromJSON,
    TransactionRiskFromJSONTyped,
    TransactionRiskToJSON,
    TransactionRiskToJSONTyped,
} from './TransactionRisk';
import type { CosmosMessageType } from './CosmosMessageType';
import {
    CosmosMessageTypeFromJSON,
    CosmosMessageTypeFromJSONTyped,
    CosmosMessageTypeToJSON,
    CosmosMessageTypeToJSONTyped,
} from './CosmosMessageType';
import type { ApprovalRequest } from './ApprovalRequest';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestFromJSONTyped,
    ApprovalRequestToJSON,
    ApprovalRequestToJSONTyped,
} from './ApprovalRequest';
import type { PolicyMatch } from './PolicyMatch';
import {
    PolicyMatchFromJSON,
    PolicyMatchFromJSONTyped,
    PolicyMatchToJSON,
    PolicyMatchToJSONTyped,
} from './PolicyMatch';

/**
 * 
 * @export
 * @interface PredictedCosmosMessage
 */
export interface PredictedCosmosMessage {
    /**
     * 
     * @type {AmlPolicyMatchOutgoing}
     * @memberof PredictedCosmosMessage
     */
    amlPolicyMatch?: AmlPolicyMatchOutgoing;
    /**
     * 
     * @type {PolicyMatch}
     * @memberof PredictedCosmosMessage
     */
    policyMatch: PolicyMatch;
    /**
     * 
     * @type {ApprovalRequest}
     * @memberof PredictedCosmosMessage
     */
    approvalRequest?: ApprovalRequest;
    /**
     * 
     * @type {Array<TransactionRisk>}
     * @memberof PredictedCosmosMessage
     */
    risks: Array<TransactionRisk>;
    /**
     * 
     * @type {string}
     * @memberof PredictedCosmosMessage
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof PredictedCosmosMessage
     */
    type: PredictedCosmosMessageTypeEnum;
    /**
     * 
     * @type {EnrichedCosmosChain}
     * @memberof PredictedCosmosMessage
     */
    chain: EnrichedCosmosChain;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof PredictedCosmosMessage
     */
    sender: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {CosmosMessageType}
     * @memberof PredictedCosmosMessage
     */
    cosmosMessageType: CosmosMessageType;
    /**
     * 
     * @type {string}
     * @memberof PredictedCosmosMessage
     */
    messageToDisplay: string;
}


/**
 * @export
 */
export const PredictedCosmosMessageTypeEnum = {
    cosmosMessage: 'cosmos_message'
} as const;
export type PredictedCosmosMessageTypeEnum = typeof PredictedCosmosMessageTypeEnum[keyof typeof PredictedCosmosMessageTypeEnum];


/**
 * Check if a given object implements the PredictedCosmosMessage interface.
 */
export function instanceOfPredictedCosmosMessage(value: object): value is PredictedCosmosMessage {
    if (!('policyMatch' in value) || value['policyMatch'] === undefined) return false;
    if (!('risks' in value) || value['risks'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chain' in value) || value['chain'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('cosmosMessageType' in value) || value['cosmosMessageType'] === undefined) return false;
    if (!('messageToDisplay' in value) || value['messageToDisplay'] === undefined) return false;
    return true;
}

export function PredictedCosmosMessageFromJSON(json: any): PredictedCosmosMessage {
    return PredictedCosmosMessageFromJSONTyped(json, false);
}

export function PredictedCosmosMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): PredictedCosmosMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'amlPolicyMatch': json['aml_policy_match'] == null ? undefined : AmlPolicyMatchOutgoingFromJSON(json['aml_policy_match']),
        'policyMatch': PolicyMatchFromJSON(json['policy_match']),
        'approvalRequest': json['approval_request'] == null ? undefined : ApprovalRequestFromJSON(json['approval_request']),
        'risks': ((json['risks'] as Array<any>).map(TransactionRiskFromJSON)),
        'note': json['note'] == null ? undefined : json['note'],
        'type': json['type'],
        'chain': EnrichedCosmosChainFromJSON(json['chain']),
        'sender': EnrichedCosmosBechAddressFromJSON(json['sender']),
        'cosmosMessageType': CosmosMessageTypeFromJSON(json['cosmos_message_type']),
        'messageToDisplay': json['message_to_display'],
    };
}

export function PredictedCosmosMessageToJSON(json: any): PredictedCosmosMessage {
    return PredictedCosmosMessageToJSONTyped(json, false);
}

export function PredictedCosmosMessageToJSONTyped(value?: PredictedCosmosMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aml_policy_match': AmlPolicyMatchOutgoingToJSON(value['amlPolicyMatch']),
        'policy_match': PolicyMatchToJSON(value['policyMatch']),
        'approval_request': ApprovalRequestToJSON(value['approvalRequest']),
        'risks': ((value['risks'] as Array<any>).map(TransactionRiskToJSON)),
        'note': value['note'],
        'type': value['type'],
        'chain': EnrichedCosmosChainToJSON(value['chain']),
        'sender': EnrichedCosmosBechAddressToJSON(value['sender']),
        'cosmos_message_type': CosmosMessageTypeToJSON(value['cosmosMessageType']),
        'message_to_display': value['messageToDisplay'],
    };
}

