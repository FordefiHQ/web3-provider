/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SuiMakeMoveVecCommand } from './SuiMakeMoveVecCommand';
import {
    SuiMakeMoveVecCommandFromJSONTyped,
    SuiMakeMoveVecCommandToJSON,
} from './SuiMakeMoveVecCommand';
import type { SuiMergeCoinsCommand } from './SuiMergeCoinsCommand';
import {
    SuiMergeCoinsCommandFromJSONTyped,
    SuiMergeCoinsCommandToJSON,
} from './SuiMergeCoinsCommand';
import type { SuiMoveCallCommand } from './SuiMoveCallCommand';
import {
    SuiMoveCallCommandFromJSONTyped,
    SuiMoveCallCommandToJSON,
} from './SuiMoveCallCommand';
import type { SuiSplitCoinsCommand } from './SuiSplitCoinsCommand';
import {
    SuiSplitCoinsCommandFromJSONTyped,
    SuiSplitCoinsCommandToJSON,
} from './SuiSplitCoinsCommand';
import type { SuiTransferObjectsCommand } from './SuiTransferObjectsCommand';
import {
    SuiTransferObjectsCommandFromJSONTyped,
    SuiTransferObjectsCommandToJSON,
} from './SuiTransferObjectsCommand';

/**
 * 
 * @export
 * @type SuiCommand
 */
export type SuiCommand = { type: 'make_move_vec' } & SuiMakeMoveVecCommand | { type: 'merge_coins' } & SuiMergeCoinsCommand | { type: 'move_call' } & SuiMoveCallCommand | { type: 'split_coins' } & SuiSplitCoinsCommand | { type: 'transfer_objects' } & SuiTransferObjectsCommand;

export function SuiCommandFromJSON(json: any): SuiCommand {
    return SuiCommandFromJSONTyped(json, false);
}

function SuiCommandFromJSONTyped(json: any, _ignoreDiscriminator: boolean): SuiCommand {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'make_move_vec':
            return Object.assign({}, SuiMakeMoveVecCommandFromJSONTyped(json, true), { type: 'make_move_vec' } as const);
        case 'merge_coins':
            return Object.assign({}, SuiMergeCoinsCommandFromJSONTyped(json, true), { type: 'merge_coins' } as const);
        case 'move_call':
            return Object.assign({}, SuiMoveCallCommandFromJSONTyped(json, true), { type: 'move_call' } as const);
        case 'split_coins':
            return Object.assign({}, SuiSplitCoinsCommandFromJSONTyped(json, true), { type: 'split_coins' } as const);
        case 'transfer_objects':
            return Object.assign({}, SuiTransferObjectsCommandFromJSONTyped(json, true), { type: 'transfer_objects' } as const);
        default:
            throw new Error(`No variant of SuiCommand exists with 'type=${json['type']}'`);
    }
}

export function SuiCommandToJSON(json: any): any {
    return SuiCommandToJSONTyped(json, false);
}

function SuiCommandToJSONTyped(value?: SuiCommand | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'make_move_vec':
            return Object.assign({}, SuiMakeMoveVecCommandToJSON(value), { type: 'make_move_vec' } as const);
        case 'merge_coins':
            return Object.assign({}, SuiMergeCoinsCommandToJSON(value), { type: 'merge_coins' } as const);
        case 'move_call':
            return Object.assign({}, SuiMoveCallCommandToJSON(value), { type: 'move_call' } as const);
        case 'split_coins':
            return Object.assign({}, SuiSplitCoinsCommandToJSON(value), { type: 'split_coins' } as const);
        case 'transfer_objects':
            return Object.assign({}, SuiTransferObjectsCommandToJSON(value), { type: 'transfer_objects' } as const);
        default:
            throw new Error(`No variant of SuiCommand exists with 'type=${value['type']}'`);
    }

}

