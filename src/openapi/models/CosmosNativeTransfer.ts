/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CosmosNativeCoinInfo } from './CosmosNativeCoinInfo';
import {
    CosmosNativeCoinInfoFromJSON,
    CosmosNativeCoinInfoFromJSONTyped,
    CosmosNativeCoinInfoToJSON,
} from './CosmosNativeCoinInfo';
import type { EnrichedCosmosBechAddress } from './EnrichedCosmosBechAddress';
import {
    EnrichedCosmosBechAddressFromJSON,
    EnrichedCosmosBechAddressFromJSONTyped,
    EnrichedCosmosBechAddressToJSON,
} from './EnrichedCosmosBechAddress';
import type { Price } from './Price';
import {
    PriceFromJSON,
    PriceFromJSONTyped,
    PriceToJSON,
} from './Price';
import type { PricedAsset } from './PricedAsset';
import {
    PricedAssetFromJSON,
    PricedAssetFromJSONTyped,
    PricedAssetToJSON,
} from './PricedAsset';

/**
 * 
 * @export
 * @interface CosmosNativeTransfer
 */
export interface CosmosNativeTransfer {
    /**
     * 
     * @type {PricedAsset}
     * @memberof CosmosNativeTransfer
     */
    pricedAsset: PricedAsset;
    /**
     * 
     * @type {string}
     * @memberof CosmosNativeTransfer
     */
    amount: string;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof CosmosNativeTransfer
     */
    from: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {EnrichedCosmosBechAddress}
     * @memberof CosmosNativeTransfer
     */
    to: EnrichedCosmosBechAddress;
    /**
     * 
     * @type {Price}
     * @memberof CosmosNativeTransfer
     */
    price?: Price;
    /**
     * 
     * @type {string}
     * @memberof CosmosNativeTransfer
     */
    type: CosmosNativeTransferTypeEnum;
    /**
     * 
     * @type {CosmosNativeCoinInfo}
     * @memberof CosmosNativeTransfer
     */
    coinInfo: CosmosNativeCoinInfo;
}


/**
 * @export
 */
export const CosmosNativeTransferTypeEnum = {
    native: 'native'
} as const;
export type CosmosNativeTransferTypeEnum = typeof CosmosNativeTransferTypeEnum[keyof typeof CosmosNativeTransferTypeEnum];


/**
 * Check if a given object implements the CosmosNativeTransfer interface.
 */
export function instanceOfCosmosNativeTransfer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pricedAsset" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "coinInfo" in value;

    return isInstance;
}

export function CosmosNativeTransferFromJSON(json: any): CosmosNativeTransfer {
    return CosmosNativeTransferFromJSONTyped(json, false);
}

export function CosmosNativeTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosNativeTransfer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pricedAsset': PricedAssetFromJSON(json['priced_asset']),
        'amount': json['amount'],
        'from': EnrichedCosmosBechAddressFromJSON(json['from']),
        'to': EnrichedCosmosBechAddressFromJSON(json['to']),
        'price': !exists(json, 'price') ? undefined : PriceFromJSON(json['price']),
        'type': json['type'],
        'coinInfo': CosmosNativeCoinInfoFromJSON(json['coin_info']),
    };
}

export function CosmosNativeTransferToJSON(value?: CosmosNativeTransfer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'priced_asset': PricedAssetToJSON(value.pricedAsset),
        'amount': value.amount,
        'from': EnrichedCosmosBechAddressToJSON(value.from),
        'to': EnrichedCosmosBechAddressToJSON(value.to),
        'price': PriceToJSON(value.price),
        'type': value.type,
        'coin_info': CosmosNativeCoinInfoToJSON(value.coinInfo),
    };
}

