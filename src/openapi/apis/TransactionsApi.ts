/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTransactionRequest,
  CreateTransactionResponse,
  GetTransactionResponse,
} from '../models/index';
import {
    CreateTransactionRequestToJSON,
    CreateTransactionResponseFromJSON,
    GetTransactionResponseFromJSON,
} from '../models/index';

interface CreateTransactionApiV1TransactionsPostRequest {
    createTransactionRequest: CreateTransactionRequest;
    xSignature?: string;
    xTimestamp?: number;
    xIdempotenceId?: string;
}

interface GetTransactionApiV1TransactionsIdGetRequest {
    id: string;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Create a new transaction.
     * Create Transaction
     */
    async createTransactionApiV1TransactionsPostRaw(requestParameters: CreateTransactionApiV1TransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTransactionResponse>> {
        if (requestParameters['createTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'createTransactionRequest',
                'Required parameter "createTransactionRequest" was null or undefined when calling createTransactionApiV1TransactionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSignature'] != null) {
            headerParameters['x-signature'] = String(requestParameters['xSignature']);
        }

        if (requestParameters['xTimestamp'] != null) {
            headerParameters['x-timestamp'] = String(requestParameters['xTimestamp']);
        }

        if (requestParameters['xIdempotenceId'] != null) {
            headerParameters['x-idempotence-id'] = String(requestParameters['xIdempotenceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionRequestToJSON(requestParameters['createTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Create a new transaction.
     * Create Transaction
     */
    async createTransactionApiV1TransactionsPost(requestParameters: CreateTransactionApiV1TransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTransactionResponse> {
        const response = await this.createTransactionApiV1TransactionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve transaction details.
     * Get Transaction
     */
    async getTransactionApiV1TransactionsIdGetRaw(requestParameters: GetTransactionApiV1TransactionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTransactionApiV1TransactionsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve transaction details.
     * Get Transaction
     */
    async getTransactionApiV1TransactionsIdGet(requestParameters: GetTransactionApiV1TransactionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionResponse> {
        const response = await this.getTransactionApiV1TransactionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
