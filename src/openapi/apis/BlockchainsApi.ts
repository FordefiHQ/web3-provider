/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseError,
  ChainType,
  ChainUniqueId,
  GetRpcEndpointsResponse,
  GetSuggestedFeesResponse,
  ListBlockchainsResponse,
  PreconditionFailedError,
  ValidationError,
} from '../models';
import {
    BaseErrorFromJSON,
    BaseErrorToJSON,
    ChainTypeFromJSON,
    ChainTypeToJSON,
    ChainUniqueIdFromJSON,
    ChainUniqueIdToJSON,
    GetRpcEndpointsResponseFromJSON,
    GetRpcEndpointsResponseToJSON,
    GetSuggestedFeesResponseFromJSON,
    GetSuggestedFeesResponseToJSON,
    ListBlockchainsResponseFromJSON,
    ListBlockchainsResponseToJSON,
    PreconditionFailedErrorFromJSON,
    PreconditionFailedErrorToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface GetSuggestedFeesApiV1BlockchainsSuggestedFeesGetRequest {
    chains?: Array<ChainUniqueId>;
    chainTypes?: Array<ChainType>;
}

export interface ListChainsApiV1BlockchainsGetRequest {
    chainTypes?: Array<ChainType>;
}

/**
 * 
 */
export class BlockchainsApi extends runtime.BaseAPI {

    /**
     * Get the suggested fees in a specific network.
     * Get Rpc Endpoints
     */
    async getRpcEndpointsApiV1BlockchainsRpcEndpointsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRpcEndpointsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blockchains/rpc-endpoints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRpcEndpointsResponseFromJSON(jsonValue));
    }

    /**
     * Get the suggested fees in a specific network.
     * Get Rpc Endpoints
     */
    async getRpcEndpointsApiV1BlockchainsRpcEndpointsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRpcEndpointsResponse> {
        const response = await this.getRpcEndpointsApiV1BlockchainsRpcEndpointsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the suggested fees in a specific network.
     * Get Suggested Fees
     */
    async getSuggestedFeesApiV1BlockchainsSuggestedFeesGetRaw(requestParameters: GetSuggestedFeesApiV1BlockchainsSuggestedFeesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSuggestedFeesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.chains) {
            queryParameters['chains'] = requestParameters.chains;
        }

        if (requestParameters.chainTypes) {
            queryParameters['chain_types'] = requestParameters.chainTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blockchains/suggested-fees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSuggestedFeesResponseFromJSON(jsonValue));
    }

    /**
     * Get the suggested fees in a specific network.
     * Get Suggested Fees
     */
    async getSuggestedFeesApiV1BlockchainsSuggestedFeesGet(requestParameters: GetSuggestedFeesApiV1BlockchainsSuggestedFeesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSuggestedFeesResponse> {
        const response = await this.getSuggestedFeesApiV1BlockchainsSuggestedFeesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all supported blockchains.
     * List Chains
     */
    async listChainsApiV1BlockchainsGetRaw(requestParameters: ListChainsApiV1BlockchainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBlockchainsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.chainTypes) {
            queryParameters['chain_types'] = requestParameters.chainTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blockchains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBlockchainsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all supported blockchains.
     * List Chains
     */
    async listChainsApiV1BlockchainsGet(requestParameters: ListChainsApiV1BlockchainsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBlockchainsResponse> {
        const response = await this.listChainsApiV1BlockchainsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
