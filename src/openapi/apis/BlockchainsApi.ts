/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChainSource,
  ChainType,
  ListBlockchainsResponse,
  PageResponseType,
} from '../models/index';
import {
    ListBlockchainsResponseFromJSON,
} from '../models/index';

interface ListChainsApiV1BlockchainsGetRequest {
    page?: number;
    size?: number;
    responseType?: PageResponseType;
    chainTypes?: Array<ChainType>;
    sources?: Array<ChainSource>;
    onlyInteractedWith?: boolean;
    search?: string;
    includeMainnets?: boolean;
    includeTestnets?: boolean;
    includeExchanges?: boolean;
    showAll?: boolean;
}

/**
 * 
 */
export class BlockchainsApi extends runtime.BaseAPI {

    /**
     * Get a list of supported blockchains.
     * List Chains
     */
    async listChainsApiV1BlockchainsGetRaw(requestParameters: ListChainsApiV1BlockchainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBlockchainsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['chainTypes'] != null) {
            queryParameters['chain_types'] = requestParameters['chainTypes'];
        }

        if (requestParameters['sources'] != null) {
            queryParameters['sources'] = requestParameters['sources'];
        }

        if (requestParameters['onlyInteractedWith'] != null) {
            queryParameters['only_interacted_with'] = requestParameters['onlyInteractedWith'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['includeMainnets'] != null) {
            queryParameters['include_mainnets'] = requestParameters['includeMainnets'];
        }

        if (requestParameters['includeTestnets'] != null) {
            queryParameters['include_testnets'] = requestParameters['includeTestnets'];
        }

        if (requestParameters['includeExchanges'] != null) {
            queryParameters['include_exchanges'] = requestParameters['includeExchanges'];
        }

        if (requestParameters['showAll'] != null) {
            queryParameters['show_all'] = requestParameters['showAll'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blockchains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBlockchainsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of supported blockchains.
     * List Chains
     */
    async listChainsApiV1BlockchainsGet(requestParameters: ListChainsApiV1BlockchainsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBlockchainsResponse> {
        const response = await this.listChainsApiV1BlockchainsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
