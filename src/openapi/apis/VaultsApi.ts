/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListVaultsResponse,
  PageResponseType,
  VaultOriginType,
  VaultSortableFields,
  VaultState,
  VaultType,
} from '../models/index';
import {
    ListVaultsResponseFromJSON,
} from '../models/index';

interface ListVaultsApiV1VaultsGetRequest {
    sortBy?: Array<VaultSortableFields>;
    page?: number;
    size?: number;
    responseType?: PageResponseType;
    vaultIds?: Array<string>;
    search?: string;
    names?: Array<string>;
    vaultTypes?: Array<VaultType>;
    vaultStates?: Array<VaultState>;
    keysetIds?: Array<string>;
    keyHolderIds?: Array<string>;
    vaultGroupIds?: Array<string>;
    excludeVaultGroupIds?: Array<string>;
    originType?: VaultOriginType;
    accountAddresses?: Array<string>;
}

/**
 * 
 */
export class VaultsApi extends runtime.BaseAPI {

    /**
     * Get a list of all vaults in an organization.
     * List Vaults
     */
    async listVaultsApiV1VaultsGetRaw(requestParameters: ListVaultsApiV1VaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['vaultIds'] != null) {
            queryParameters['vault_ids'] = requestParameters['vaultIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['names'] != null) {
            queryParameters['names'] = requestParameters['names'];
        }

        if (requestParameters['vaultTypes'] != null) {
            queryParameters['vault_types'] = requestParameters['vaultTypes'];
        }

        if (requestParameters['vaultStates'] != null) {
            queryParameters['vault_states'] = requestParameters['vaultStates'];
        }

        if (requestParameters['keysetIds'] != null) {
            queryParameters['keyset_ids'] = requestParameters['keysetIds'];
        }

        if (requestParameters['keyHolderIds'] != null) {
            queryParameters['key_holder_ids'] = requestParameters['keyHolderIds'];
        }

        if (requestParameters['vaultGroupIds'] != null) {
            queryParameters['vault_group_ids'] = requestParameters['vaultGroupIds'];
        }

        if (requestParameters['excludeVaultGroupIds'] != null) {
            queryParameters['exclude_vault_group_ids'] = requestParameters['excludeVaultGroupIds'];
        }

        if (requestParameters['originType'] != null) {
            queryParameters['origin_type'] = requestParameters['originType'];
        }

        if (requestParameters['accountAddresses'] != null) {
            queryParameters['account_addresses'] = requestParameters['accountAddresses'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all vaults in an organization.
     * List Vaults
     */
    async listVaultsApiV1VaultsGet(requestParameters: ListVaultsApiV1VaultsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultsResponse> {
        const response = await this.listVaultsApiV1VaultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
