/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseError,
  CreateUtxoVaultAddressRequest,
  CreateVaultRequest,
  CreateVaultResponse,
  DefinedPreconditionErrorAddAssetToVaultErrorType,
  DefinedPreconditionErrorCreateVaultAddressErrorType,
  DefinedPreconditionErrorCreateVaultErrorType,
  GetVaultResponse,
  ListOwnedAssetsResponse,
  ListVaultAddressesResponse,
  ListVaultsResponse,
  ListVaultsWithAssetsResponse,
  OwnedAsset,
  OwnedAssetsSortableFields,
  PreconditionFailedError,
  RenameVaultRequest,
  ResourceError,
  UpdateVaultMetadataRequest,
  UtxoAddressType,
  UtxoVaultAddress,
  UtxoVaultSubType,
  ValidationError,
  VaultAddressSortableFields,
  VaultMetadata,
  VaultSortableFields,
  VaultState,
  VaultType,
} from '../models';
import {
    BaseErrorFromJSON,
    BaseErrorToJSON,
    CreateUtxoVaultAddressRequestFromJSON,
    CreateUtxoVaultAddressRequestToJSON,
    CreateVaultRequestFromJSON,
    CreateVaultRequestToJSON,
    CreateVaultResponseFromJSON,
    CreateVaultResponseToJSON,
    DefinedPreconditionErrorAddAssetToVaultErrorTypeFromJSON,
    DefinedPreconditionErrorAddAssetToVaultErrorTypeToJSON,
    DefinedPreconditionErrorCreateVaultAddressErrorTypeFromJSON,
    DefinedPreconditionErrorCreateVaultAddressErrorTypeToJSON,
    DefinedPreconditionErrorCreateVaultErrorTypeFromJSON,
    DefinedPreconditionErrorCreateVaultErrorTypeToJSON,
    GetVaultResponseFromJSON,
    GetVaultResponseToJSON,
    ListOwnedAssetsResponseFromJSON,
    ListOwnedAssetsResponseToJSON,
    ListVaultAddressesResponseFromJSON,
    ListVaultAddressesResponseToJSON,
    ListVaultsResponseFromJSON,
    ListVaultsResponseToJSON,
    ListVaultsWithAssetsResponseFromJSON,
    ListVaultsWithAssetsResponseToJSON,
    OwnedAssetFromJSON,
    OwnedAssetToJSON,
    OwnedAssetsSortableFieldsFromJSON,
    OwnedAssetsSortableFieldsToJSON,
    PreconditionFailedErrorFromJSON,
    PreconditionFailedErrorToJSON,
    RenameVaultRequestFromJSON,
    RenameVaultRequestToJSON,
    ResourceErrorFromJSON,
    ResourceErrorToJSON,
    UpdateVaultMetadataRequestFromJSON,
    UpdateVaultMetadataRequestToJSON,
    UtxoAddressTypeFromJSON,
    UtxoAddressTypeToJSON,
    UtxoVaultAddressFromJSON,
    UtxoVaultAddressToJSON,
    UtxoVaultSubTypeFromJSON,
    UtxoVaultSubTypeToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
    VaultAddressSortableFieldsFromJSON,
    VaultAddressSortableFieldsToJSON,
    VaultMetadataFromJSON,
    VaultMetadataToJSON,
    VaultSortableFieldsFromJSON,
    VaultSortableFieldsToJSON,
    VaultStateFromJSON,
    VaultStateToJSON,
    VaultTypeFromJSON,
    VaultTypeToJSON,
} from '../models';

export interface AddVaultAssetApiV1VaultsIdAssetsAssetIdPostRequest {
    id: string;
    assetId: string;
}

export interface ArchiveVaultApiV1VaultsIdArchivePostRequest {
    id: string;
}

export interface CreateAddressApiV1VaultsIdAddressesPostRequest {
    id: string;
    body: CreateUtxoVaultAddressRequest;
}

export interface CreateVaultApiV1VaultsPostRequest {
    createVaultRequest: CreateVaultRequest;
}

export interface ExportVaultsWithAssetsApiV1VaultsExportGetRequest {
    vaultsIds?: Array<string>;
}

export interface GetVaultApiV1VaultsIdGetRequest {
    id: string;
}

export interface GetVaultAssetApiV1VaultsIdAssetsAssetIdGetRequest {
    id: string;
    assetId: string;
    page?: number;
    size?: number;
}

export interface GetVaultAssetsApiV1VaultsIdAssetsGetRequest {
    id: string;
    page?: number;
    size?: number;
    chains?: Array<string>;
    assetIds?: Array<string>;
    isHidden?: boolean;
    search?: string;
    sortBy?: Array<OwnedAssetsSortableFields>;
}

export interface GetVaultMetadataApiV1VaultsIdMetadataGetRequest {
    id: string;
}

export interface ListVaultAddressesApiV1VaultsIdAddressesGetRequest {
    id: string;
    sortBy?: Array<VaultAddressSortableFields>;
    page?: number;
    size?: number;
    search?: string;
    addresses?: Array<string>;
    addressTypes?: Array<UtxoAddressType>;
}

export interface ListVaultsApiV1VaultsGetRequest {
    sortBy?: Array<VaultSortableFields>;
    page?: number;
    size?: number;
    vaultIds?: Array<string>;
    search?: string;
    names?: Array<string>;
    vaultTypes?: Array<VaultType>;
    vaultStates?: Array<VaultState>;
    keysetIds?: Array<string>;
    keyHolderIds?: Array<string>;
    vaultGroupIds?: Array<string>;
    excludeVaultGroupIds?: Array<string>;
}

export interface ListVaultsWithAssetsApiV1VaultsBalancesGetRequest {
    includeAssetsInfo?: boolean;
    page?: number;
    size?: number;
    vaultIds?: Array<string>;
    chains?: Array<string>;
    search?: string;
    vaultTypes?: Array<VaultType>;
    vaultStates?: Array<VaultState>;
    utxoVaultSubTypes?: Array<UtxoVaultSubType>;
    keyHolderIds?: Array<string>;
    hideEmpty?: boolean;
    vaultGroupIds?: Array<string>;
    assetIds?: Array<string>;
    sortBy?: Array<VaultSortableFields>;
}

export interface RenameVaultAddressApiV1VaultsAddressesIdNamePutRequest {
    id: string;
    renameVaultRequest: RenameVaultRequest;
}

export interface RenameVaultApiV1VaultsIdNamePutRequest {
    id: string;
    renameVaultRequest: RenameVaultRequest;
}

export interface RestoreVaultApiV1VaultsIdRestorePostRequest {
    id: string;
}

export interface SyncVaultApiV1VaultsIdSyncPutRequest {
    id: string;
}

export interface UpdateVaultMetadataApiV1VaultsIdMetadataPutRequest {
    id: string;
    updateVaultMetadataRequest: UpdateVaultMetadataRequest;
}

/**
 * 
 */
export class VaultsApi extends runtime.BaseAPI {

    /**
     * Add a specific asset to a vault.
     * Add Vault Asset
     */
    async addVaultAssetApiV1VaultsIdAssetsAssetIdPostRaw(requestParameters: AddVaultAssetApiV1VaultsIdAssetsAssetIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnedAsset>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addVaultAssetApiV1VaultsIdAssetsAssetIdPost.');
        }

        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling addVaultAssetApiV1VaultsIdAssetsAssetIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/assets/{asset_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnedAssetFromJSON(jsonValue));
    }

    /**
     * Add a specific asset to a vault.
     * Add Vault Asset
     */
    async addVaultAssetApiV1VaultsIdAssetsAssetIdPost(requestParameters: AddVaultAssetApiV1VaultsIdAssetsAssetIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnedAsset> {
        const response = await this.addVaultAssetApiV1VaultsIdAssetsAssetIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archive an existing vault.
     * Archive Vault
     */
    async archiveVaultApiV1VaultsIdArchivePostRaw(requestParameters: ArchiveVaultApiV1VaultsIdArchivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling archiveVaultApiV1VaultsIdArchivePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archive an existing vault.
     * Archive Vault
     */
    async archiveVaultApiV1VaultsIdArchivePost(requestParameters: ArchiveVaultApiV1VaultsIdArchivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.archiveVaultApiV1VaultsIdArchivePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new address.
     * Create Address
     */
    async createAddressApiV1VaultsIdAddressesPostRaw(requestParameters: CreateAddressApiV1VaultsIdAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UtxoVaultAddress>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createAddressApiV1VaultsIdAddressesPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAddressApiV1VaultsIdAddressesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/addresses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UtxoVaultAddressFromJSON(jsonValue));
    }

    /**
     * Create a new address.
     * Create Address
     */
    async createAddressApiV1VaultsIdAddressesPost(requestParameters: CreateAddressApiV1VaultsIdAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UtxoVaultAddress> {
        const response = await this.createAddressApiV1VaultsIdAddressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new vault.
     * Create Vault
     */
    async createVaultApiV1VaultsPostRaw(requestParameters: CreateVaultApiV1VaultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVaultResponse>> {
        if (requestParameters.createVaultRequest === null || requestParameters.createVaultRequest === undefined) {
            throw new runtime.RequiredError('createVaultRequest','Required parameter requestParameters.createVaultRequest was null or undefined when calling createVaultApiV1VaultsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVaultRequestToJSON(requestParameters.createVaultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVaultResponseFromJSON(jsonValue));
    }

    /**
     * Create a new vault.
     * Create Vault
     */
    async createVaultApiV1VaultsPost(requestParameters: CreateVaultApiV1VaultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVaultResponse> {
        const response = await this.createVaultApiV1VaultsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a CSV-format list of balances of all vaults and their assets.
     * Export Vaults With Assets
     */
    async exportVaultsWithAssetsApiV1VaultsExportGetRaw(requestParameters: ExportVaultsWithAssetsApiV1VaultsExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.vaultsIds) {
            queryParameters['vaults_ids'] = requestParameters.vaultsIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get a CSV-format list of balances of all vaults and their assets.
     * Export Vaults With Assets
     */
    async exportVaultsWithAssetsApiV1VaultsExportGet(requestParameters: ExportVaultsWithAssetsApiV1VaultsExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.exportVaultsWithAssetsApiV1VaultsExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve vault details.
     * Get Vault
     */
    async getVaultApiV1VaultsIdGetRaw(requestParameters: GetVaultApiV1VaultsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVaultResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVaultApiV1VaultsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVaultResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve vault details.
     * Get Vault
     */
    async getVaultApiV1VaultsIdGet(requestParameters: GetVaultApiV1VaultsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVaultResponse> {
        const response = await this.getVaultApiV1VaultsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific asset in a vault.
     * Get Vault Asset
     */
    async getVaultAssetApiV1VaultsIdAssetsAssetIdGetRaw(requestParameters: GetVaultAssetApiV1VaultsIdAssetsAssetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnedAsset>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVaultAssetApiV1VaultsIdAssetsAssetIdGet.');
        }

        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling getVaultAssetApiV1VaultsIdAssetsAssetIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/assets/{asset_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnedAssetFromJSON(jsonValue));
    }

    /**
     * Get a specific asset in a vault.
     * Get Vault Asset
     */
    async getVaultAssetApiV1VaultsIdAssetsAssetIdGet(requestParameters: GetVaultAssetApiV1VaultsIdAssetsAssetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnedAsset> {
        const response = await this.getVaultAssetApiV1VaultsIdAssetsAssetIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all assets in a vault.
     * Get Vault Assets
     */
    async getVaultAssetsApiV1VaultsIdAssetsGetRaw(requestParameters: GetVaultAssetsApiV1VaultsIdAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOwnedAssetsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVaultAssetsApiV1VaultsIdAssetsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.chains) {
            queryParameters['chains'] = requestParameters.chains;
        }

        if (requestParameters.assetIds) {
            queryParameters['asset_ids'] = requestParameters.assetIds;
        }

        if (requestParameters.isHidden !== undefined) {
            queryParameters['is_hidden'] = requestParameters.isHidden;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.sortBy) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOwnedAssetsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all assets in a vault.
     * Get Vault Assets
     */
    async getVaultAssetsApiV1VaultsIdAssetsGet(requestParameters: GetVaultAssetsApiV1VaultsIdAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOwnedAssetsResponse> {
        const response = await this.getVaultAssetsApiV1VaultsIdAssetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve extra vault details.
     * Get Vault Metadata
     */
    async getVaultMetadataApiV1VaultsIdMetadataGetRaw(requestParameters: GetVaultMetadataApiV1VaultsIdMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultMetadata>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVaultMetadataApiV1VaultsIdMetadataGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultMetadataFromJSON(jsonValue));
    }

    /**
     * Retrieve extra vault details.
     * Get Vault Metadata
     */
    async getVaultMetadataApiV1VaultsIdMetadataGet(requestParameters: GetVaultMetadataApiV1VaultsIdMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultMetadata> {
        const response = await this.getVaultMetadataApiV1VaultsIdMetadataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all addresses in a vault.
     * List Vault Addresses
     */
    async listVaultAddressesApiV1VaultsIdAddressesGetRaw(requestParameters: ListVaultAddressesApiV1VaultsIdAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultAddressesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listVaultAddressesApiV1VaultsIdAddressesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortBy) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.addresses) {
            queryParameters['addresses'] = requestParameters.addresses;
        }

        if (requestParameters.addressTypes) {
            queryParameters['address_types'] = requestParameters.addressTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/addresses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultAddressesResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all addresses in a vault.
     * List Vault Addresses
     */
    async listVaultAddressesApiV1VaultsIdAddressesGet(requestParameters: ListVaultAddressesApiV1VaultsIdAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultAddressesResponse> {
        const response = await this.listVaultAddressesApiV1VaultsIdAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all vaults in an organization.
     * List Vaults
     */
    async listVaultsApiV1VaultsGetRaw(requestParameters: ListVaultsApiV1VaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.vaultIds) {
            queryParameters['vault_ids'] = requestParameters.vaultIds;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.names) {
            queryParameters['names'] = requestParameters.names;
        }

        if (requestParameters.vaultTypes) {
            queryParameters['vault_types'] = requestParameters.vaultTypes;
        }

        if (requestParameters.vaultStates) {
            queryParameters['vault_states'] = requestParameters.vaultStates;
        }

        if (requestParameters.keysetIds) {
            queryParameters['keyset_ids'] = requestParameters.keysetIds;
        }

        if (requestParameters.keyHolderIds) {
            queryParameters['key_holder_ids'] = requestParameters.keyHolderIds;
        }

        if (requestParameters.vaultGroupIds) {
            queryParameters['vault_group_ids'] = requestParameters.vaultGroupIds;
        }

        if (requestParameters.excludeVaultGroupIds) {
            queryParameters['exclude_vault_group_ids'] = requestParameters.excludeVaultGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all vaults in an organization.
     * List Vaults
     */
    async listVaultsApiV1VaultsGet(requestParameters: ListVaultsApiV1VaultsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultsResponse> {
        const response = await this.listVaultsApiV1VaultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all vaults and their assets in an organization.
     * List Vaults With Assets
     */
    async listVaultsWithAssetsApiV1VaultsBalancesGetRaw(requestParameters: ListVaultsWithAssetsApiV1VaultsBalancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultsWithAssetsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includeAssetsInfo !== undefined) {
            queryParameters['include_assets_info'] = requestParameters.includeAssetsInfo;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.vaultIds) {
            queryParameters['vault_ids'] = requestParameters.vaultIds;
        }

        if (requestParameters.chains) {
            queryParameters['chains'] = requestParameters.chains;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.vaultTypes) {
            queryParameters['vault_types'] = requestParameters.vaultTypes;
        }

        if (requestParameters.vaultStates) {
            queryParameters['vault_states'] = requestParameters.vaultStates;
        }

        if (requestParameters.utxoVaultSubTypes) {
            queryParameters['utxo_vault_sub_types'] = requestParameters.utxoVaultSubTypes;
        }

        if (requestParameters.keyHolderIds) {
            queryParameters['key_holder_ids'] = requestParameters.keyHolderIds;
        }

        if (requestParameters.hideEmpty !== undefined) {
            queryParameters['hide_empty'] = requestParameters.hideEmpty;
        }

        if (requestParameters.vaultGroupIds) {
            queryParameters['vault_group_ids'] = requestParameters.vaultGroupIds;
        }

        if (requestParameters.assetIds) {
            queryParameters['asset_ids'] = requestParameters.assetIds;
        }

        if (requestParameters.sortBy) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/balances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultsWithAssetsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all vaults and their assets in an organization.
     * List Vaults With Assets
     */
    async listVaultsWithAssetsApiV1VaultsBalancesGet(requestParameters: ListVaultsWithAssetsApiV1VaultsBalancesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultsWithAssetsResponse> {
        const response = await this.listVaultsWithAssetsApiV1VaultsBalancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename an existing vault address.
     * Rename Vault Address
     */
    async renameVaultAddressApiV1VaultsAddressesIdNamePutRaw(requestParameters: RenameVaultAddressApiV1VaultsAddressesIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling renameVaultAddressApiV1VaultsAddressesIdNamePut.');
        }

        if (requestParameters.renameVaultRequest === null || requestParameters.renameVaultRequest === undefined) {
            throw new runtime.RequiredError('renameVaultRequest','Required parameter requestParameters.renameVaultRequest was null or undefined when calling renameVaultAddressApiV1VaultsAddressesIdNamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/addresses/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameVaultRequestToJSON(requestParameters.renameVaultRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename an existing vault address.
     * Rename Vault Address
     */
    async renameVaultAddressApiV1VaultsAddressesIdNamePut(requestParameters: RenameVaultAddressApiV1VaultsAddressesIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameVaultAddressApiV1VaultsAddressesIdNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Rename an existing vault.
     * Rename Vault
     */
    async renameVaultApiV1VaultsIdNamePutRaw(requestParameters: RenameVaultApiV1VaultsIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling renameVaultApiV1VaultsIdNamePut.');
        }

        if (requestParameters.renameVaultRequest === null || requestParameters.renameVaultRequest === undefined) {
            throw new runtime.RequiredError('renameVaultRequest','Required parameter requestParameters.renameVaultRequest was null or undefined when calling renameVaultApiV1VaultsIdNamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameVaultRequestToJSON(requestParameters.renameVaultRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename an existing vault.
     * Rename Vault
     */
    async renameVaultApiV1VaultsIdNamePut(requestParameters: RenameVaultApiV1VaultsIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameVaultApiV1VaultsIdNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Restore an archived vault.
     * Restore Vault
     */
    async restoreVaultApiV1VaultsIdRestorePostRaw(requestParameters: RestoreVaultApiV1VaultsIdRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling restoreVaultApiV1VaultsIdRestorePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore an archived vault.
     * Restore Vault
     */
    async restoreVaultApiV1VaultsIdRestorePost(requestParameters: RestoreVaultApiV1VaultsIdRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restoreVaultApiV1VaultsIdRestorePostRaw(requestParameters, initOverrides);
    }

    /**
     * Sync assets of a vault.
     * Sync Vault
     */
    async syncVaultApiV1VaultsIdSyncPutRaw(requestParameters: SyncVaultApiV1VaultsIdSyncPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling syncVaultApiV1VaultsIdSyncPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/sync`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sync assets of a vault.
     * Sync Vault
     */
    async syncVaultApiV1VaultsIdSyncPut(requestParameters: SyncVaultApiV1VaultsIdSyncPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncVaultApiV1VaultsIdSyncPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update vault metadata details.
     * Update Vault Metadata
     */
    async updateVaultMetadataApiV1VaultsIdMetadataPutRaw(requestParameters: UpdateVaultMetadataApiV1VaultsIdMetadataPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVaultMetadataApiV1VaultsIdMetadataPut.');
        }

        if (requestParameters.updateVaultMetadataRequest === null || requestParameters.updateVaultMetadataRequest === undefined) {
            throw new runtime.RequiredError('updateVaultMetadataRequest','Required parameter requestParameters.updateVaultMetadataRequest was null or undefined when calling updateVaultMetadataApiV1VaultsIdMetadataPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVaultMetadataRequestToJSON(requestParameters.updateVaultMetadataRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update vault metadata details.
     * Update Vault Metadata
     */
    async updateVaultMetadataApiV1VaultsIdMetadataPut(requestParameters: UpdateVaultMetadataApiV1VaultsIdMetadataPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateVaultMetadataApiV1VaultsIdMetadataPutRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetVaultAssetsApiV1VaultsIdAssetsGetChainsEnum = {
    aptosMainnet: 'aptos_mainnet',
    aptosTestnet: 'aptos_testnet',
    cosmosAgoric3: 'cosmos_agoric-3',
    cosmosAkashnet2: 'cosmos_akashnet-2',
    cosmosArchway1: 'cosmos_archway-1',
    cosmosAxelarDojo1: 'cosmos_axelar-dojo-1',
    cosmosCelestia: 'cosmos_celestia',
    cosmosCosmoshub4: 'cosmos_cosmoshub-4',
    cosmosDydxMainnet1: 'cosmos_dydx-mainnet-1',
    cosmosDydxTestnet4: 'cosmos_dydx-testnet-4',
    cosmosDymension11001: 'cosmos_dymension_1100-1',
    cosmosNeutron1: 'cosmos_neutron-1',
    cosmosNoble1: 'cosmos_noble-1',
    cosmosOsmosis1: 'cosmos_osmosis-1',
    cosmosPacific1: 'cosmos_pacific-1',
    cosmosStride1: 'cosmos_stride-1',
    evm1: 'evm_1',
    evm5: 'evm_5',
    evm10: 'evm_10',
    evm16: 'evm_16',
    evm56: 'evm_56',
    evm100: 'evm_100',
    evm137: 'evm_137',
    evm169: 'evm_169',
    evm250: 'evm_250',
    evm324: 'evm_324',
    evm1030: 'evm_1030',
    evm1100: 'evm_1100',
    evm1101: 'evm_1101',
    evm1329: 'evm_1329',
    evm1729: 'evm_1729',
    evm2222: 'evm_2222',
    evm4200: 'evm_4200',
    evm5000: 'evm_5000',
    evm7000: 'evm_7000',
    evm7700: 'evm_7700',
    evm8453: 'evm_8453',
    evm17000: 'evm_17000',
    evm80001: 'evm_80001',
    evm42161: 'evm_42161',
    evm43114: 'evm_43114',
    evm59144: 'evm_59144',
    evm81457: 'evm_81457',
    evm421614: 'evm_421614',
    evm534352: 'evm_534352',
    evm660279: 'evm_660279',
    evm810180: 'evm_810180',
    evm11155111: 'evm_11155111',
    evmEthereumMainnet: 'evm_ethereum_mainnet',
    evmEthereumGoerli: 'evm_ethereum_goerli',
    evmOptimismMainnet: 'evm_optimism_mainnet',
    evmFlareTestnet: 'evm_flare_testnet',
    evmBscMainnet: 'evm_bsc_mainnet',
    evmGnosisMainnet: 'evm_gnosis_mainnet',
    evmPolygonMainnet: 'evm_polygon_mainnet',
    evmMantaPacificMainnet: 'evm_manta_pacific_mainnet',
    evmFantomMainnet: 'evm_fantom_mainnet',
    evmZksyncEraMainnet: 'evm_zksync_era_mainnet',
    evmConfluxMainnet: 'evm_conflux_mainnet',
    evmDymensionMainnet: 'evm_dymension_mainnet',
    evmPolygonZkevmMainnet: 'evm_polygon_zkevm_mainnet',
    evmSeiMainnet: 'evm_sei_mainnet',
    evmReyaMainnet: 'evm_reya_mainnet',
    evmKavaMainnet: 'evm_kava_mainnet',
    evmMerlinMainnet: 'evm_merlin_mainnet',
    evmMantleMainnet: 'evm_mantle_mainnet',
    evmZetaMainnet: 'evm_zeta_mainnet',
    evmCantoMainnet: 'evm_canto_mainnet',
    evmBaseMainnet: 'evm_base_mainnet',
    evmEthereumHolesky: 'evm_ethereum_holesky',
    evmPolygonMumbai: 'evm_polygon_mumbai',
    evmArbitrumMainnet: 'evm_arbitrum_mainnet',
    evmAvalancheChain: 'evm_avalanche_chain',
    evmLineaMainnet: 'evm_linea_mainnet',
    evmBlastMainnet: 'evm_blast_mainnet',
    evmArbitrumSepolia: 'evm_arbitrum_sepolia',
    evmScrollMainnet: 'evm_scroll_mainnet',
    evmXaiMainnet: 'evm_xai_mainnet',
    evmZklinkNovaMainnet: 'evm_zklink_nova_mainnet',
    evmEthereumSepolia: 'evm_ethereum_sepolia',
    solanaMainnet: 'solana_mainnet',
    solanaDevnet: 'solana_devnet',
    suiMainnet: 'sui_mainnet',
    suiTestnet: 'sui_testnet',
    tonMainnet: 'ton_mainnet',
    bitcoinMainnet: 'bitcoin_mainnet',
    bitcoinTestnet: 'bitcoin_testnet'
} as const;
export type GetVaultAssetsApiV1VaultsIdAssetsGetChainsEnum = typeof GetVaultAssetsApiV1VaultsIdAssetsGetChainsEnum[keyof typeof GetVaultAssetsApiV1VaultsIdAssetsGetChainsEnum];
/**
 * @export
 */
export const ListVaultsWithAssetsApiV1VaultsBalancesGetChainsEnum = {
    aptosMainnet: 'aptos_mainnet',
    aptosTestnet: 'aptos_testnet',
    cosmosAgoric3: 'cosmos_agoric-3',
    cosmosAkashnet2: 'cosmos_akashnet-2',
    cosmosArchway1: 'cosmos_archway-1',
    cosmosAxelarDojo1: 'cosmos_axelar-dojo-1',
    cosmosCelestia: 'cosmos_celestia',
    cosmosCosmoshub4: 'cosmos_cosmoshub-4',
    cosmosDydxMainnet1: 'cosmos_dydx-mainnet-1',
    cosmosDydxTestnet4: 'cosmos_dydx-testnet-4',
    cosmosDymension11001: 'cosmos_dymension_1100-1',
    cosmosNeutron1: 'cosmos_neutron-1',
    cosmosNoble1: 'cosmos_noble-1',
    cosmosOsmosis1: 'cosmos_osmosis-1',
    cosmosPacific1: 'cosmos_pacific-1',
    cosmosStride1: 'cosmos_stride-1',
    evm1: 'evm_1',
    evm5: 'evm_5',
    evm10: 'evm_10',
    evm16: 'evm_16',
    evm56: 'evm_56',
    evm100: 'evm_100',
    evm137: 'evm_137',
    evm169: 'evm_169',
    evm250: 'evm_250',
    evm324: 'evm_324',
    evm1030: 'evm_1030',
    evm1100: 'evm_1100',
    evm1101: 'evm_1101',
    evm1329: 'evm_1329',
    evm1729: 'evm_1729',
    evm2222: 'evm_2222',
    evm4200: 'evm_4200',
    evm5000: 'evm_5000',
    evm7000: 'evm_7000',
    evm7700: 'evm_7700',
    evm8453: 'evm_8453',
    evm17000: 'evm_17000',
    evm80001: 'evm_80001',
    evm42161: 'evm_42161',
    evm43114: 'evm_43114',
    evm59144: 'evm_59144',
    evm81457: 'evm_81457',
    evm421614: 'evm_421614',
    evm534352: 'evm_534352',
    evm660279: 'evm_660279',
    evm810180: 'evm_810180',
    evm11155111: 'evm_11155111',
    evmEthereumMainnet: 'evm_ethereum_mainnet',
    evmEthereumGoerli: 'evm_ethereum_goerli',
    evmOptimismMainnet: 'evm_optimism_mainnet',
    evmFlareTestnet: 'evm_flare_testnet',
    evmBscMainnet: 'evm_bsc_mainnet',
    evmGnosisMainnet: 'evm_gnosis_mainnet',
    evmPolygonMainnet: 'evm_polygon_mainnet',
    evmMantaPacificMainnet: 'evm_manta_pacific_mainnet',
    evmFantomMainnet: 'evm_fantom_mainnet',
    evmZksyncEraMainnet: 'evm_zksync_era_mainnet',
    evmConfluxMainnet: 'evm_conflux_mainnet',
    evmDymensionMainnet: 'evm_dymension_mainnet',
    evmPolygonZkevmMainnet: 'evm_polygon_zkevm_mainnet',
    evmSeiMainnet: 'evm_sei_mainnet',
    evmReyaMainnet: 'evm_reya_mainnet',
    evmKavaMainnet: 'evm_kava_mainnet',
    evmMerlinMainnet: 'evm_merlin_mainnet',
    evmMantleMainnet: 'evm_mantle_mainnet',
    evmZetaMainnet: 'evm_zeta_mainnet',
    evmCantoMainnet: 'evm_canto_mainnet',
    evmBaseMainnet: 'evm_base_mainnet',
    evmEthereumHolesky: 'evm_ethereum_holesky',
    evmPolygonMumbai: 'evm_polygon_mumbai',
    evmArbitrumMainnet: 'evm_arbitrum_mainnet',
    evmAvalancheChain: 'evm_avalanche_chain',
    evmLineaMainnet: 'evm_linea_mainnet',
    evmBlastMainnet: 'evm_blast_mainnet',
    evmArbitrumSepolia: 'evm_arbitrum_sepolia',
    evmScrollMainnet: 'evm_scroll_mainnet',
    evmXaiMainnet: 'evm_xai_mainnet',
    evmZklinkNovaMainnet: 'evm_zklink_nova_mainnet',
    evmEthereumSepolia: 'evm_ethereum_sepolia',
    solanaMainnet: 'solana_mainnet',
    solanaDevnet: 'solana_devnet',
    suiMainnet: 'sui_mainnet',
    suiTestnet: 'sui_testnet',
    tonMainnet: 'ton_mainnet',
    bitcoinMainnet: 'bitcoin_mainnet',
    bitcoinTestnet: 'bitcoin_testnet'
} as const;
export type ListVaultsWithAssetsApiV1VaultsBalancesGetChainsEnum = typeof ListVaultsWithAssetsApiV1VaultsBalancesGetChainsEnum[keyof typeof ListVaultsWithAssetsApiV1VaultsBalancesGetChainsEnum];
