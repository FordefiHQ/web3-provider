/* tslint:disable */
/* eslint-disable */
/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseError,
  CreateUtxoVaultAddressRequest,
  CreateVaultRequest,
  CreateVaultResponse,
  DefinedPreconditionErrorAddAssetToVaultErrorType,
  DefinedPreconditionErrorCreateVaultAddressErrorType,
  DefinedPreconditionErrorCreateVaultErrorType,
  ExchangeType,
  GetVaultResponse,
  ListOwnedAssetsResponse,
  ListVaultAddressesResponse,
  ListVaultsResponse,
  ListVaultsWithAssetsResponse,
  OwnedAsset,
  OwnedAssetsSortableFields,
  PageResponseType,
  PreconditionFailedError,
  PurgeImportedVaultsRequest,
  PurgeImportedVaultsResponse,
  RenameVaultRequest,
  ResourceError,
  UpdateVaultMetadataRequest,
  UtxoAddressType,
  UtxoVaultAddress,
  UtxoVaultSubType,
  ValidationError,
  VaultAddressSortableFields,
  VaultMetadata,
  VaultOriginType,
  VaultSortableFields,
  VaultState,
  VaultType,
} from '../models/index';
import {
    BaseErrorFromJSON,
    BaseErrorToJSON,
    CreateUtxoVaultAddressRequestFromJSON,
    CreateUtxoVaultAddressRequestToJSON,
    CreateVaultRequestFromJSON,
    CreateVaultRequestToJSON,
    CreateVaultResponseFromJSON,
    CreateVaultResponseToJSON,
    DefinedPreconditionErrorAddAssetToVaultErrorTypeFromJSON,
    DefinedPreconditionErrorAddAssetToVaultErrorTypeToJSON,
    DefinedPreconditionErrorCreateVaultAddressErrorTypeFromJSON,
    DefinedPreconditionErrorCreateVaultAddressErrorTypeToJSON,
    DefinedPreconditionErrorCreateVaultErrorTypeFromJSON,
    DefinedPreconditionErrorCreateVaultErrorTypeToJSON,
    ExchangeTypeFromJSON,
    ExchangeTypeToJSON,
    GetVaultResponseFromJSON,
    GetVaultResponseToJSON,
    ListOwnedAssetsResponseFromJSON,
    ListOwnedAssetsResponseToJSON,
    ListVaultAddressesResponseFromJSON,
    ListVaultAddressesResponseToJSON,
    ListVaultsResponseFromJSON,
    ListVaultsResponseToJSON,
    ListVaultsWithAssetsResponseFromJSON,
    ListVaultsWithAssetsResponseToJSON,
    OwnedAssetFromJSON,
    OwnedAssetToJSON,
    OwnedAssetsSortableFieldsFromJSON,
    OwnedAssetsSortableFieldsToJSON,
    PageResponseTypeFromJSON,
    PageResponseTypeToJSON,
    PreconditionFailedErrorFromJSON,
    PreconditionFailedErrorToJSON,
    PurgeImportedVaultsRequestFromJSON,
    PurgeImportedVaultsRequestToJSON,
    PurgeImportedVaultsResponseFromJSON,
    PurgeImportedVaultsResponseToJSON,
    RenameVaultRequestFromJSON,
    RenameVaultRequestToJSON,
    ResourceErrorFromJSON,
    ResourceErrorToJSON,
    UpdateVaultMetadataRequestFromJSON,
    UpdateVaultMetadataRequestToJSON,
    UtxoAddressTypeFromJSON,
    UtxoAddressTypeToJSON,
    UtxoVaultAddressFromJSON,
    UtxoVaultAddressToJSON,
    UtxoVaultSubTypeFromJSON,
    UtxoVaultSubTypeToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
    VaultAddressSortableFieldsFromJSON,
    VaultAddressSortableFieldsToJSON,
    VaultMetadataFromJSON,
    VaultMetadataToJSON,
    VaultOriginTypeFromJSON,
    VaultOriginTypeToJSON,
    VaultSortableFieldsFromJSON,
    VaultSortableFieldsToJSON,
    VaultStateFromJSON,
    VaultStateToJSON,
    VaultTypeFromJSON,
    VaultTypeToJSON,
} from '../models/index';

export interface AddVaultAssetApiV1VaultsIdAssetsAssetIdPostRequest {
    id: string;
    assetId: string;
}

export interface ArchiveVaultApiV1VaultsIdArchivePostRequest {
    id: string;
}

export interface CreateAddressApiV1VaultsIdAddressesPostRequest {
    id: string;
    body: CreateUtxoVaultAddressRequest;
}

export interface CreateVaultApiV1VaultsPostRequest {
    createVaultRequest: CreateVaultRequest;
}

export interface ExportVaultsWithAssetsApiV1VaultsExportGetRequest {
    vaultsIds?: Array<string>;
    vaultTypes?: Array<VaultType>;
}

export interface GetVaultApiV1VaultsIdGetRequest {
    id: string;
}

export interface GetVaultAssetApiV1VaultsIdAssetsAssetIdGetRequest {
    id: string;
    assetId: string;
    page?: number;
    size?: number;
    responseType?: PageResponseType;
}

export interface GetVaultAssetsApiV1VaultsIdAssetsGetRequest {
    id: string;
    page?: number;
    size?: number;
    responseType?: PageResponseType;
    chains?: Array<string>;
    assetIds?: Array<string>;
    isHidden?: boolean;
    search?: string;
    isTransferrable?: boolean;
    sortBy?: Array<OwnedAssetsSortableFields>;
}

export interface GetVaultMetadataApiV1VaultsIdMetadataGetRequest {
    id: string;
}

export interface ListVaultAddressesApiV1VaultsIdAddressesGetRequest {
    id: string;
    sortBy?: Array<VaultAddressSortableFields>;
    page?: number;
    size?: number;
    responseType?: PageResponseType;
    search?: string;
    addresses?: Array<string>;
    addressTypes?: Array<UtxoAddressType>;
}

export interface ListVaultsApiV1VaultsGetRequest {
    sortBy?: Array<VaultSortableFields>;
    page?: number;
    size?: number;
    responseType?: PageResponseType;
    vaultIds?: Array<string>;
    search?: string;
    names?: Array<string>;
    vaultTypes?: Array<VaultType>;
    vaultStates?: Array<VaultState>;
    keysetIds?: Array<string>;
    keyHolderIds?: Array<string>;
    vaultGroupIds?: Array<string>;
    excludeVaultGroupIds?: Array<string>;
    originType?: VaultOriginType;
}

export interface ListVaultsWithAssetsApiV1VaultsBalancesGetRequest {
    includeAssetsInfo?: boolean;
    page?: number;
    size?: number;
    responseType?: PageResponseType;
    vaultIds?: Array<string>;
    chains?: Array<string>;
    search?: string;
    vaultTypes?: Array<VaultType>;
    vaultStates?: Array<VaultState>;
    utxoVaultSubTypes?: Array<UtxoVaultSubType>;
    keyHolderIds?: Array<string>;
    hideEmpty?: boolean;
    vaultGroupIds?: Array<string>;
    assetIds?: Array<string>;
    exchangeDepositEnabledForBlockchainAssetId?: string;
    exchangeDepositEnabledForExchangeAssetId?: string;
    exchangeDepositEnabledOnChain?: string;
    exchangeTypes?: Array<ExchangeType>;
    originType?: VaultOriginType;
    sortBy?: Array<VaultSortableFields>;
}

export interface PurgeImportedVaultsApiV1VaultsPurgeImportedVaultsPostRequest {
    purgeImportedVaultsRequest: PurgeImportedVaultsRequest;
}

export interface RenameVaultAddressApiV1VaultsAddressesIdNamePutRequest {
    id: string;
    renameVaultRequest: RenameVaultRequest;
}

export interface RenameVaultApiV1VaultsIdNamePutRequest {
    id: string;
    renameVaultRequest: RenameVaultRequest;
}

export interface RestoreVaultApiV1VaultsIdRestorePostRequest {
    id: string;
}

export interface SyncVaultApiV1VaultsIdSyncPutRequest {
    id: string;
}

export interface UpdateVaultMetadataApiV1VaultsIdMetadataPutRequest {
    id: string;
    updateVaultMetadataRequest: UpdateVaultMetadataRequest;
}

/**
 * 
 */
export class VaultsApi extends runtime.BaseAPI {

    /**
     * Add a specific asset to a vault.
     * Add Vault Asset
     */
    async addVaultAssetApiV1VaultsIdAssetsAssetIdPostRaw(requestParameters: AddVaultAssetApiV1VaultsIdAssetsAssetIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnedAsset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addVaultAssetApiV1VaultsIdAssetsAssetIdPost().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling addVaultAssetApiV1VaultsIdAssetsAssetIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/assets/{asset_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnedAssetFromJSON(jsonValue));
    }

    /**
     * Add a specific asset to a vault.
     * Add Vault Asset
     */
    async addVaultAssetApiV1VaultsIdAssetsAssetIdPost(requestParameters: AddVaultAssetApiV1VaultsIdAssetsAssetIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnedAsset> {
        const response = await this.addVaultAssetApiV1VaultsIdAssetsAssetIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archive an existing vault.
     * Archive Vault
     */
    async archiveVaultApiV1VaultsIdArchivePostRaw(requestParameters: ArchiveVaultApiV1VaultsIdArchivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling archiveVaultApiV1VaultsIdArchivePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archive an existing vault.
     * Archive Vault
     */
    async archiveVaultApiV1VaultsIdArchivePost(requestParameters: ArchiveVaultApiV1VaultsIdArchivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.archiveVaultApiV1VaultsIdArchivePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new address.
     * Create Address
     */
    async createAddressApiV1VaultsIdAddressesPostRaw(requestParameters: CreateAddressApiV1VaultsIdAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UtxoVaultAddress>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createAddressApiV1VaultsIdAddressesPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createAddressApiV1VaultsIdAddressesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/addresses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UtxoVaultAddressFromJSON(jsonValue));
    }

    /**
     * Create a new address.
     * Create Address
     */
    async createAddressApiV1VaultsIdAddressesPost(requestParameters: CreateAddressApiV1VaultsIdAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UtxoVaultAddress> {
        const response = await this.createAddressApiV1VaultsIdAddressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new vault.
     * Create Vault
     */
    async createVaultApiV1VaultsPostRaw(requestParameters: CreateVaultApiV1VaultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVaultResponse>> {
        if (requestParameters['createVaultRequest'] == null) {
            throw new runtime.RequiredError(
                'createVaultRequest',
                'Required parameter "createVaultRequest" was null or undefined when calling createVaultApiV1VaultsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVaultRequestToJSON(requestParameters['createVaultRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVaultResponseFromJSON(jsonValue));
    }

    /**
     * Create a new vault.
     * Create Vault
     */
    async createVaultApiV1VaultsPost(requestParameters: CreateVaultApiV1VaultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVaultResponse> {
        const response = await this.createVaultApiV1VaultsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a CSV-format list of balances of all vaults and their assets.
     * Export Vaults With Assets
     */
    async exportVaultsWithAssetsApiV1VaultsExportGetRaw(requestParameters: ExportVaultsWithAssetsApiV1VaultsExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['vaultsIds'] != null) {
            queryParameters['vaults_ids'] = requestParameters['vaultsIds'];
        }

        if (requestParameters['vaultTypes'] != null) {
            queryParameters['vault_types'] = requestParameters['vaultTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get a CSV-format list of balances of all vaults and their assets.
     * Export Vaults With Assets
     */
    async exportVaultsWithAssetsApiV1VaultsExportGet(requestParameters: ExportVaultsWithAssetsApiV1VaultsExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.exportVaultsWithAssetsApiV1VaultsExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve vault details.
     * Get Vault
     */
    async getVaultApiV1VaultsIdGetRaw(requestParameters: GetVaultApiV1VaultsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVaultResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultApiV1VaultsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVaultResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve vault details.
     * Get Vault
     */
    async getVaultApiV1VaultsIdGet(requestParameters: GetVaultApiV1VaultsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVaultResponse> {
        const response = await this.getVaultApiV1VaultsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific asset in a vault.
     * Get Vault Asset
     */
    async getVaultAssetApiV1VaultsIdAssetsAssetIdGetRaw(requestParameters: GetVaultAssetApiV1VaultsIdAssetsAssetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnedAsset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultAssetApiV1VaultsIdAssetsAssetIdGet().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling getVaultAssetApiV1VaultsIdAssetsAssetIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/assets/{asset_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnedAssetFromJSON(jsonValue));
    }

    /**
     * Get a specific asset in a vault.
     * Get Vault Asset
     */
    async getVaultAssetApiV1VaultsIdAssetsAssetIdGet(requestParameters: GetVaultAssetApiV1VaultsIdAssetsAssetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnedAsset> {
        const response = await this.getVaultAssetApiV1VaultsIdAssetsAssetIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all assets in a vault.
     * Get Vault Assets
     */
    async getVaultAssetsApiV1VaultsIdAssetsGetRaw(requestParameters: GetVaultAssetsApiV1VaultsIdAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOwnedAssetsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultAssetsApiV1VaultsIdAssetsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['chains'] != null) {
            queryParameters['chains'] = requestParameters['chains'];
        }

        if (requestParameters['assetIds'] != null) {
            queryParameters['asset_ids'] = requestParameters['assetIds'];
        }

        if (requestParameters['isHidden'] != null) {
            queryParameters['is_hidden'] = requestParameters['isHidden'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['isTransferrable'] != null) {
            queryParameters['is_transferrable'] = requestParameters['isTransferrable'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOwnedAssetsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all assets in a vault.
     * Get Vault Assets
     */
    async getVaultAssetsApiV1VaultsIdAssetsGet(requestParameters: GetVaultAssetsApiV1VaultsIdAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOwnedAssetsResponse> {
        const response = await this.getVaultAssetsApiV1VaultsIdAssetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve extra vault details.
     * Get Vault Metadata
     */
    async getVaultMetadataApiV1VaultsIdMetadataGetRaw(requestParameters: GetVaultMetadataApiV1VaultsIdMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultMetadata>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultMetadataApiV1VaultsIdMetadataGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultMetadataFromJSON(jsonValue));
    }

    /**
     * Retrieve extra vault details.
     * Get Vault Metadata
     */
    async getVaultMetadataApiV1VaultsIdMetadataGet(requestParameters: GetVaultMetadataApiV1VaultsIdMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultMetadata> {
        const response = await this.getVaultMetadataApiV1VaultsIdMetadataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all addresses in a vault.
     * List Vault Addresses
     */
    async listVaultAddressesApiV1VaultsIdAddressesGetRaw(requestParameters: ListVaultAddressesApiV1VaultsIdAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultAddressesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listVaultAddressesApiV1VaultsIdAddressesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['addresses'] != null) {
            queryParameters['addresses'] = requestParameters['addresses'];
        }

        if (requestParameters['addressTypes'] != null) {
            queryParameters['address_types'] = requestParameters['addressTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/addresses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultAddressesResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all addresses in a vault.
     * List Vault Addresses
     */
    async listVaultAddressesApiV1VaultsIdAddressesGet(requestParameters: ListVaultAddressesApiV1VaultsIdAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultAddressesResponse> {
        const response = await this.listVaultAddressesApiV1VaultsIdAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all vaults in an organization.
     * List Vaults
     */
    async listVaultsApiV1VaultsGetRaw(requestParameters: ListVaultsApiV1VaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['vaultIds'] != null) {
            queryParameters['vault_ids'] = requestParameters['vaultIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['names'] != null) {
            queryParameters['names'] = requestParameters['names'];
        }

        if (requestParameters['vaultTypes'] != null) {
            queryParameters['vault_types'] = requestParameters['vaultTypes'];
        }

        if (requestParameters['vaultStates'] != null) {
            queryParameters['vault_states'] = requestParameters['vaultStates'];
        }

        if (requestParameters['keysetIds'] != null) {
            queryParameters['keyset_ids'] = requestParameters['keysetIds'];
        }

        if (requestParameters['keyHolderIds'] != null) {
            queryParameters['key_holder_ids'] = requestParameters['keyHolderIds'];
        }

        if (requestParameters['vaultGroupIds'] != null) {
            queryParameters['vault_group_ids'] = requestParameters['vaultGroupIds'];
        }

        if (requestParameters['excludeVaultGroupIds'] != null) {
            queryParameters['exclude_vault_group_ids'] = requestParameters['excludeVaultGroupIds'];
        }

        if (requestParameters['originType'] != null) {
            queryParameters['origin_type'] = requestParameters['originType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all vaults in an organization.
     * List Vaults
     */
    async listVaultsApiV1VaultsGet(requestParameters: ListVaultsApiV1VaultsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultsResponse> {
        const response = await this.listVaultsApiV1VaultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all vaults and their assets in an organization.
     * List Vaults With Assets
     */
    async listVaultsWithAssetsApiV1VaultsBalancesGetRaw(requestParameters: ListVaultsWithAssetsApiV1VaultsBalancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVaultsWithAssetsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['includeAssetsInfo'] != null) {
            queryParameters['include_assets_info'] = requestParameters['includeAssetsInfo'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['vaultIds'] != null) {
            queryParameters['vault_ids'] = requestParameters['vaultIds'];
        }

        if (requestParameters['chains'] != null) {
            queryParameters['chains'] = requestParameters['chains'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['vaultTypes'] != null) {
            queryParameters['vault_types'] = requestParameters['vaultTypes'];
        }

        if (requestParameters['vaultStates'] != null) {
            queryParameters['vault_states'] = requestParameters['vaultStates'];
        }

        if (requestParameters['utxoVaultSubTypes'] != null) {
            queryParameters['utxo_vault_sub_types'] = requestParameters['utxoVaultSubTypes'];
        }

        if (requestParameters['keyHolderIds'] != null) {
            queryParameters['key_holder_ids'] = requestParameters['keyHolderIds'];
        }

        if (requestParameters['hideEmpty'] != null) {
            queryParameters['hide_empty'] = requestParameters['hideEmpty'];
        }

        if (requestParameters['vaultGroupIds'] != null) {
            queryParameters['vault_group_ids'] = requestParameters['vaultGroupIds'];
        }

        if (requestParameters['assetIds'] != null) {
            queryParameters['asset_ids'] = requestParameters['assetIds'];
        }

        if (requestParameters['exchangeDepositEnabledForBlockchainAssetId'] != null) {
            queryParameters['exchange_deposit_enabled_for_blockchain_asset_id'] = requestParameters['exchangeDepositEnabledForBlockchainAssetId'];
        }

        if (requestParameters['exchangeDepositEnabledForExchangeAssetId'] != null) {
            queryParameters['exchange_deposit_enabled_for_exchange_asset_id'] = requestParameters['exchangeDepositEnabledForExchangeAssetId'];
        }

        if (requestParameters['exchangeDepositEnabledOnChain'] != null) {
            queryParameters['exchange_deposit_enabled_on_chain'] = requestParameters['exchangeDepositEnabledOnChain'];
        }

        if (requestParameters['exchangeTypes'] != null) {
            queryParameters['exchange_types'] = requestParameters['exchangeTypes'];
        }

        if (requestParameters['originType'] != null) {
            queryParameters['origin_type'] = requestParameters['originType'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/balances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultsWithAssetsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all vaults and their assets in an organization.
     * List Vaults With Assets
     */
    async listVaultsWithAssetsApiV1VaultsBalancesGet(requestParameters: ListVaultsWithAssetsApiV1VaultsBalancesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVaultsWithAssetsResponse> {
        const response = await this.listVaultsWithAssetsApiV1VaultsBalancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Purge imported vaults.
     * Purge Imported Vaults
     */
    async purgeImportedVaultsApiV1VaultsPurgeImportedVaultsPostRaw(requestParameters: PurgeImportedVaultsApiV1VaultsPurgeImportedVaultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurgeImportedVaultsResponse>> {
        if (requestParameters['purgeImportedVaultsRequest'] == null) {
            throw new runtime.RequiredError(
                'purgeImportedVaultsRequest',
                'Required parameter "purgeImportedVaultsRequest" was null or undefined when calling purgeImportedVaultsApiV1VaultsPurgeImportedVaultsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/purge-imported-vaults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurgeImportedVaultsRequestToJSON(requestParameters['purgeImportedVaultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurgeImportedVaultsResponseFromJSON(jsonValue));
    }

    /**
     * Purge imported vaults.
     * Purge Imported Vaults
     */
    async purgeImportedVaultsApiV1VaultsPurgeImportedVaultsPost(requestParameters: PurgeImportedVaultsApiV1VaultsPurgeImportedVaultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurgeImportedVaultsResponse> {
        const response = await this.purgeImportedVaultsApiV1VaultsPurgeImportedVaultsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename an existing vault address.
     * Rename Vault Address
     */
    async renameVaultAddressApiV1VaultsAddressesIdNamePutRaw(requestParameters: RenameVaultAddressApiV1VaultsAddressesIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling renameVaultAddressApiV1VaultsAddressesIdNamePut().'
            );
        }

        if (requestParameters['renameVaultRequest'] == null) {
            throw new runtime.RequiredError(
                'renameVaultRequest',
                'Required parameter "renameVaultRequest" was null or undefined when calling renameVaultAddressApiV1VaultsAddressesIdNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/addresses/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameVaultRequestToJSON(requestParameters['renameVaultRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename an existing vault address.
     * Rename Vault Address
     */
    async renameVaultAddressApiV1VaultsAddressesIdNamePut(requestParameters: RenameVaultAddressApiV1VaultsAddressesIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameVaultAddressApiV1VaultsAddressesIdNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Rename an existing vault.
     * Rename Vault
     */
    async renameVaultApiV1VaultsIdNamePutRaw(requestParameters: RenameVaultApiV1VaultsIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling renameVaultApiV1VaultsIdNamePut().'
            );
        }

        if (requestParameters['renameVaultRequest'] == null) {
            throw new runtime.RequiredError(
                'renameVaultRequest',
                'Required parameter "renameVaultRequest" was null or undefined when calling renameVaultApiV1VaultsIdNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameVaultRequestToJSON(requestParameters['renameVaultRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename an existing vault.
     * Rename Vault
     */
    async renameVaultApiV1VaultsIdNamePut(requestParameters: RenameVaultApiV1VaultsIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameVaultApiV1VaultsIdNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Restore an archived vault.
     * Restore Vault
     */
    async restoreVaultApiV1VaultsIdRestorePostRaw(requestParameters: RestoreVaultApiV1VaultsIdRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling restoreVaultApiV1VaultsIdRestorePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore an archived vault.
     * Restore Vault
     */
    async restoreVaultApiV1VaultsIdRestorePost(requestParameters: RestoreVaultApiV1VaultsIdRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restoreVaultApiV1VaultsIdRestorePostRaw(requestParameters, initOverrides);
    }

    /**
     * Sync assets of a vault.
     * Sync Vault
     */
    async syncVaultApiV1VaultsIdSyncPutRaw(requestParameters: SyncVaultApiV1VaultsIdSyncPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling syncVaultApiV1VaultsIdSyncPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/sync`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sync assets of a vault.
     * Sync Vault
     */
    async syncVaultApiV1VaultsIdSyncPut(requestParameters: SyncVaultApiV1VaultsIdSyncPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncVaultApiV1VaultsIdSyncPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update vault metadata details.
     * Update Vault Metadata
     */
    async updateVaultMetadataApiV1VaultsIdMetadataPutRaw(requestParameters: UpdateVaultMetadataApiV1VaultsIdMetadataPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateVaultMetadataApiV1VaultsIdMetadataPut().'
            );
        }

        if (requestParameters['updateVaultMetadataRequest'] == null) {
            throw new runtime.RequiredError(
                'updateVaultMetadataRequest',
                'Required parameter "updateVaultMetadataRequest" was null or undefined when calling updateVaultMetadataApiV1VaultsIdMetadataPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/vaults/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVaultMetadataRequestToJSON(requestParameters['updateVaultMetadataRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update vault metadata details.
     * Update Vault Metadata
     */
    async updateVaultMetadataApiV1VaultsIdMetadataPut(requestParameters: UpdateVaultMetadataApiV1VaultsIdMetadataPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateVaultMetadataApiV1VaultsIdMetadataPutRaw(requestParameters, initOverrides);
    }

}
