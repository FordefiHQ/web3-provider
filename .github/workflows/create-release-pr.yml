name: Create Release PR

on:
  workflow_dispatch:
  push:
    branches:
      - release/*

permissions:
  pull-requests: write

concurrency: "${{github.workflow}}-${{github.ref}}"

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  NODE_VERSION: "18.19.1"

jobs:
  detect-new-version:
    name: Detect New Version
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION_TAG: ${{ steps.detect-version.outputs.NEW_VERSION_TAG }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch all history for all tags and branches

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Yarn
        run: npm install -g yarn

      - name: Detect New Version
        id: detect-version
        run: |
          NEW_VERSION=$(yarn --silent version:current)
          git diff origin/main.. -- package.json | grep "\"version\": \"${NEW_VERSION}\"" > /dev/null && HAS_VERSION_CHANGE=0 || HAS_VERSION_CHANGE=1
          echo "HAS_VERSION_CHANGE=${HAS_VERSION_CHANGE}"

          if [ $HAS_VERSION_CHANGE -eq 0 ]; then
            echo "New version detected ${NEW_VERSION}"

            echo "IS_NEW_VERSION=true" >> $GITHUB_OUTPUT
            echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "NEW_VERSION_TAG=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "No version change detected, exiting"
            exit 1
          fi

      - name: Verify Release Changes
        if: ${{ steps.detect-version.outputs.IS_NEW_VERSION == 'true' }}
        run: |
          # TODO: remove
          echo "IS_NEW_VERSION=${{ steps.detect-version.outputs.IS_NEW_VERSION }}"
          echo "NEW_VERSION=${{ steps.detect-version.outputs.NEW_VERSION }}"
          echo "NEW_VERSION_TAG=${{ steps.detect-version.outputs.NEW_VERSION_TAG }}"

          function verify_file_has_diff_with_version() {
            FILE_NAME=$1
            FILE_DIFF="$(git diff origin/main.. -- ${FILE_NAME})"

            echo "Diff in $FILE_NAME:\n$FILE_DIFF"

            if [ "$(echo "${FILE_DIFF}" | wc -l)" -eq 0 ]; then
              echo "No diff detected in $FILE_NAME, exiting"
              exit 1
            fi

            HAS_VERSION_IN_FILE=$([ "$(echo "${FILE_DIFF}" | grep -c "${{ steps.detect-version.outputs.NEW_VERSION }}")" -gt 0 ] && echo "true" || echo "false")

            if [ "$HAS_VERSION_IN_FILE" = "true" ]; then
              echo "Detected changes in $FILE_NAME that include the new version (as expected)"
            else
              echo "Detected changes in $FILE_NAME that don't contain the new version, exiting"
              exit 1
            fi
          }

          verify_file_has_diff_with_version CHANGELOG.md
          verify_file_has_diff_with_version package.json

  create-pr:
    name: Create PR
    runs-on: ubuntu-latest
    needs: detect-new-version
    env:
      NEW_VERSION_TAG: ${{ needs.detect-new-version.outputs.NEW_VERSION_TAG }}
    outputs:
      CREATE_PR_SUCCESS: ${{ steps.create-pr-gh-cli.outputs.CREATE_PR_SUCCESS }}
      CREATED_PR_URL: ${{ steps.create-pr-gh-cli.outputs.CREATED_PR_URL }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch all history for all tags and branches

      - name: Generate GH token
        id: generate-gh-token
        env:
          # The app is owned by @gilmeir-arnac, settings: https://github.com/settings/apps/create-pr-from-github-actions
          CREATE_PR_APP_PRIVATE_KEY: ${{ secrets.CREATE_PR_APP_PRIVATE_KEY }}
          CREATE_PR_APP_ID: "896608"
          # Installation of the app in this organization, see: https://github.com/FordefiHQ/web3-provider/settings/installations
          CREATE_PR_APP_INSTALLATION_ID_IN_ORG: "50650204"
        run: |
          function buildJwt() {
            # Build JWT Header
            HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 -e -A | sed s/\\+/-/g | sed s/\\//_/g | sed -E s/=+$//)

            # Build JWT Payload
            iat=$(date +%s)  # Current time in seconds since the Unix epoch
            exp=$((iat + 120))  # JWT expiration time set to 2 minutes after the issued at time
            PAYLOAD=$(echo -n "{\"iat\":$iat,\"exp\":$exp,\"iss\":\"${{ env.CREATE_PR_APP_ID }}\"}" | openssl base64 -e -A | sed s/\\+/-/g | sed s/\\//_/g | sed -E s/=+$//)

            # Build JWT Signature - sign header and payload with the app's private key
            UNSIGNED_TOKEN="$HEADER.$PAYLOAD"
            PRIVATE_KEY_PATH="gh_create_pr_app_private.pem"
            echo "$CREATE_PR_APP_PRIVATE_KEY" > $PRIVATE_KEY_PATH
            SIGNATURE=$(echo -n "$UNSIGNED_TOKEN" | openssl dgst -sha256 -sign "$PRIVATE_KEY_PATH" | openssl base64 -e -A | sed s/\\+/-/g | sed s/\\//_/g | sed -E s/=+$//)

            echo "$UNSIGNED_TOKEN.$SIGNATURE"
          }

          # Make API request to issue a token
          INSTALLATION_ACCESS_TOKEN_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $(buildJwt)" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations/${{ env.CREATE_PR_APP_INSTALLATION_ID_IN_ORG }}/access_tokens)

          # Extract the token
          INSTALLATION_ACCESS_TOKEN=$(echo "$INSTALLATION_ACCESS_TOKEN_RESPONSE" | jq -r '.token')
          echo "INSTALLATION_ACCESS_TOKEN=$INSTALLATION_ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr-gh-cli
        run: |
          echo "${{ steps.generate-gh-token.outputs.INSTALLATION_ACCESS_TOKEN }}" | gh auth login --with-token

          gh pr create \
            --base main \
            --head "${{ github.ref_name }}" \
            --title "Release ${{ env.NEW_VERSION_TAG }}" \
            --body "
            - [ ] Bump the version in package.json.
            - [ ] Update CHANGELOG.md.
            " \
            --reviewer "gilmeir-arnac" \
            --assignee "${{ github.actor }}"

          echo "CREATE_PR_SUCCESS=$( [ $? -eq 0 ] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT

          CREATED_PR_URL="$(gh pr list --repo ${{ github.repository }} --head ${{ github.ref_name }} --base main --json url --jq ".[].url")"
          echo "CREATED_PR_URL=$CREATED_PR_URL" >> $GITHUB_OUTPUT

  report-to-slack:
    name: Report result to Slack
    runs-on: ubuntu-latest
    needs: [detect-new-version, create-pr]
    env:
      NEW_VERSION_TAG: ${{ needs.detect-new-version.outputs.NEW_VERSION_TAG }}
      CREATE_PR_SUCCESS: ${{ needs.create-pr.outputs.CREATE_PR_SUCCESS }}
      CREATED_PR_URL: ${{ needs.create-pr.outputs.CREATED_PR_URL }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      # channel #web3-provider-releases
      SLACK_CHANNEL_ID: "C072BEST4AC"
    steps:
      - name: Notify Slack on Success
        if: ${{ env.CREATE_PR_SUCCESS == 'true' }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          # Slack Block Kit API: https://api.slack.com/reference/block-kit/blocks#link-element-type
          payload: |
            {
              "text": "Release `${{ env.NEW_VERSION_TAG }}` PR is waiting for approval",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Pull request: ${{ env.CREATED_PR_URL }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Initiator: `${{ github.actor }}`"
                  }
                }
              ]
            }

      - name: Notify Slack on Failure
        if: ${{ env.CREATE_PR_SUCCESS != 'true' }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          # Slack Block Kit API: https://api.slack.com/reference/block-kit/blocks#link-element-type
          payload: |
            {
              "text": "Failed to create a release PR for `${{ env.NEW_VERSION_TAG }}`",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
