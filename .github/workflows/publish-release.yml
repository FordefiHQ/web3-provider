name: Publish Release

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (optional - will use package.json if not provided)'
        required: false
        type: string

permissions:
  contents: write
  id-token: write # for npm provenance

concurrency: 
  group: "release-${{ github.ref }}"
  cancel-in-progress: false

env:
  NODE_VERSION: "20"
  SLACK_CHANNEL_ID: "C072BEST4AC"
  PACKAGE_NAME: "@fordefi/web3-provider"
  WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    if: ${{ (github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')) || github.event_name == 'workflow_dispatch' }}
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.version.outputs.version }}
      version-tag: ${{ steps.version.outputs.version-tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Get Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="$(yarn --silent version:current)"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version-tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Validate Release
        id: check
        run: |
          # Check if version already exists on NPM
          if npm view ${{ env.PACKAGE_NAME }}@$VERSION > /dev/null 2>&1; then
            echo "‚ùå Version $VERSION already exists on NPM"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if git tag already exists
          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "‚ùå Git tag v$VERSION already exists"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Version $VERSION is ready for release"
          echo "should-release=true" >> $GITHUB_OUTPUT

      - name: Type checks
        run: yarn ts:check

      - name: Build Package
        run: yarn build

  publish-to-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.should-release == 'true'
    environment: production
    outputs:
      version: ${{ needs.validate-release.outputs.version }}
      version-tag: ${{ needs.validate-release.outputs.version-tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4

        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Build Package
        run: yarn build

      - name: Verify NPM Token
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -e
          npm whoami

      - name: Publish to NPM
        run: yarn publish:latest --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          NPM_RELEASE_URL: "https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}/v/${{ needs.validate-release.outputs.version }}"
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release `${{ needs.validate-release.outputs.version-tag }}` was successfully published to NPM* üì¶\n<${{ env.NPM_RELEASE_URL }}|View on NPM> | <${{ env.WORKFLOW_URL }}|Workflow>"
                  }
                }
              ]
            }

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release `${{ needs.validate-release.outputs.version-tag }}` failed to publish to NPM* ‚ùå\n<${{ env.WORKFLOW_URL }}|View Workflow>"
                  }
                }
              ]
            }

  create-release:
    name: Create GitHub Release
    needs: [validate-release, publish-to-npm]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Github API Token
        id: generate-gh-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CREATE_PR_APP_ID }}
          private-key: ${{ secrets.CREATE_PR_APP_PRIVATE_KEY }}

      - name: Make Sure The Token Is Valid
        env:
          GH_TOKEN: ${{ steps.generate-gh-token.outputs.token }}
        run: |
          set -e
          gh auth status

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ steps.generate-gh-token.outputs.token }}
        run: |
          gh release create ${{ needs.validate-release.outputs.version-tag }} \
            --title "Release ${{ needs.validate-release.outputs.version-tag }}" \
            --generate-notes \
            --verify-tag

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          GITHUB_RELEASE_URL: "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version-tag }}"
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*GitHub Release `${{ needs.validate-release.outputs.version-tag }}` created successfully* üöÄ\n<${{ env.GITHUB_RELEASE_URL }}|View Release>"
                  }
                }
              ]
            }

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*GitHub Release creation failed for `${{ needs.validate-release.outputs.version-tag }}`* ‚ùå\n<${{ env.WORKFLOW_URL }}|View Workflow>"
                  }
                }
              ]
            } 